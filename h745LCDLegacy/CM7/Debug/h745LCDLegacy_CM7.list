
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afcc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b264  0800b264  0001b264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2a4  0800b2a4  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2a4  0800b2a4  0001b2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ac  0800b2ac  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2ac  0800b2ac  0001b2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800b2b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800b338  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800b398  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c7e0  24000144  0800b3f8  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400c924  0800b3f8  0002c924  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029a54  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041f3  00000000  00000000  00049bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001330  00000000  00000000  0004ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011e8  00000000  00000000  0004f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b812  00000000  00000000  000502d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019ca9  00000000  00000000  0008baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018301f  00000000  00000000  000a5793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  002287b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005268  00000000  00000000  00228808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000144 	.word	0x24000144
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b24c 	.word	0x0800b24c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000148 	.word	0x24000148
 80002d4:	0800b24c 	.word	0x0800b24c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <BMPDecoder>:
} Convert8_32;

#define IMG_W 128
#define IMG_H 128
static stateBMP State = 0;
void BMPDecoder(uint8_t dataIn, uint8_t *array) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]

	static Convert8_32 size, StartPoint, HeaderSize, PW, PH, BPS;
	static uint32_t Substate, offset, imageSize;

	switch (State) {
 8000710:	4b98      	ldr	r3, [pc, #608]	; (8000974 <BMPDecoder+0x270>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b0c      	cmp	r3, #12
 8000716:	f200 81ac 	bhi.w	8000a72 <BMPDecoder+0x36e>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <BMPDecoder+0x1c>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000755 	.word	0x08000755
 8000724:	0800076f 	.word	0x0800076f
 8000728:	0800078b 	.word	0x0800078b
 800072c:	080007b7 	.word	0x080007b7
 8000730:	080007d9 	.word	0x080007d9
 8000734:	08000805 	.word	0x08000805
 8000738:	08000841 	.word	0x08000841
 800073c:	0800086d 	.word	0x0800086d
 8000740:	08000899 	.word	0x08000899
 8000744:	080008bb 	.word	0x080008bb
 8000748:	080008e7 	.word	0x080008e7
 800074c:	08000909 	.word	0x08000909
 8000750:	08000a33 	.word	0x08000a33
	case BMP_idle:

		if (dataIn == 0x42) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b42      	cmp	r3, #66	; 0x42
 8000758:	d102      	bne.n	8000760 <BMPDecoder+0x5c>
			State = BMP_Header_2;
 800075a:	4b86      	ldr	r3, [pc, #536]	; (8000974 <BMPDecoder+0x270>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]

		}
		Substate = 0;
 8000760:	4b85      	ldr	r3, [pc, #532]	; (8000978 <BMPDecoder+0x274>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
		offset = 0;
 8000766:	4b85      	ldr	r3, [pc, #532]	; (800097c <BMPDecoder+0x278>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
		break;
 800076c:	e181      	b.n	8000a72 <BMPDecoder+0x36e>

	case BMP_Header_2:
		if (dataIn == 0x4D) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b4d      	cmp	r3, #77	; 0x4d
 8000772:	d106      	bne.n	8000782 <BMPDecoder+0x7e>
			State = BMP_Size_4;
 8000774:	4b7f      	ldr	r3, [pc, #508]	; (8000974 <BMPDecoder+0x270>)
 8000776:	2202      	movs	r2, #2
 8000778:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 800077a:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <BMPDecoder+0x274>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
		} else {
			State = BMP_idle;
		}
		break;
 8000780:	e177      	b.n	8000a72 <BMPDecoder+0x36e>
			State = BMP_idle;
 8000782:	4b7c      	ldr	r3, [pc, #496]	; (8000974 <BMPDecoder+0x270>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		break;
 8000788:	e173      	b.n	8000a72 <BMPDecoder+0x36e>
	case BMP_Size_4:
		size.U8[Substate] = dataIn;
 800078a:	4b7b      	ldr	r3, [pc, #492]	; (8000978 <BMPDecoder+0x274>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	497c      	ldr	r1, [pc, #496]	; (8000980 <BMPDecoder+0x27c>)
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000794:	4b78      	ldr	r3, [pc, #480]	; (8000978 <BMPDecoder+0x274>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a77      	ldr	r2, [pc, #476]	; (8000978 <BMPDecoder+0x274>)
 800079c:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 800079e:	4b76      	ldr	r3, [pc, #472]	; (8000978 <BMPDecoder+0x274>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	f040 8150 	bne.w	8000a48 <BMPDecoder+0x344>
			State = BMP_Reserved0_4;
 80007a8:	4b72      	ldr	r3, [pc, #456]	; (8000974 <BMPDecoder+0x270>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007ae:	4b72      	ldr	r3, [pc, #456]	; (8000978 <BMPDecoder+0x274>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
		}
		break;
 80007b4:	e148      	b.n	8000a48 <BMPDecoder+0x344>
	case BMP_Reserved0_4:
		Substate++;
 80007b6:	4b70      	ldr	r3, [pc, #448]	; (8000978 <BMPDecoder+0x274>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a6e      	ldr	r2, [pc, #440]	; (8000978 <BMPDecoder+0x274>)
 80007be:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007c0:	4b6d      	ldr	r3, [pc, #436]	; (8000978 <BMPDecoder+0x274>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	f040 8141 	bne.w	8000a4c <BMPDecoder+0x348>
			State = BMP_Imagestartpoint_4;
 80007ca:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <BMPDecoder+0x270>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007d0:	4b69      	ldr	r3, [pc, #420]	; (8000978 <BMPDecoder+0x274>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80007d6:	e139      	b.n	8000a4c <BMPDecoder+0x348>

	case BMP_Imagestartpoint_4:
		StartPoint.U8[Substate] = dataIn;
 80007d8:	4b67      	ldr	r3, [pc, #412]	; (8000978 <BMPDecoder+0x274>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4969      	ldr	r1, [pc, #420]	; (8000984 <BMPDecoder+0x280>)
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80007e2:	4b65      	ldr	r3, [pc, #404]	; (8000978 <BMPDecoder+0x274>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a63      	ldr	r2, [pc, #396]	; (8000978 <BMPDecoder+0x274>)
 80007ea:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007ec:	4b62      	ldr	r3, [pc, #392]	; (8000978 <BMPDecoder+0x274>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	f040 812d 	bne.w	8000a50 <BMPDecoder+0x34c>
			State = BMP_SizeHeader_4;
 80007f6:	4b5f      	ldr	r3, [pc, #380]	; (8000974 <BMPDecoder+0x270>)
 80007f8:	2205      	movs	r2, #5
 80007fa:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <BMPDecoder+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		}
		break;
 8000802:	e125      	b.n	8000a50 <BMPDecoder+0x34c>

	case BMP_SizeHeader_4:
		HeaderSize.U8[Substate] = dataIn;
 8000804:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <BMPDecoder+0x274>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	495f      	ldr	r1, [pc, #380]	; (8000988 <BMPDecoder+0x284>)
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800080e:	4b5a      	ldr	r3, [pc, #360]	; (8000978 <BMPDecoder+0x274>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a58      	ldr	r2, [pc, #352]	; (8000978 <BMPDecoder+0x274>)
 8000816:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000818:	4b57      	ldr	r3, [pc, #348]	; (8000978 <BMPDecoder+0x274>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b04      	cmp	r3, #4
 800081e:	f040 8119 	bne.w	8000a54 <BMPDecoder+0x350>
			if (HeaderSize.U32 == 40) {
 8000822:	4b59      	ldr	r3, [pc, #356]	; (8000988 <BMPDecoder+0x284>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b28      	cmp	r3, #40	; 0x28
 8000828:	d106      	bne.n	8000838 <BMPDecoder+0x134>
				State = BMP_PicWidth_4;
 800082a:	4b52      	ldr	r3, [pc, #328]	; (8000974 <BMPDecoder+0x270>)
 800082c:	2206      	movs	r2, #6
 800082e:	701a      	strb	r2, [r3, #0]
				Substate = 0;
 8000830:	4b51      	ldr	r3, [pc, #324]	; (8000978 <BMPDecoder+0x274>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
			} else {
				State = BMP_idle;
			}
		}
		break;
 8000836:	e10d      	b.n	8000a54 <BMPDecoder+0x350>
				State = BMP_idle;
 8000838:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <BMPDecoder+0x270>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
		break;
 800083e:	e109      	b.n	8000a54 <BMPDecoder+0x350>
	case BMP_PicWidth_4:
		PW.U8[Substate] = dataIn;
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <BMPDecoder+0x274>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4951      	ldr	r1, [pc, #324]	; (800098c <BMPDecoder+0x288>)
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800084a:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <BMPDecoder+0x274>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	4a49      	ldr	r2, [pc, #292]	; (8000978 <BMPDecoder+0x274>)
 8000852:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <BMPDecoder+0x274>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b04      	cmp	r3, #4
 800085a:	f040 80fd 	bne.w	8000a58 <BMPDecoder+0x354>
			State = BMP_PicHeight_4;
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <BMPDecoder+0x270>)
 8000860:	2207      	movs	r2, #7
 8000862:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000864:	4b44      	ldr	r3, [pc, #272]	; (8000978 <BMPDecoder+0x274>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
		}
		break;
 800086a:	e0f5      	b.n	8000a58 <BMPDecoder+0x354>
	case BMP_PicHeight_4:
		PH.U8[Substate] = dataIn;
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <BMPDecoder+0x274>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4947      	ldr	r1, [pc, #284]	; (8000990 <BMPDecoder+0x28c>)
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <BMPDecoder+0x274>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a3e      	ldr	r2, [pc, #248]	; (8000978 <BMPDecoder+0x274>)
 800087e:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <BMPDecoder+0x274>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b04      	cmp	r3, #4
 8000886:	f040 80e9 	bne.w	8000a5c <BMPDecoder+0x358>
			State = BMP_ColorPlanes_2;
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <BMPDecoder+0x270>)
 800088c:	2208      	movs	r2, #8
 800088e:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000890:	4b39      	ldr	r3, [pc, #228]	; (8000978 <BMPDecoder+0x274>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
		}
		break;
 8000896:	e0e1      	b.n	8000a5c <BMPDecoder+0x358>
	case BMP_ColorPlanes_2:

		Substate++;
 8000898:	4b37      	ldr	r3, [pc, #220]	; (8000978 <BMPDecoder+0x274>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <BMPDecoder+0x274>)
 80008a0:	6013      	str	r3, [r2, #0]
		if (Substate == 2) {
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <BMPDecoder+0x274>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	f040 80da 	bne.w	8000a60 <BMPDecoder+0x35c>
			State = BMP_BitPerPixel_2;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <BMPDecoder+0x270>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <BMPDecoder+0x274>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80008b8:	e0d2      	b.n	8000a60 <BMPDecoder+0x35c>
	case BMP_BitPerPixel_2:
		BPS.U8[Substate] = dataIn;
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <BMPDecoder+0x274>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4935      	ldr	r1, [pc, #212]	; (8000994 <BMPDecoder+0x290>)
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <BMPDecoder+0x274>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <BMPDecoder+0x274>)
 80008cc:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <BMPDecoder+0x274>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	f040 80c6 	bne.w	8000a64 <BMPDecoder+0x360>
			State = BMP_Notused1_n;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <BMPDecoder+0x270>)
 80008da:	220a      	movs	r2, #10
 80008dc:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <BMPDecoder+0x274>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e4:	e0be      	b.n	8000a64 <BMPDecoder+0x360>
	case BMP_Notused1_n:
		if (offset == StartPoint.U32) {
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <BMPDecoder+0x280>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <BMPDecoder+0x278>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f040 80ba 	bne.w	8000a68 <BMPDecoder+0x364>
			State = BMP_Pixeldata_n;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <BMPDecoder+0x270>)
 80008f6:	220b      	movs	r2, #11
 80008f8:	701a      	strb	r2, [r3, #0]
			array[0] = dataIn;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	701a      	strb	r2, [r3, #0]
			Substate = 1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <BMPDecoder+0x274>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		}
		break;
 8000906:	e0af      	b.n	8000a68 <BMPDecoder+0x364>
	case BMP_Pixeldata_n:
		if ((Substate / (IMG_W * 3)) < PH.U32) {
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <BMPDecoder+0x274>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <BMPDecoder+0x294>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0a1a      	lsrs	r2, r3, #8
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <BMPDecoder+0x28c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d268      	bcs.n	80009ee <BMPDecoder+0x2ea>

			if ((Substate % (IMG_W * 3)) < (PW.U32 * 3)) {
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <BMPDecoder+0x274>)
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <BMPDecoder+0x294>)
 8000922:	fba3 2301 	umull	r2, r3, r3, r1
 8000926:	0a1a      	lsrs	r2, r3, #8
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	01db      	lsls	r3, r3, #7
 8000930:	1aca      	subs	r2, r1, r3
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <BMPDecoder+0x288>)
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	429a      	cmp	r2, r3
 800093e:	d209      	bcs.n	8000954 <BMPDecoder+0x250>
				array[Substate++] = dataIn;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <BMPDecoder+0x274>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	490c      	ldr	r1, [pc, #48]	; (8000978 <BMPDecoder+0x274>)
 8000948:	600a      	str	r2, [r1, #0]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e054      	b.n	80009fe <BMPDecoder+0x2fa>
			}
			else if(((Substate) % 4))
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <BMPDecoder+0x274>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d026      	beq.n	80009ae <BMPDecoder+0x2aa>
			{
				array[Substate++] = dataIn;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <BMPDecoder+0x274>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	4904      	ldr	r1, [pc, #16]	; (8000978 <BMPDecoder+0x274>)
 8000968:	600a      	str	r2, [r1, #0]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e044      	b.n	80009fe <BMPDecoder+0x2fa>
 8000974:	24000160 	.word	0x24000160
 8000978:	24000164 	.word	0x24000164
 800097c:	24000168 	.word	0x24000168
 8000980:	2400016c 	.word	0x2400016c
 8000984:	24000170 	.word	0x24000170
 8000988:	24000174 	.word	0x24000174
 800098c:	24000178 	.word	0x24000178
 8000990:	2400017c 	.word	0x2400017c
 8000994:	24000180 	.word	0x24000180
 8000998:	aaaaaaab 	.word	0xaaaaaaab
			}
			else
			{
				while ((Substate % (IMG_W * 3)) != 0) {
					array[Substate++] = 0; 	//fill blankdata with black
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <BMPDecoder+0x384>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	4939      	ldr	r1, [pc, #228]	; (8000a88 <BMPDecoder+0x384>)
 80009a4:	600a      	str	r2, [r1, #0]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
				while ((Substate % (IMG_W * 3)) != 0) {
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <BMPDecoder+0x384>)
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <BMPDecoder+0x388>)
 80009b4:	fba3 2301 	umull	r2, r3, r3, r1
 80009b8:	0a1a      	lsrs	r2, r3, #8
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	01db      	lsls	r3, r3, #7
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d1e9      	bne.n	800099c <BMPDecoder+0x298>
				}
				array[Substate++] = dataIn;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <BMPDecoder+0x384>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	492e      	ldr	r1, [pc, #184]	; (8000a88 <BMPDecoder+0x384>)
 80009d0:	600a      	str	r2, [r1, #0]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e010      	b.n	80009fe <BMPDecoder+0x2fa>
			}
		} else {
			while (Substate / (IMG_W * 3) < IMG_H) {
				array[Substate++] = 0; 	//fill blankdata with black
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <BMPDecoder+0x384>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	4929      	ldr	r1, [pc, #164]	; (8000a88 <BMPDecoder+0x384>)
 80009e4:	600a      	str	r2, [r1, #0]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	4413      	add	r3, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			while (Substate / (IMG_W * 3) < IMG_H) {
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <BMPDecoder+0x384>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80009f6:	d3f1      	bcc.n	80009dc <BMPDecoder+0x2d8>
			}

			State = BMP_Notused2_n;
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <BMPDecoder+0x38c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	701a      	strb	r2, [r3, #0]

		}
		if (offset >= size.U32-1) {
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <BMPDecoder+0x390>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <BMPDecoder+0x394>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d82f      	bhi.n	8000a6c <BMPDecoder+0x368>
							State = BMP_idle;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <BMPDecoder+0x38c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a12:	e008      	b.n	8000a26 <BMPDecoder+0x322>
										array[Substate++] = 0; 	//fill blankdata with black
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <BMPDecoder+0x384>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	491b      	ldr	r1, [pc, #108]	; (8000a88 <BMPDecoder+0x384>)
 8000a1c:	600a      	str	r2, [r1, #0]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <BMPDecoder+0x384>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000a2e:	d3f1      	bcc.n	8000a14 <BMPDecoder+0x310>
									}
						}
		break;
 8000a30:	e01c      	b.n	8000a6c <BMPDecoder+0x368>
	case BMP_Notused2_n:
		if (offset >= size.U32-1) {
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <BMPDecoder+0x390>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <BMPDecoder+0x394>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d817      	bhi.n	8000a70 <BMPDecoder+0x36c>
			State = BMP_idle;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <BMPDecoder+0x38c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000a46:	e013      	b.n	8000a70 <BMPDecoder+0x36c>
		break;
 8000a48:	bf00      	nop
 8000a4a:	e012      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e010      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a50:	bf00      	nop
 8000a52:	e00e      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a54:	bf00      	nop
 8000a56:	e00c      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e00a      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a5c:	bf00      	nop
 8000a5e:	e008      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a60:	bf00      	nop
 8000a62:	e006      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a64:	bf00      	nop
 8000a66:	e004      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e002      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e000      	b.n	8000a72 <BMPDecoder+0x36e>
		break;
 8000a70:	bf00      	nop

	}
	offset++;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <BMPDecoder+0x394>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <BMPDecoder+0x394>)
 8000a7a:	6013      	str	r3, [r2, #0]

}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	24000164 	.word	0x24000164
 8000a8c:	aaaaaaab 	.word	0xaaaaaaab
 8000a90:	24000160 	.word	0x24000160
 8000a94:	2400016c 	.word	0x2400016c
 8000a98:	24000168 	.word	0x24000168

08000a9c <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6858      	ldr	r0, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f004 fea7 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f001 f944 	bl	8001d44 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6858      	ldr	r0, [r3, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f004 fe9b 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6898      	ldr	r0, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	f004 fe92 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f001 f92f 	bl	8001d44 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6898      	ldr	r0, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	f004 fe86 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68d8      	ldr	r0, [r3, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	f004 fe7d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	2204      	movs	r2, #4
 8000b12:	4938      	ldr	r1, [pc, #224]	; (8000bf4 <LCD_init+0x158>)
 8000b14:	f007 fc70 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68d8      	ldr	r0, [r3, #12]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	f004 fe6d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	2201      	movs	r2, #1
 8000b32:	4931      	ldr	r1, [pc, #196]	; (8000bf8 <LCD_init+0x15c>)
 8000b34:	f007 fc60 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68d8      	ldr	r0, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	f004 fe5d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	2201      	movs	r2, #1
 8000b52:	492a      	ldr	r1, [pc, #168]	; (8000bfc <LCD_init+0x160>)
 8000b54:	f007 fc50 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68d8      	ldr	r0, [r3, #12]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f004 fe4d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2204      	movs	r2, #4
 8000b72:	4923      	ldr	r1, [pc, #140]	; (8000c00 <LCD_init+0x164>)
 8000b74:	f007 fc40 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68d8      	ldr	r0, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	f004 fe3d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2201      	movs	r2, #1
 8000b92:	491c      	ldr	r1, [pc, #112]	; (8000c04 <LCD_init+0x168>)
 8000b94:	f007 fc30 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68d8      	ldr	r0, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f004 fe2d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4915      	ldr	r1, [pc, #84]	; (8000c08 <LCD_init+0x16c>)
 8000bb4:	f007 fc20 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68d8      	ldr	r0, [r3, #12]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f004 fe1d 	bl	8005804 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LCD_init+0x170>)
 8000bd4:	f007 fc10 	bl	80083f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68d8      	ldr	r0, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f004 fe0d 	bl	8005804 <HAL_GPIO_WritePin>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000008 	.word	0x24000008
 8000bf8:	2400000c 	.word	0x2400000c
 8000bfc:	2400000d 	.word	0x2400000d
 8000c00:	2400000e 	.word	0x2400000e
 8000c04:	24000012 	.word	0x24000012
 8000c08:	24000013 	.word	0x24000013
 8000c0c:	24000017 	.word	0x24000017

08000c10 <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000c20:	4903      	ldr	r1, [pc, #12]	; (8000c30 <LCD_flush+0x20>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f007 fdda 	bl	80087dc <HAL_SPI_Transmit_DMA>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	24000184 	.word	0x24000184

08000c34 <LCDBufferAddr>:

uint8_t* LCDBufferAddr()
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	return Framememory;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <LCDBufferAddr+0x10>)
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	24000184 	.word	0x24000184

08000c48 <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	88db      	ldrh	r3, [r3, #6]
 8000c54:	4619      	mov	r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	f00a fa36 	bl	800b0c8 <calloc>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	889b      	ldrh	r3, [r3, #4]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f00a fa2c 	bl	800b0c8 <calloc>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	81da      	strh	r2, [r3, #14]

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	88db      	ldrh	r3, [r3, #6]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f008 fa98 	bl	80091dc <HAL_UART_Receive_DMA>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	88db      	ldrh	r3, [r3, #6]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <UARTGetRxHead+0x114>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d068      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <UARTGetRxHead+0x118>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d061      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a3a      	ldr	r2, [pc, #232]	; (8000dd0 <UARTGetRxHead+0x11c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d05a      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a37      	ldr	r2, [pc, #220]	; (8000dd4 <UARTGetRxHead+0x120>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d053      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <UARTGetRxHead+0x124>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d04c      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <UARTGetRxHead+0x128>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d045      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <UARTGetRxHead+0x12c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d03e      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <UARTGetRxHead+0x130>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d037      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <UARTGetRxHead+0x134>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d030      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <UARTGetRxHead+0x138>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d029      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <UARTGetRxHead+0x13c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d022      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <UARTGetRxHead+0x140>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01b      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <UARTGetRxHead+0x144>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d014      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <UARTGetRxHead+0x148>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <UARTGetRxHead+0x14c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d006      	beq.n	8000da2 <UARTGetRxHead+0xee>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <UARTGetRxHead+0x150>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d105      	bne.n	8000dae <UARTGetRxHead+0xfa>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	e004      	b.n	8000db8 <UARTGetRxHead+0x104>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	1acb      	subs	r3, r1, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40020010 	.word	0x40020010
 8000dcc:	40020028 	.word	0x40020028
 8000dd0:	40020040 	.word	0x40020040
 8000dd4:	40020058 	.word	0x40020058
 8000dd8:	40020070 	.word	0x40020070
 8000ddc:	40020088 	.word	0x40020088
 8000de0:	400200a0 	.word	0x400200a0
 8000de4:	400200b8 	.word	0x400200b8
 8000de8:	40020410 	.word	0x40020410
 8000dec:	40020428 	.word	0x40020428
 8000df0:	40020440 	.word	0x40020440
 8000df4:	40020458 	.word	0x40020458
 8000df8:	40020470 	.word	0x40020470
 8000dfc:	40020488 	.word	0x40020488
 8000e00:	400204a0 	.word	0x400204a0
 8000e04:	400204b8 	.word	0x400204b8

08000e08 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	8a9b      	ldrh	r3, [r3, #20]
 8000e1a:	461c      	mov	r4, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff49 	bl	8000cb4 <UARTGetRxHead>
 8000e22:	4603      	mov	r3, r0
 8000e24:	429c      	cmp	r4, r3
 8000e26:	d013      	beq.n	8000e50 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	8a92      	ldrh	r2, [r2, #20]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	8a9b      	ldrh	r3, [r3, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	88d2      	ldrh	r2, [r2, #6]
 8000e40:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e44:	fb02 f201 	mul.w	r2, r2, r1
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e66:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000e68:	bf00      	nop
 8000e6a:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <main+0x124>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <main+0x24>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	60fa      	str	r2, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dcf4      	bgt.n	8000e6a <main+0xe>
		;
	if (timeout < 0) {
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da01      	bge.n	8000e8a <main+0x2e>
		Error_Handler();
 8000e86:	f000 faff 	bl	8001488 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f000 fec9 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f885 	bl	8000f9c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <main+0x124>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <main+0x124>)
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <main+0x124>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f004 fcc1 	bl	8005838 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f004 fcd7 	bl	800586c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000ec4:	bf00      	nop
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <main+0x124>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <main+0x80>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	60fa      	str	r2, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	dcf4      	bgt.n	8000ec6 <main+0x6a>
		;
	if (timeout < 0) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da01      	bge.n	8000ee6 <main+0x8a>
		Error_Handler();
 8000ee2:	f000 fad1 	bl	8001488 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fa2f 	bl	8001348 <MX_GPIO_Init>
  MX_ETH_Init();
 8000eea:	f000 f8db 	bl	80010a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000eee:	f000 f97d 	bl	80011ec <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000ef2:	f000 f9f9 	bl	80012e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ef6:	f000 f921 	bl	800113c <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efa:	f000 f9c3 	bl	8001284 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

	ST7735.hspi = &hspi1;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <main+0x128>)
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <main+0x12c>)
 8000f02:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <main+0x128>)
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <main+0x130>)
 8000f08:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <main+0x128>)
 8000f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f10:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <main+0x128>)
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <main+0x130>)
 8000f16:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <main+0x128>)
 8000f1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f1e:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <main+0x128>)
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <main+0x134>)
 8000f24:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <main+0x128>)
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <main+0x128>)
 8000f30:	f7ff fdb4 	bl	8000a9c <LCD_init>
	LCD_flush(&ST7735);
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <main+0x128>)
 8000f36:	f7ff fe6b 	bl	8000c10 <LCD_flush>
	UART2.huart = &huart3;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <main+0x138>)
 8000f3c:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <main+0x13c>)
 8000f3e:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <main+0x138>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <main+0x138>)
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <main+0x138>)
 8000f4e:	f7ff fe7b 	bl	8000c48 <UARTInit>
	UARTResetStart(&UART2);
 8000f52:	4810      	ldr	r0, [pc, #64]	; (8000f94 <main+0x138>)
 8000f54:	f7ff fe9d 	bl	8000c92 <UARTResetStart>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int16_t read = UARTReadChar(&UART2) ;
 8000f58:	480e      	ldr	r0, [pc, #56]	; (8000f94 <main+0x138>)
 8000f5a:	f7ff ff55 	bl	8000e08 <UARTReadChar>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	817b      	strh	r3, [r7, #10]
		if(read != -1)
 8000f62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6a:	d0f5      	beq.n	8000f58 <main+0xfc>
			{
				BMPDecoder(read, LCDBufferAddr());
 8000f6c:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000f70:	f7ff fe60 	bl	8000c34 <LCDBufferAddr>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff fbc3 	bl	8000704 <BMPDecoder>
	while (1) {
 8000f7e:	e7eb      	b.n	8000f58 <main+0xfc>
 8000f80:	58024400 	.word	0x58024400
 8000f84:	2400c184 	.word	0x2400c184
 8000f88:	2400c754 	.word	0x2400c754
 8000f8c:	58020c00 	.word	0x58020c00
 8000f90:	58021800 	.word	0x58021800
 8000f94:	2400c1a0 	.word	0x2400c1a0
 8000f98:	2400c244 	.word	0x2400c244

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09c      	sub	sp, #112	; 0x70
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	224c      	movs	r2, #76	; 0x4c
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00a f8be 	bl	800b12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00a f8b8 	bl	800b12c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	f004 fdb1 	bl	8005b24 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <SystemClock_Config+0xfc>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a33      	ldr	r2, [pc, #204]	; (8001098 <SystemClock_Config+0xfc>)
 8000fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <SystemClock_Config+0xfc>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <SystemClock_Config+0x100>)
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <SystemClock_Config+0x100>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <SystemClock_Config+0x100>)
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ff4:	bf00      	nop
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <SystemClock_Config+0xfc>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001002:	d1f8      	bne.n	8000ff6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <SystemClock_Config+0x104>)
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f023 0303 	bic.w	r3, r3, #3
 800100c:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <SystemClock_Config+0x104>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001018:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	2302      	movs	r3, #2
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800102a:	2378      	movs	r3, #120	; 0x78
 800102c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001032:	2306      	movs	r3, #6
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800103a:	230c      	movs	r3, #12
 800103c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800103e:	2300      	movs	r3, #0
 8001040:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fdd4 	bl	8005bf8 <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001056:	f000 fa17 	bl	8001488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	233f      	movs	r3, #63	; 0x3f
 800105c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2303      	movs	r3, #3
 8001060:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001066:	2308      	movs	r3, #8
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001076:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2104      	movs	r1, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f005 f9c9 	bl	8006418 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800108c:	f000 f9fc 	bl	8001488 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3770      	adds	r7, #112	; 0x70
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	58024800 	.word	0x58024800
 800109c:	58000400 	.word	0x58000400
 80010a0:	58024400 	.word	0x58024400

080010a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ETH_Init+0x80>)
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <MX_ETH_Init+0x84>)
 80010ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_ETH_Init+0x88>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_ETH_Init+0x88>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_ETH_Init+0x88>)
 80010bc:	22e1      	movs	r2, #225	; 0xe1
 80010be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_ETH_Init+0x88>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_ETH_Init+0x88>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_ETH_Init+0x88>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_ETH_Init+0x80>)
 80010d4:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_ETH_Init+0x88>)
 80010d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_ETH_Init+0x80>)
 80010da:	2201      	movs	r2, #1
 80010dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_ETH_Init+0x80>)
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MX_ETH_Init+0x8c>)
 80010e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_ETH_Init+0x80>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_ETH_Init+0x90>)
 80010e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_ETH_Init+0x80>)
 80010ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_ETH_Init+0x80>)
 80010f4:	f003 fdc0 	bl	8004c78 <HAL_ETH_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010fe:	f000 f9c3 	bl	8001488 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001102:	2234      	movs	r2, #52	; 0x34
 8001104:	2100      	movs	r1, #0
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_ETH_Init+0x94>)
 8001108:	f00a f810 	bl	800b12c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_ETH_Init+0x94>)
 800110e:	2221      	movs	r2, #33	; 0x21
 8001110:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_ETH_Init+0x94>)
 8001114:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001118:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_ETH_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2400c7dc 	.word	0x2400c7dc
 8001128:	40028000 	.word	0x40028000
 800112c:	2400c1b8 	.word	0x2400c1b8
 8001130:	240000e4 	.word	0x240000e4
 8001134:	24000084 	.word	0x24000084
 8001138:	2400c864 	.word	0x2400c864

0800113c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001142:	4a29      	ldr	r2, [pc, #164]	; (80011e8 <MX_SPI1_Init+0xac>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800114c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001150:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001154:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001158:	2207      	movs	r2, #7
 800115a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_SPI1_Init+0xa8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_SPI1_Init+0xa8>)
 800116a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800116e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001172:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_SPI1_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_SPI1_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_SPI1_Init+0xa8>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_SPI1_Init+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_SPI1_Init+0xa8>)
 80011d2:	f007 f80f 	bl	80081f4 <HAL_SPI_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80011dc:	f000 f954 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2400c754 	.word	0x2400c754
 80011e8:	40013000 	.word	0x40013000

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	; (8001280 <MX_USART3_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001236:	f007 ff80 	bl	800913a <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 f922 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001248:	f009 fbb6 	bl	800a9b8 <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f000 f919 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_USART3_UART_Init+0x90>)
 800125a:	f009 fbeb 	bl	800aa34 <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f000 f910 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_USART3_UART_Init+0x90>)
 800126a:	f009 fb6c 	bl	800a946 <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 f908 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400c244 	.word	0x2400c244
 8001280:	40004800 	.word	0x40004800

08001284 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800128c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001290:	2209      	movs	r2, #9
 8001292:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001296:	2202      	movs	r2, #2
 8001298:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012cc:	f004 fae2 	bl	8005894 <HAL_PCD_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012d6:	f000 f8d7 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2400c2d4 	.word	0x2400c2d4
 80012e4:	40080000 	.word	0x40080000

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_DMA_Init+0x5c>)
 80012f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_DMA_Init+0x5c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_DMA_Init+0x5c>)
 8001300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	200b      	movs	r0, #11
 8001312:	f000 fe36 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001316:	200b      	movs	r0, #11
 8001318:	f000 fe4d 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	200c      	movs	r0, #12
 8001322:	f000 fe2e 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001326:	200c      	movs	r0, #12
 8001328:	f000 fe45 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	200d      	movs	r0, #13
 8001332:	f000 fe26 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001336:	200d      	movs	r0, #13
 8001338:	f000 fe3d 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <MX_GPIO_Init+0x134>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a45      	ldr	r2, [pc, #276]	; (800147c <MX_GPIO_Init+0x134>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b43      	ldr	r3, [pc, #268]	; (800147c <MX_GPIO_Init+0x134>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <MX_GPIO_Init+0x134>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a3e      	ldr	r2, [pc, #248]	; (800147c <MX_GPIO_Init+0x134>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b3b      	ldr	r3, [pc, #236]	; (800147c <MX_GPIO_Init+0x134>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <MX_GPIO_Init+0x134>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a36      	ldr	r2, [pc, #216]	; (800147c <MX_GPIO_Init+0x134>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <MX_GPIO_Init+0x134>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <MX_GPIO_Init+0x134>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <MX_GPIO_Init+0x134>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <MX_GPIO_Init+0x134>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_GPIO_Init+0x134>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <MX_GPIO_Init+0x134>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_GPIO_Init+0x134>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_GPIO_Init+0x134>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <MX_GPIO_Init+0x134>)
 80013fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_GPIO_Init+0x134>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <MX_GPIO_Init+0x138>)
 800141a:	f004 f9f3 	bl	8005804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <MX_GPIO_Init+0x138>)
 8001426:	f004 f9ed 	bl	8005804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <MX_GPIO_Init+0x13c>)
 8001432:	f004 f9e7 	bl	8005804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001436:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_GPIO_Init+0x138>)
 8001450:	f004 f828 	bl	80054a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_GPIO_Init+0x13c>)
 800146e:	f004 f819 	bl	80054a4 <HAL_GPIO_Init>

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	58024400 	.word	0x58024400
 8001480:	58020c00 	.word	0x58020c00
 8001484:	58021800 	.word	0x58021800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x30>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x30>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x30>)
 80014ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58024400 	.word	0x58024400

080014c8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a59      	ldr	r2, [pc, #356]	; (800164c <HAL_ETH_MspInit+0x184>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	f040 80ab 	bne.w	8001642 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_ETH_MspInit+0x188>)
 80014ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014f2:	4a57      	ldr	r2, [pc, #348]	; (8001650 <HAL_ETH_MspInit+0x188>)
 80014f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014fc:	4b54      	ldr	r3, [pc, #336]	; (8001650 <HAL_ETH_MspInit+0x188>)
 80014fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800150c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800151a:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001528:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800152a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800152e:	4a48      	ldr	r2, [pc, #288]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800153a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	4a40      	ldr	r2, [pc, #256]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	4a39      	ldr	r2, [pc, #228]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_ETH_MspInit+0x188>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001592:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_ETH_MspInit+0x188>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_ETH_MspInit+0x188>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	4a2a      	ldr	r2, [pc, #168]	; (8001650 <HAL_ETH_MspInit+0x188>)
 80015a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_ETH_MspInit+0x188>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015be:	2332      	movs	r3, #50	; 0x32
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ce:	230b      	movs	r3, #11
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	481e      	ldr	r0, [pc, #120]	; (8001654 <HAL_ETH_MspInit+0x18c>)
 80015da:	f003 ff63 	bl	80054a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80015de:	2386      	movs	r3, #134	; 0x86
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ee:	230b      	movs	r3, #11
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4817      	ldr	r0, [pc, #92]	; (8001658 <HAL_ETH_MspInit+0x190>)
 80015fa:	f003 ff53 	bl	80054a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001610:	230b      	movs	r3, #11
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <HAL_ETH_MspInit+0x194>)
 800161c:	f003 ff42 	bl	80054a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001620:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001632:	230b      	movs	r3, #11
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <HAL_ETH_MspInit+0x198>)
 800163e:	f003 ff31 	bl	80054a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	; 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40028000 	.word	0x40028000
 8001650:	58024400 	.word	0x58024400
 8001654:	58020800 	.word	0x58020800
 8001658:	58020000 	.word	0x58020000
 800165c:	58020400 	.word	0x58020400
 8001660:	58021800 	.word	0x58021800

08001664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0ba      	sub	sp, #232	; 0xe8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	22bc      	movs	r2, #188	; 0xbc
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f009 fd51 	bl	800b12c <memset>
  if(hspi->Instance==SPI1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_SPI_MspInit+0x174>)
 8001690:	4293      	cmp	r3, r2
 8001692:	f040 809c 	bne.w	80017ce <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800169c:	2300      	movs	r3, #0
 800169e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fa43 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80016b0:	f7ff feea 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b4:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ba:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016c4:	4b45      	ldr	r3, [pc, #276]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a40      	ldr	r2, [pc, #256]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_SPI_MspInit+0x178>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_SPI_MspInit+0x178>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800170e:	2320      	movs	r3, #32
 8001710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001726:	2305      	movs	r3, #5
 8001728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001730:	4619      	mov	r1, r3
 8001732:	482b      	ldr	r0, [pc, #172]	; (80017e0 <HAL_SPI_MspInit+0x17c>)
 8001734:	f003 feb6 	bl	80054a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001738:	2320      	movs	r3, #32
 800173a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001750:	2305      	movs	r3, #5
 8001752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800175a:	4619      	mov	r1, r3
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <HAL_SPI_MspInit+0x180>)
 800175e:	f003 fea1 	bl	80054a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <HAL_SPI_MspInit+0x188>)
 8001766:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 800176a:	2226      	movs	r2, #38	; 0x26
 800176c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001780:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 8001790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001794:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017a2:	4811      	ldr	r0, [pc, #68]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 80017a4:	f000 fc22 	bl	8001fec <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80017ae:	f7ff fe6b 	bl	8001488 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 80017b6:	679a      	str	r2, [r3, #120]	; 0x78
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_SPI_MspInit+0x184>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2023      	movs	r0, #35	; 0x23
 80017c4:	f000 fbdd 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017c8:	2023      	movs	r0, #35	; 0x23
 80017ca:	f000 fbf4 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	37e8      	adds	r7, #232	; 0xe8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40013000 	.word	0x40013000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020000 	.word	0x58020000
 80017e4:	58020400 	.word	0x58020400
 80017e8:	2400c898 	.word	0x2400c898
 80017ec:	40020010 	.word	0x40020010

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0b8      	sub	sp, #224	; 0xe0
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	22bc      	movs	r2, #188	; 0xbc
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f009 fc8b 	bl	800b12c <memset>
  if(huart->Instance==USART3)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_UART_MspInit+0x188>)
 800181c:	4293      	cmp	r3, r2
 800181e:	f040 80a6 	bne.w	800196e <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4618      	mov	r0, r3
 8001832:	f005 f97d 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800183c:	f7ff fe24 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001840:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_UART_MspInit+0x18c>)
 8001842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001846:	4a4d      	ldr	r2, [pc, #308]	; (800197c <HAL_UART_MspInit+0x18c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001850:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_UART_MspInit+0x18c>)
 8001852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_UART_MspInit+0x18c>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_UART_MspInit+0x18c>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_UART_MspInit+0x18c>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800187c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001896:	2307      	movs	r3, #7
 8001898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018a0:	4619      	mov	r1, r3
 80018a2:	4837      	ldr	r0, [pc, #220]	; (8001980 <HAL_UART_MspInit+0x190>)
 80018a4:	f003 fdfe 	bl	80054a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80018a8:	4b36      	ldr	r3, [pc, #216]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018aa:	4a37      	ldr	r2, [pc, #220]	; (8001988 <HAL_UART_MspInit+0x198>)
 80018ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018b0:	222d      	movs	r2, #45	; 0x2d
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b4:	4b33      	ldr	r3, [pc, #204]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018da:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80018e8:	4826      	ldr	r0, [pc, #152]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018ea:	f000 fb7f 	bl	8001fec <HAL_DMA_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80018f4:	f7ff fdc8 	bl	8001488 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a22      	ldr	r2, [pc, #136]	; (8001984 <HAL_UART_MspInit+0x194>)
 80018fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80018fe:	4a21      	ldr	r2, [pc, #132]	; (8001984 <HAL_UART_MspInit+0x194>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_UART_MspInit+0x1a0>)
 8001908:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_UART_MspInit+0x19c>)
 800190c:	222e      	movs	r2, #46	; 0x2e
 800190e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001912:	2240      	movs	r2, #64	; 0x40
 8001914:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_UART_MspInit+0x19c>)
 800191e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001922:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_UART_MspInit+0x19c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_UART_MspInit+0x19c>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001942:	4812      	ldr	r0, [pc, #72]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001944:	f000 fb52 	bl	8001fec <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800194e:	f7ff fd9b 	bl	8001488 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_UART_MspInit+0x19c>)
 8001956:	679a      	str	r2, [r3, #120]	; 0x78
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_UART_MspInit+0x19c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2027      	movs	r0, #39	; 0x27
 8001964:	f000 fb0d 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001968:	2027      	movs	r0, #39	; 0x27
 800196a:	f000 fb24 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	37e0      	adds	r7, #224	; 0xe0
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004800 	.word	0x40004800
 800197c:	58024400 	.word	0x58024400
 8001980:	58020c00 	.word	0x58020c00
 8001984:	2400c1cc 	.word	0x2400c1cc
 8001988:	40020028 	.word	0x40020028
 800198c:	2400c6dc 	.word	0x2400c6dc
 8001990:	40020040 	.word	0x40020040

08001994 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0b8      	sub	sp, #224	; 0xe0
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	22bc      	movs	r2, #188	; 0xbc
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f009 fbb9 	bl	800b12c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <HAL_PCD_MspInit+0x108>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d166      	bne.n	8001a92 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80019ce:	2312      	movs	r3, #18
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80019d6:	2303      	movs	r3, #3
 80019d8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80019da:	2302      	movs	r3, #2
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80019de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80019e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019e8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80019ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 f89a 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001a02:	f7ff fd41 	bl	8001488 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001a06:	f004 f8e7 	bl	8005bd8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_PCD_MspInit+0x10c>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_PCD_MspInit+0x10c>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_PCD_MspInit+0x10c>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a28:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a42:	230a      	movs	r3, #10
 8001a44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <HAL_PCD_MspInit+0x110>)
 8001a50:	f003 fd28 	bl	80054a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <HAL_PCD_MspInit+0x110>)
 8001a70:	f003 fd18 	bl	80054a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_PCD_MspInit+0x10c>)
 8001a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_PCD_MspInit+0x10c>)
 8001a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_PCD_MspInit+0x10c>)
 8001a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	37e0      	adds	r7, #224	; 0xe0
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40080000 	.word	0x40080000
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020000 	.word	0x58020000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f906 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA1_Stream0_IRQHandler+0x10>)
 8001b02:	f001 fd9b 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2400c898 	.word	0x2400c898

08001b10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA1_Stream1_IRQHandler+0x10>)
 8001b16:	f001 fd91 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2400c1cc 	.word	0x2400c1cc

08001b24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <DMA1_Stream2_IRQHandler+0x10>)
 8001b2a:	f001 fd87 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2400c6dc 	.word	0x2400c6dc

08001b38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <SPI1_IRQHandler+0x10>)
 8001b3e:	f006 ff93 	bl	8008a68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2400c754 	.word	0x2400c754

08001b4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <USART3_IRQHandler+0x10>)
 8001b52:	f007 fb89 	bl	8009268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2400c244 	.word	0x2400c244

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f009 faa2 	bl	800b0d8 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	24080000 	.word	0x24080000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	2400c1c0 	.word	0x2400c1c0
 8001bc8:	2400c928 	.word	0x2400c928

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd0:	f7fe fcfe 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	; (8001c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f009 fa73 	bl	800b0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff f92d 	bl	8000e5c <main>
  bx  lr
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c0c:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001c10:	0800b2b4 	.word	0x0800b2b4
  ldr r2, =_sbss
 8001c14:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8001c18:	2400c924 	.word	0x2400c924

08001c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC3_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 f9a0 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c2c:	f004 fdaa 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_Init+0x68>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	4913      	ldr	r1, [pc, #76]	; (8001c8c <HAL_Init+0x6c>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_Init+0x68>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_Init+0x6c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_Init+0x70>)
 8001c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_Init+0x74>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f814 	bl	8001c98 <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e002      	b.n	8001c80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7a:	f7ff fc0b 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	0800b264 	.word	0x0800b264
 8001c90:	24000004 	.word	0x24000004
 8001c94:	24000000 	.word	0x24000000

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_InitTick+0x60>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e021      	b.n	8001cf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_InitTick+0x64>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_InitTick+0x60>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f985 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f94f 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x68>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2400001c 	.word	0x2400001c
 8001cfc:	24000000 	.word	0x24000000
 8001d00:	24000018 	.word	0x24000018

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2400001c 	.word	0x2400001c
 8001d28:	2400c910 	.word	0x2400c910

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	2400c910 	.word	0x2400c910

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2400001c 	.word	0x2400001c

08001d8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_GetREVID+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0c1b      	lsrs	r3, r3, #16
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	5c001000 	.word	0x5c001000

08001da4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	58000400 	.word	0x58000400

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <__NVIC_SetPriorityGrouping+0x40>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x40>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	05fa0000 	.word	0x05fa0000

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff40 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff90 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5f 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff33 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa4 	bl	8001f28 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff fe9a 	bl	8001d2c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e316      	b.n	8002632 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_DMA_Init+0x1b8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d04a      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_DMA_Init+0x1bc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d045      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_DMA_Init+0x1c0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d040      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a62      	ldr	r2, [pc, #392]	; (80021b0 <HAL_DMA_Init+0x1c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d03b      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a60      	ldr	r2, [pc, #384]	; (80021b4 <HAL_DMA_Init+0x1c8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d036      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5f      	ldr	r2, [pc, #380]	; (80021b8 <HAL_DMA_Init+0x1cc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d031      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_DMA_Init+0x1d0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02c      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_DMA_Init+0x1d4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d027      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_DMA_Init+0x1d8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d022      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a59      	ldr	r2, [pc, #356]	; (80021c8 <HAL_DMA_Init+0x1dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d01d      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_DMA_Init+0x1e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_DMA_Init+0x1e4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_DMA_Init+0x1e8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <HAL_DMA_Init+0x1ec>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_DMA_Init+0x1f0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_DMA_Init+0xb8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_DMA_Init+0x1f4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_DMA_Init+0xbc>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_DMA_Init+0xbe>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 813b 	beq.w	8002326 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <HAL_DMA_Init+0x1b8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d04a      	beq.n	8002160 <HAL_DMA_Init+0x174>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_DMA_Init+0x1bc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d045      	beq.n	8002160 <HAL_DMA_Init+0x174>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a34      	ldr	r2, [pc, #208]	; (80021ac <HAL_DMA_Init+0x1c0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d040      	beq.n	8002160 <HAL_DMA_Init+0x174>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <HAL_DMA_Init+0x1c4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d03b      	beq.n	8002160 <HAL_DMA_Init+0x174>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_DMA_Init+0x1c8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d036      	beq.n	8002160 <HAL_DMA_Init+0x174>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_DMA_Init+0x1cc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d031      	beq.n	8002160 <HAL_DMA_Init+0x174>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <HAL_DMA_Init+0x1d0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02c      	beq.n	8002160 <HAL_DMA_Init+0x174>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_DMA_Init+0x1d4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d027      	beq.n	8002160 <HAL_DMA_Init+0x174>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <HAL_DMA_Init+0x1d8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d022      	beq.n	8002160 <HAL_DMA_Init+0x174>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <HAL_DMA_Init+0x1dc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d01d      	beq.n	8002160 <HAL_DMA_Init+0x174>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_DMA_Init+0x1e0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d018      	beq.n	8002160 <HAL_DMA_Init+0x174>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_DMA_Init+0x1e4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_DMA_Init+0x174>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <HAL_DMA_Init+0x1e8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00e      	beq.n	8002160 <HAL_DMA_Init+0x174>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <HAL_DMA_Init+0x1ec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_DMA_Init+0x174>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_DMA_Init+0x1f0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_DMA_Init+0x174>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_DMA_Init+0x1f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <HAL_DMA_Init+0x186>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e007      	b.n	8002182 <HAL_DMA_Init+0x196>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002182:	e02f      	b.n	80021e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002184:	f7ff fdd2 	bl	8001d2c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d928      	bls.n	80021e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e246      	b.n	8002632 <HAL_DMA_Init+0x646>
 80021a4:	40020010 	.word	0x40020010
 80021a8:	40020028 	.word	0x40020028
 80021ac:	40020040 	.word	0x40020040
 80021b0:	40020058 	.word	0x40020058
 80021b4:	40020070 	.word	0x40020070
 80021b8:	40020088 	.word	0x40020088
 80021bc:	400200a0 	.word	0x400200a0
 80021c0:	400200b8 	.word	0x400200b8
 80021c4:	40020410 	.word	0x40020410
 80021c8:	40020428 	.word	0x40020428
 80021cc:	40020440 	.word	0x40020440
 80021d0:	40020458 	.word	0x40020458
 80021d4:	40020470 	.word	0x40020470
 80021d8:	40020488 	.word	0x40020488
 80021dc:	400204a0 	.word	0x400204a0
 80021e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1c8      	bne.n	8002184 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4b83      	ldr	r3, [pc, #524]	; (800240c <HAL_DMA_Init+0x420>)
 80021fe:	4013      	ands	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800220a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b04      	cmp	r3, #4
 8002236:	d107      	bne.n	8002248 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4313      	orrs	r3, r2
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002248:	4b71      	ldr	r3, [pc, #452]	; (8002410 <HAL_DMA_Init+0x424>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b71      	ldr	r3, [pc, #452]	; (8002414 <HAL_DMA_Init+0x428>)
 800224e:	4013      	ands	r3, r2
 8002250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002254:	d328      	bcc.n	80022a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b28      	cmp	r3, #40	; 0x28
 800225c:	d903      	bls.n	8002266 <HAL_DMA_Init+0x27a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b2e      	cmp	r3, #46	; 0x2e
 8002264:	d917      	bls.n	8002296 <HAL_DMA_Init+0x2aa>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b3e      	cmp	r3, #62	; 0x3e
 800226c:	d903      	bls.n	8002276 <HAL_DMA_Init+0x28a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b42      	cmp	r3, #66	; 0x42
 8002274:	d90f      	bls.n	8002296 <HAL_DMA_Init+0x2aa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b46      	cmp	r3, #70	; 0x46
 800227c:	d903      	bls.n	8002286 <HAL_DMA_Init+0x29a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b48      	cmp	r3, #72	; 0x48
 8002284:	d907      	bls.n	8002296 <HAL_DMA_Init+0x2aa>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b4e      	cmp	r3, #78	; 0x4e
 800228c:	d905      	bls.n	800229a <HAL_DMA_Init+0x2ae>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b52      	cmp	r3, #82	; 0x52
 8002294:	d801      	bhi.n	800229a <HAL_DMA_Init+0x2ae>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_DMA_Init+0x2b0>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f023 0307 	bic.w	r3, r3, #7
 80022be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d117      	bne.n	8002302 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f002 fb3d 	bl	8004964 <DMA_CheckFifoParam>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e197      	b.n	8002632 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f002 fa78 	bl	8004800 <DMA_CalcBaseAndBitshift>
 8002310:	4603      	mov	r3, r0
 8002312:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	223f      	movs	r2, #63	; 0x3f
 800231e:	409a      	lsls	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e0cd      	b.n	80024c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <HAL_DMA_Init+0x42c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d022      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a39      	ldr	r2, [pc, #228]	; (800241c <HAL_DMA_Init+0x430>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01d      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_DMA_Init+0x434>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d018      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a36      	ldr	r2, [pc, #216]	; (8002424 <HAL_DMA_Init+0x438>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a35      	ldr	r2, [pc, #212]	; (8002428 <HAL_DMA_Init+0x43c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00e      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a33      	ldr	r2, [pc, #204]	; (800242c <HAL_DMA_Init+0x440>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d009      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a32      	ldr	r2, [pc, #200]	; (8002430 <HAL_DMA_Init+0x444>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_DMA_Init+0x38a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_DMA_Init+0x448>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x38e>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_DMA_Init+0x390>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8097 	beq.w	80024b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a24      	ldr	r2, [pc, #144]	; (8002418 <HAL_DMA_Init+0x42c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d021      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a22      	ldr	r2, [pc, #136]	; (800241c <HAL_DMA_Init+0x430>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01c      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <HAL_DMA_Init+0x434>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d017      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <HAL_DMA_Init+0x438>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d012      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <HAL_DMA_Init+0x43c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00d      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1c      	ldr	r2, [pc, #112]	; (800242c <HAL_DMA_Init+0x440>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d008      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_DMA_Init+0x444>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_Init+0x3e4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_DMA_Init+0x448>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_DMA_Init+0x44c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d020      	beq.n	800243c <HAL_DMA_Init+0x450>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d102      	bne.n	8002408 <HAL_DMA_Init+0x41c>
 8002402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002406:	e01a      	b.n	800243e <HAL_DMA_Init+0x452>
 8002408:	2300      	movs	r3, #0
 800240a:	e018      	b.n	800243e <HAL_DMA_Init+0x452>
 800240c:	fe10803f 	.word	0xfe10803f
 8002410:	5c001000 	.word	0x5c001000
 8002414:	ffff0000 	.word	0xffff0000
 8002418:	58025408 	.word	0x58025408
 800241c:	5802541c 	.word	0x5802541c
 8002420:	58025430 	.word	0x58025430
 8002424:	58025444 	.word	0x58025444
 8002428:	58025458 	.word	0x58025458
 800242c:	5802546c 	.word	0x5802546c
 8002430:	58025480 	.word	0x58025480
 8002434:	58025494 	.word	0x58025494
 8002438:	fffe000f 	.word	0xfffe000f
 800243c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68d2      	ldr	r2, [r2, #12]
 8002442:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800244c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800245c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800246c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b6e      	ldr	r3, [pc, #440]	; (800263c <HAL_DMA_Init+0x650>)
 8002484:	4413      	add	r3, r2
 8002486:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_DMA_Init+0x654>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	009a      	lsls	r2, r3, #2
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f002 f9b3 	bl	8004800 <DMA_CalcBaseAndBitshift>
 800249a:	4603      	mov	r3, r0
 800249c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2201      	movs	r2, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	e008      	b.n	80024c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2240      	movs	r2, #64	; 0x40
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0b7      	b.n	8002632 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a5f      	ldr	r2, [pc, #380]	; (8002644 <HAL_DMA_Init+0x658>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d072      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5d      	ldr	r2, [pc, #372]	; (8002648 <HAL_DMA_Init+0x65c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d06d      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5c      	ldr	r2, [pc, #368]	; (800264c <HAL_DMA_Init+0x660>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d068      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5a      	ldr	r2, [pc, #360]	; (8002650 <HAL_DMA_Init+0x664>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d063      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a59      	ldr	r2, [pc, #356]	; (8002654 <HAL_DMA_Init+0x668>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_DMA_Init+0x66c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d059      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_DMA_Init+0x670>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d054      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a54      	ldr	r2, [pc, #336]	; (8002660 <HAL_DMA_Init+0x674>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04f      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a53      	ldr	r2, [pc, #332]	; (8002664 <HAL_DMA_Init+0x678>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a51      	ldr	r2, [pc, #324]	; (8002668 <HAL_DMA_Init+0x67c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a50      	ldr	r2, [pc, #320]	; (800266c <HAL_DMA_Init+0x680>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_DMA_Init+0x684>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_DMA_Init+0x688>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_DMA_Init+0x68c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a4a      	ldr	r2, [pc, #296]	; (800267c <HAL_DMA_Init+0x690>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_DMA_Init+0x694>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_DMA_Init+0x698>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a45      	ldr	r2, [pc, #276]	; (8002688 <HAL_DMA_Init+0x69c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a44      	ldr	r2, [pc, #272]	; (800268c <HAL_DMA_Init+0x6a0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <HAL_DMA_Init+0x6a4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a41      	ldr	r2, [pc, #260]	; (8002694 <HAL_DMA_Init+0x6a8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3f      	ldr	r2, [pc, #252]	; (8002698 <HAL_DMA_Init+0x6ac>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a3e      	ldr	r2, [pc, #248]	; (800269c <HAL_DMA_Init+0x6b0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Init+0x5c6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <HAL_DMA_Init+0x6b4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Init+0x5ca>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_Init+0x5cc>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d032      	beq.n	8002622 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f002 fa4d 	bl	8004a5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b80      	cmp	r3, #128	; 0x80
 80025c8:	d102      	bne.n	80025d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <HAL_DMA_Init+0x624>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d80c      	bhi.n	8002610 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f002 faca 	bl	8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e008      	b.n	8002622 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	a7fdabf8 	.word	0xa7fdabf8
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	40020010 	.word	0x40020010
 8002648:	40020028 	.word	0x40020028
 800264c:	40020040 	.word	0x40020040
 8002650:	40020058 	.word	0x40020058
 8002654:	40020070 	.word	0x40020070
 8002658:	40020088 	.word	0x40020088
 800265c:	400200a0 	.word	0x400200a0
 8002660:	400200b8 	.word	0x400200b8
 8002664:	40020410 	.word	0x40020410
 8002668:	40020428 	.word	0x40020428
 800266c:	40020440 	.word	0x40020440
 8002670:	40020458 	.word	0x40020458
 8002674:	40020470 	.word	0x40020470
 8002678:	40020488 	.word	0x40020488
 800267c:	400204a0 	.word	0x400204a0
 8002680:	400204b8 	.word	0x400204b8
 8002684:	58025408 	.word	0x58025408
 8002688:	5802541c 	.word	0x5802541c
 800268c:	58025430 	.word	0x58025430
 8002690:	58025444 	.word	0x58025444
 8002694:	58025458 	.word	0x58025458
 8002698:	5802546c 	.word	0x5802546c
 800269c:	58025480 	.word	0x58025480
 80026a0:	58025494 	.word	0x58025494

080026a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e226      	b.n	8002b0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Start_IT+0x2a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e21f      	b.n	8002b0e <HAL_DMA_Start_IT+0x46a>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 820a 	bne.w	8002af8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_DMA_Start_IT+0x1f4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_DMA_Start_IT+0x1f8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_DMA_Start_IT+0x1fc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_DMA_Start_IT+0x200>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_DMA_Start_IT+0x204>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_DMA_Start_IT+0x208>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_Start_IT+0x20c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <HAL_DMA_Start_IT+0x210>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <HAL_DMA_Start_IT+0x214>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_DMA_Start_IT+0x218>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a59      	ldr	r2, [pc, #356]	; (80028c0 <HAL_DMA_Start_IT+0x21c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_DMA_Start_IT+0x220>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <HAL_DMA_Start_IT+0x224>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a54      	ldr	r2, [pc, #336]	; (80028cc <HAL_DMA_Start_IT+0x228>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a53      	ldr	r2, [pc, #332]	; (80028d0 <HAL_DMA_Start_IT+0x22c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Start_IT+0xee>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_DMA_Start_IT+0x230>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d108      	bne.n	80027a4 <HAL_DMA_Start_IT+0x100>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <HAL_DMA_Start_IT+0x110>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f001 fe74 	bl	80044a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a34      	ldr	r2, [pc, #208]	; (8002898 <HAL_DMA_Start_IT+0x1f4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_DMA_Start_IT+0x1f8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <HAL_DMA_Start_IT+0x1fc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_DMA_Start_IT+0x200>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <HAL_DMA_Start_IT+0x204>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <HAL_DMA_Start_IT+0x208>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_DMA_Start_IT+0x20c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_DMA_Start_IT+0x210>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_DMA_Start_IT+0x214>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_DMA_Start_IT+0x218>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <HAL_DMA_Start_IT+0x21c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_DMA_Start_IT+0x220>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <HAL_DMA_Start_IT+0x224>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_DMA_Start_IT+0x228>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_DMA_Start_IT+0x22c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Start_IT+0x1bc>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_DMA_Start_IT+0x230>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Start_IT+0x1c0>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_DMA_Start_IT+0x1c2>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 021e 	bic.w	r2, r3, #30
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0216 	orr.w	r2, r2, #22
 800287c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d03e      	beq.n	8002904 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0208 	orr.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e035      	b.n	8002904 <HAL_DMA_Start_IT+0x260>
 8002898:	40020010 	.word	0x40020010
 800289c:	40020028 	.word	0x40020028
 80028a0:	40020040 	.word	0x40020040
 80028a4:	40020058 	.word	0x40020058
 80028a8:	40020070 	.word	0x40020070
 80028ac:	40020088 	.word	0x40020088
 80028b0:	400200a0 	.word	0x400200a0
 80028b4:	400200b8 	.word	0x400200b8
 80028b8:	40020410 	.word	0x40020410
 80028bc:	40020428 	.word	0x40020428
 80028c0:	40020440 	.word	0x40020440
 80028c4:	40020458 	.word	0x40020458
 80028c8:	40020470 	.word	0x40020470
 80028cc:	40020488 	.word	0x40020488
 80028d0:	400204a0 	.word	0x400204a0
 80028d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 020e 	bic.w	r2, r3, #14
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 020a 	orr.w	r2, r2, #10
 80028ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0204 	orr.w	r2, r2, #4
 8002902:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a83      	ldr	r2, [pc, #524]	; (8002b18 <HAL_DMA_Start_IT+0x474>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d072      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a82      	ldr	r2, [pc, #520]	; (8002b1c <HAL_DMA_Start_IT+0x478>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d06d      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a80      	ldr	r2, [pc, #512]	; (8002b20 <HAL_DMA_Start_IT+0x47c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d068      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7f      	ldr	r2, [pc, #508]	; (8002b24 <HAL_DMA_Start_IT+0x480>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d063      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7d      	ldr	r2, [pc, #500]	; (8002b28 <HAL_DMA_Start_IT+0x484>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d05e      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7c      	ldr	r2, [pc, #496]	; (8002b2c <HAL_DMA_Start_IT+0x488>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d059      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_DMA_Start_IT+0x48c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d054      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <HAL_DMA_Start_IT+0x490>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04f      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a77      	ldr	r2, [pc, #476]	; (8002b38 <HAL_DMA_Start_IT+0x494>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d04a      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a76      	ldr	r2, [pc, #472]	; (8002b3c <HAL_DMA_Start_IT+0x498>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d045      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a74      	ldr	r2, [pc, #464]	; (8002b40 <HAL_DMA_Start_IT+0x49c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d040      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a73      	ldr	r2, [pc, #460]	; (8002b44 <HAL_DMA_Start_IT+0x4a0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d03b      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a71      	ldr	r2, [pc, #452]	; (8002b48 <HAL_DMA_Start_IT+0x4a4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d036      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a70      	ldr	r2, [pc, #448]	; (8002b4c <HAL_DMA_Start_IT+0x4a8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d031      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_DMA_Start_IT+0x4ac>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02c      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6d      	ldr	r2, [pc, #436]	; (8002b54 <HAL_DMA_Start_IT+0x4b0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d027      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6b      	ldr	r2, [pc, #428]	; (8002b58 <HAL_DMA_Start_IT+0x4b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d022      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_DMA_Start_IT+0x4b8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01d      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a68      	ldr	r2, [pc, #416]	; (8002b60 <HAL_DMA_Start_IT+0x4bc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a67      	ldr	r2, [pc, #412]	; (8002b64 <HAL_DMA_Start_IT+0x4c0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_DMA_Start_IT+0x4c4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a64      	ldr	r2, [pc, #400]	; (8002b6c <HAL_DMA_Start_IT+0x4c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a62      	ldr	r2, [pc, #392]	; (8002b70 <HAL_DMA_Start_IT+0x4cc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_DMA_Start_IT+0x350>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <HAL_DMA_Start_IT+0x4d0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_DMA_Start_IT+0x354>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_DMA_Start_IT+0x356>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01a      	beq.n	8002a34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <HAL_DMA_Start_IT+0x474>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d04a      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a36      	ldr	r2, [pc, #216]	; (8002b1c <HAL_DMA_Start_IT+0x478>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d045      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_DMA_Start_IT+0x47c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d040      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <HAL_DMA_Start_IT+0x480>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d03b      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_DMA_Start_IT+0x484>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d036      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <HAL_DMA_Start_IT+0x488>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <HAL_DMA_Start_IT+0x48c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02c      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <HAL_DMA_Start_IT+0x490>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d027      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_DMA_Start_IT+0x494>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d022      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_DMA_Start_IT+0x498>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_DMA_Start_IT+0x49c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_DMA_Start_IT+0x4a0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <HAL_DMA_Start_IT+0x4a4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_DMA_Start_IT+0x4a8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_DMA_Start_IT+0x4ac>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x430>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_DMA_Start_IT+0x4b0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_DMA_Start_IT+0x442>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e012      	b.n	8002b0c <HAL_DMA_Start_IT+0x468>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e009      	b.n	8002b0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40020010 	.word	0x40020010
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	40020040 	.word	0x40020040
 8002b24:	40020058 	.word	0x40020058
 8002b28:	40020070 	.word	0x40020070
 8002b2c:	40020088 	.word	0x40020088
 8002b30:	400200a0 	.word	0x400200a0
 8002b34:	400200b8 	.word	0x400200b8
 8002b38:	40020410 	.word	0x40020410
 8002b3c:	40020428 	.word	0x40020428
 8002b40:	40020440 	.word	0x40020440
 8002b44:	40020458 	.word	0x40020458
 8002b48:	40020470 	.word	0x40020470
 8002b4c:	40020488 	.word	0x40020488
 8002b50:	400204a0 	.word	0x400204a0
 8002b54:	400204b8 	.word	0x400204b8
 8002b58:	58025408 	.word	0x58025408
 8002b5c:	5802541c 	.word	0x5802541c
 8002b60:	58025430 	.word	0x58025430
 8002b64:	58025444 	.word	0x58025444
 8002b68:	58025458 	.word	0x58025458
 8002b6c:	5802546c 	.word	0x5802546c
 8002b70:	58025480 	.word	0x58025480
 8002b74:	58025494 	.word	0x58025494

08002b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff f8d4 	bl	8001d2c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e2dc      	b.n	800314a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d008      	beq.n	8002bae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e2cd      	b.n	800314a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a76      	ldr	r2, [pc, #472]	; (8002d8c <HAL_DMA_Abort+0x214>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04a      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <HAL_DMA_Abort+0x218>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d045      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a73      	ldr	r2, [pc, #460]	; (8002d94 <HAL_DMA_Abort+0x21c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a71      	ldr	r2, [pc, #452]	; (8002d98 <HAL_DMA_Abort+0x220>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d03b      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a70      	ldr	r2, [pc, #448]	; (8002d9c <HAL_DMA_Abort+0x224>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d036      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_DMA_Abort+0x228>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d031      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6d      	ldr	r2, [pc, #436]	; (8002da4 <HAL_DMA_Abort+0x22c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d02c      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6b      	ldr	r2, [pc, #428]	; (8002da8 <HAL_DMA_Abort+0x230>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d027      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_DMA_Abort+0x234>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <HAL_DMA_Abort+0x238>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01d      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <HAL_DMA_Abort+0x23c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d018      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <HAL_DMA_Abort+0x240>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a64      	ldr	r2, [pc, #400]	; (8002dbc <HAL_DMA_Abort+0x244>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a62      	ldr	r2, [pc, #392]	; (8002dc0 <HAL_DMA_Abort+0x248>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a61      	ldr	r2, [pc, #388]	; (8002dc4 <HAL_DMA_Abort+0x24c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_Abort+0xd6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5f      	ldr	r2, [pc, #380]	; (8002dc8 <HAL_DMA_Abort+0x250>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_DMA_Abort+0xda>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_Abort+0xdc>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 021e 	bic.w	r2, r2, #30
 8002c66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e00a      	b.n	8002c96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 020e 	bic.w	r2, r2, #14
 8002c8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3c      	ldr	r2, [pc, #240]	; (8002d8c <HAL_DMA_Abort+0x214>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d072      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <HAL_DMA_Abort+0x218>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d06d      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a39      	ldr	r2, [pc, #228]	; (8002d94 <HAL_DMA_Abort+0x21c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d068      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <HAL_DMA_Abort+0x220>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d063      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_DMA_Abort+0x224>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d05e      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <HAL_DMA_Abort+0x228>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d059      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_DMA_Abort+0x22c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d054      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a31      	ldr	r2, [pc, #196]	; (8002da8 <HAL_DMA_Abort+0x230>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d04f      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a30      	ldr	r2, [pc, #192]	; (8002dac <HAL_DMA_Abort+0x234>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04a      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2e      	ldr	r2, [pc, #184]	; (8002db0 <HAL_DMA_Abort+0x238>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d045      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2d      	ldr	r2, [pc, #180]	; (8002db4 <HAL_DMA_Abort+0x23c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d040      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <HAL_DMA_Abort+0x240>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d03b      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <HAL_DMA_Abort+0x244>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d036      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <HAL_DMA_Abort+0x248>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_DMA_Abort+0x24c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d02c      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <HAL_DMA_Abort+0x250>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d027      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <HAL_DMA_Abort+0x254>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <HAL_DMA_Abort+0x258>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01d      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <HAL_DMA_Abort+0x25c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <HAL_DMA_Abort+0x260>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_DMA_Abort+0x264>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_DMA_Abort+0x268>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_DMA_Abort+0x26c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_DMA_Abort+0x20e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_DMA_Abort+0x270>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d132      	bne.n	8002dec <HAL_DMA_Abort+0x274>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e031      	b.n	8002dee <HAL_DMA_Abort+0x276>
 8002d8a:	bf00      	nop
 8002d8c:	40020010 	.word	0x40020010
 8002d90:	40020028 	.word	0x40020028
 8002d94:	40020040 	.word	0x40020040
 8002d98:	40020058 	.word	0x40020058
 8002d9c:	40020070 	.word	0x40020070
 8002da0:	40020088 	.word	0x40020088
 8002da4:	400200a0 	.word	0x400200a0
 8002da8:	400200b8 	.word	0x400200b8
 8002dac:	40020410 	.word	0x40020410
 8002db0:	40020428 	.word	0x40020428
 8002db4:	40020440 	.word	0x40020440
 8002db8:	40020458 	.word	0x40020458
 8002dbc:	40020470 	.word	0x40020470
 8002dc0:	40020488 	.word	0x40020488
 8002dc4:	400204a0 	.word	0x400204a0
 8002dc8:	400204b8 	.word	0x400204b8
 8002dcc:	58025408 	.word	0x58025408
 8002dd0:	5802541c 	.word	0x5802541c
 8002dd4:	58025430 	.word	0x58025430
 8002dd8:	58025444 	.word	0x58025444
 8002ddc:	58025458 	.word	0x58025458
 8002de0:	5802546c 	.word	0x5802546c
 8002de4:	58025480 	.word	0x58025480
 8002de8:	58025494 	.word	0x58025494
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6d      	ldr	r2, [pc, #436]	; (8002fbc <HAL_DMA_Abort+0x444>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6b      	ldr	r2, [pc, #428]	; (8002fc0 <HAL_DMA_Abort+0x448>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_DMA_Abort+0x44c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a68      	ldr	r2, [pc, #416]	; (8002fc8 <HAL_DMA_Abort+0x450>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a67      	ldr	r2, [pc, #412]	; (8002fcc <HAL_DMA_Abort+0x454>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_DMA_Abort+0x458>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a64      	ldr	r2, [pc, #400]	; (8002fd4 <HAL_DMA_Abort+0x45c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a62      	ldr	r2, [pc, #392]	; (8002fd8 <HAL_DMA_Abort+0x460>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <HAL_DMA_Abort+0x464>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5f      	ldr	r2, [pc, #380]	; (8002fe0 <HAL_DMA_Abort+0x468>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_DMA_Abort+0x46c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_DMA_Abort+0x470>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_DMA_Abort+0x474>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a59      	ldr	r2, [pc, #356]	; (8002ff0 <HAL_DMA_Abort+0x478>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_DMA_Abort+0x47c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Abort+0x32a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a56      	ldr	r2, [pc, #344]	; (8002ff8 <HAL_DMA_Abort+0x480>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <HAL_DMA_Abort+0x33c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e007      	b.n	8002ec4 <HAL_DMA_Abort+0x34c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ec4:	e013      	b.n	8002eee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec6:	f7fe ff31 	bl	8001d2c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d90c      	bls.n	8002eee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e12d      	b.n	800314a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e5      	bne.n	8002ec6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <HAL_DMA_Abort+0x444>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04a      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_DMA_Abort+0x448>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d045      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <HAL_DMA_Abort+0x44c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d040      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_DMA_Abort+0x450>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d03b      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_DMA_Abort+0x454>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d036      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_DMA_Abort+0x458>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d031      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_DMA_Abort+0x45c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d02c      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_DMA_Abort+0x460>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d027      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <HAL_DMA_Abort+0x464>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_DMA_Abort+0x468>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <HAL_DMA_Abort+0x46c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d018      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_DMA_Abort+0x470>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <HAL_DMA_Abort+0x474>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00e      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_DMA_Abort+0x478>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d009      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_DMA_Abort+0x47c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_Abort+0x422>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_DMA_Abort+0x480>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA_Abort+0x426>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_DMA_Abort+0x428>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02b      	beq.n	8002ffc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	223f      	movs	r2, #63	; 0x3f
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	e02a      	b.n	8003012 <HAL_DMA_Abort+0x49a>
 8002fbc:	40020010 	.word	0x40020010
 8002fc0:	40020028 	.word	0x40020028
 8002fc4:	40020040 	.word	0x40020040
 8002fc8:	40020058 	.word	0x40020058
 8002fcc:	40020070 	.word	0x40020070
 8002fd0:	40020088 	.word	0x40020088
 8002fd4:	400200a0 	.word	0x400200a0
 8002fd8:	400200b8 	.word	0x400200b8
 8002fdc:	40020410 	.word	0x40020410
 8002fe0:	40020428 	.word	0x40020428
 8002fe4:	40020440 	.word	0x40020440
 8002fe8:	40020458 	.word	0x40020458
 8002fec:	40020470 	.word	0x40020470
 8002ff0:	40020488 	.word	0x40020488
 8002ff4:	400204a0 	.word	0x400204a0
 8002ff8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a4f      	ldr	r2, [pc, #316]	; (8003154 <HAL_DMA_Abort+0x5dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d072      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a4d      	ldr	r2, [pc, #308]	; (8003158 <HAL_DMA_Abort+0x5e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d06d      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a4c      	ldr	r2, [pc, #304]	; (800315c <HAL_DMA_Abort+0x5e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d068      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <HAL_DMA_Abort+0x5e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d063      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a49      	ldr	r2, [pc, #292]	; (8003164 <HAL_DMA_Abort+0x5ec>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d05e      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a47      	ldr	r2, [pc, #284]	; (8003168 <HAL_DMA_Abort+0x5f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d059      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a46      	ldr	r2, [pc, #280]	; (800316c <HAL_DMA_Abort+0x5f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d054      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_DMA_Abort+0x5f8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d04f      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a43      	ldr	r2, [pc, #268]	; (8003174 <HAL_DMA_Abort+0x5fc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d04a      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a41      	ldr	r2, [pc, #260]	; (8003178 <HAL_DMA_Abort+0x600>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d045      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a40      	ldr	r2, [pc, #256]	; (800317c <HAL_DMA_Abort+0x604>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d040      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a3e      	ldr	r2, [pc, #248]	; (8003180 <HAL_DMA_Abort+0x608>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d03b      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3d      	ldr	r2, [pc, #244]	; (8003184 <HAL_DMA_Abort+0x60c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d036      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3b      	ldr	r2, [pc, #236]	; (8003188 <HAL_DMA_Abort+0x610>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d031      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_DMA_Abort+0x614>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d02c      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_DMA_Abort+0x618>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d027      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a37      	ldr	r2, [pc, #220]	; (8003194 <HAL_DMA_Abort+0x61c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a35      	ldr	r2, [pc, #212]	; (8003198 <HAL_DMA_Abort+0x620>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01d      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_DMA_Abort+0x624>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d018      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <HAL_DMA_Abort+0x628>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_DMA_Abort+0x62c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <HAL_DMA_Abort+0x630>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_DMA_Abort+0x634>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_DMA_Abort+0x58a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <HAL_DMA_Abort+0x638>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_DMA_Abort+0x58e>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_DMA_Abort+0x590>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003114:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003136:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40020010 	.word	0x40020010
 8003158:	40020028 	.word	0x40020028
 800315c:	40020040 	.word	0x40020040
 8003160:	40020058 	.word	0x40020058
 8003164:	40020070 	.word	0x40020070
 8003168:	40020088 	.word	0x40020088
 800316c:	400200a0 	.word	0x400200a0
 8003170:	400200b8 	.word	0x400200b8
 8003174:	40020410 	.word	0x40020410
 8003178:	40020428 	.word	0x40020428
 800317c:	40020440 	.word	0x40020440
 8003180:	40020458 	.word	0x40020458
 8003184:	40020470 	.word	0x40020470
 8003188:	40020488 	.word	0x40020488
 800318c:	400204a0 	.word	0x400204a0
 8003190:	400204b8 	.word	0x400204b8
 8003194:	58025408 	.word	0x58025408
 8003198:	5802541c 	.word	0x5802541c
 800319c:	58025430 	.word	0x58025430
 80031a0:	58025444 	.word	0x58025444
 80031a4:	58025458 	.word	0x58025458
 80031a8:	5802546c 	.word	0x5802546c
 80031ac:	58025480 	.word	0x58025480
 80031b0:	58025494 	.word	0x58025494

080031b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e205      	b.n	80035d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d004      	beq.n	80031dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e1fa      	b.n	80035d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a8c      	ldr	r2, [pc, #560]	; (8003414 <HAL_DMA_Abort_IT+0x260>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d04a      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a8b      	ldr	r2, [pc, #556]	; (8003418 <HAL_DMA_Abort_IT+0x264>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d045      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a89      	ldr	r2, [pc, #548]	; (800341c <HAL_DMA_Abort_IT+0x268>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d040      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a88      	ldr	r2, [pc, #544]	; (8003420 <HAL_DMA_Abort_IT+0x26c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d03b      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a86      	ldr	r2, [pc, #536]	; (8003424 <HAL_DMA_Abort_IT+0x270>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d036      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a85      	ldr	r2, [pc, #532]	; (8003428 <HAL_DMA_Abort_IT+0x274>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d031      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a83      	ldr	r2, [pc, #524]	; (800342c <HAL_DMA_Abort_IT+0x278>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02c      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a82      	ldr	r2, [pc, #520]	; (8003430 <HAL_DMA_Abort_IT+0x27c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d027      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_DMA_Abort_IT+0x280>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7f      	ldr	r2, [pc, #508]	; (8003438 <HAL_DMA_Abort_IT+0x284>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d01d      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a7d      	ldr	r2, [pc, #500]	; (800343c <HAL_DMA_Abort_IT+0x288>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d018      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7c      	ldr	r2, [pc, #496]	; (8003440 <HAL_DMA_Abort_IT+0x28c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a7a      	ldr	r2, [pc, #488]	; (8003444 <HAL_DMA_Abort_IT+0x290>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a79      	ldr	r2, [pc, #484]	; (8003448 <HAL_DMA_Abort_IT+0x294>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a77      	ldr	r2, [pc, #476]	; (800344c <HAL_DMA_Abort_IT+0x298>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_DMA_Abort_IT+0xc8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a76      	ldr	r2, [pc, #472]	; (8003450 <HAL_DMA_Abort_IT+0x29c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_DMA_Abort_IT+0xcc>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_DMA_Abort_IT+0xce>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d065      	beq.n	8003352 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2204      	movs	r2, #4
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a60      	ldr	r2, [pc, #384]	; (8003414 <HAL_DMA_Abort_IT+0x260>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d04a      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_DMA_Abort_IT+0x264>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d045      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_DMA_Abort_IT+0x268>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d040      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HAL_DMA_Abort_IT+0x26c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d03b      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_DMA_Abort_IT+0x270>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d036      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a58      	ldr	r2, [pc, #352]	; (8003428 <HAL_DMA_Abort_IT+0x274>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d031      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_DMA_Abort_IT+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d02c      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a55      	ldr	r2, [pc, #340]	; (8003430 <HAL_DMA_Abort_IT+0x27c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d027      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a54      	ldr	r2, [pc, #336]	; (8003434 <HAL_DMA_Abort_IT+0x280>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d022      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_DMA_Abort_IT+0x284>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01d      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_DMA_Abort_IT+0x288>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4f      	ldr	r2, [pc, #316]	; (8003440 <HAL_DMA_Abort_IT+0x28c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_DMA_Abort_IT+0x290>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_DMA_Abort_IT+0x294>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_DMA_Abort_IT+0x298>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_DMA_Abort_IT+0x17a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HAL_DMA_Abort_IT+0x29c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <HAL_DMA_Abort_IT+0x18c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e147      	b.n	80035d0 <HAL_DMA_Abort_IT+0x41c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e13e      	b.n	80035d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 020e 	bic.w	r2, r2, #14
 8003360:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <HAL_DMA_Abort_IT+0x260>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_DMA_Abort_IT+0x264>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a28      	ldr	r2, [pc, #160]	; (800341c <HAL_DMA_Abort_IT+0x268>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a26      	ldr	r2, [pc, #152]	; (8003420 <HAL_DMA_Abort_IT+0x26c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a25      	ldr	r2, [pc, #148]	; (8003424 <HAL_DMA_Abort_IT+0x270>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_DMA_Abort_IT+0x274>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_DMA_Abort_IT+0x278>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a20      	ldr	r2, [pc, #128]	; (8003430 <HAL_DMA_Abort_IT+0x27c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_DMA_Abort_IT+0x280>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_DMA_Abort_IT+0x284>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_DMA_Abort_IT+0x288>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_DMA_Abort_IT+0x28c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a19      	ldr	r2, [pc, #100]	; (8003444 <HAL_DMA_Abort_IT+0x290>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_DMA_Abort_IT+0x294>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <HAL_DMA_Abort_IT+0x298>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_Abort_IT+0x24e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_DMA_Abort_IT+0x29c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d128      	bne.n	8003454 <HAL_DMA_Abort_IT+0x2a0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e027      	b.n	8003464 <HAL_DMA_Abort_IT+0x2b0>
 8003414:	40020010 	.word	0x40020010
 8003418:	40020028 	.word	0x40020028
 800341c:	40020040 	.word	0x40020040
 8003420:	40020058 	.word	0x40020058
 8003424:	40020070 	.word	0x40020070
 8003428:	40020088 	.word	0x40020088
 800342c:	400200a0 	.word	0x400200a0
 8003430:	400200b8 	.word	0x400200b8
 8003434:	40020410 	.word	0x40020410
 8003438:	40020428 	.word	0x40020428
 800343c:	40020440 	.word	0x40020440
 8003440:	40020458 	.word	0x40020458
 8003444:	40020470 	.word	0x40020470
 8003448:	40020488 	.word	0x40020488
 800344c:	400204a0 	.word	0x400204a0
 8003450:	400204b8 	.word	0x400204b8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a5c      	ldr	r2, [pc, #368]	; (80035dc <HAL_DMA_Abort_IT+0x428>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d072      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5b      	ldr	r2, [pc, #364]	; (80035e0 <HAL_DMA_Abort_IT+0x42c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d06d      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a59      	ldr	r2, [pc, #356]	; (80035e4 <HAL_DMA_Abort_IT+0x430>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d068      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_DMA_Abort_IT+0x434>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d063      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a56      	ldr	r2, [pc, #344]	; (80035ec <HAL_DMA_Abort_IT+0x438>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d05e      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a55      	ldr	r2, [pc, #340]	; (80035f0 <HAL_DMA_Abort_IT+0x43c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d059      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a53      	ldr	r2, [pc, #332]	; (80035f4 <HAL_DMA_Abort_IT+0x440>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d054      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_DMA_Abort_IT+0x444>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04f      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a50      	ldr	r2, [pc, #320]	; (80035fc <HAL_DMA_Abort_IT+0x448>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d04a      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <HAL_DMA_Abort_IT+0x44c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d045      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_DMA_Abort_IT+0x450>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d040      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_DMA_Abort_IT+0x454>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d03b      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_DMA_Abort_IT+0x458>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d036      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a49      	ldr	r2, [pc, #292]	; (8003610 <HAL_DMA_Abort_IT+0x45c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a47      	ldr	r2, [pc, #284]	; (8003614 <HAL_DMA_Abort_IT+0x460>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02c      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a46      	ldr	r2, [pc, #280]	; (8003618 <HAL_DMA_Abort_IT+0x464>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d027      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a44      	ldr	r2, [pc, #272]	; (800361c <HAL_DMA_Abort_IT+0x468>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a43      	ldr	r2, [pc, #268]	; (8003620 <HAL_DMA_Abort_IT+0x46c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01d      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a41      	ldr	r2, [pc, #260]	; (8003624 <HAL_DMA_Abort_IT+0x470>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a40      	ldr	r2, [pc, #256]	; (8003628 <HAL_DMA_Abort_IT+0x474>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a3e      	ldr	r2, [pc, #248]	; (800362c <HAL_DMA_Abort_IT+0x478>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3d      	ldr	r2, [pc, #244]	; (8003630 <HAL_DMA_Abort_IT+0x47c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_DMA_Abort_IT+0x480>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_DMA_Abort_IT+0x3a0>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_DMA_Abort_IT+0x484>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Abort_IT+0x3a4>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_DMA_Abort_IT+0x3a6>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800358c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40020010 	.word	0x40020010
 80035e0:	40020028 	.word	0x40020028
 80035e4:	40020040 	.word	0x40020040
 80035e8:	40020058 	.word	0x40020058
 80035ec:	40020070 	.word	0x40020070
 80035f0:	40020088 	.word	0x40020088
 80035f4:	400200a0 	.word	0x400200a0
 80035f8:	400200b8 	.word	0x400200b8
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020428 	.word	0x40020428
 8003604:	40020440 	.word	0x40020440
 8003608:	40020458 	.word	0x40020458
 800360c:	40020470 	.word	0x40020470
 8003610:	40020488 	.word	0x40020488
 8003614:	400204a0 	.word	0x400204a0
 8003618:	400204b8 	.word	0x400204b8
 800361c:	58025408 	.word	0x58025408
 8003620:	5802541c 	.word	0x5802541c
 8003624:	58025430 	.word	0x58025430
 8003628:	58025444 	.word	0x58025444
 800362c:	58025458 	.word	0x58025458
 8003630:	5802546c 	.word	0x5802546c
 8003634:	58025480 	.word	0x58025480
 8003638:	58025494 	.word	0x58025494

0800363c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003648:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_DMA_IRQHandler+0x1ac>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a67      	ldr	r2, [pc, #412]	; (80037ec <HAL_DMA_IRQHandler+0x1b0>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d04a      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_DMA_IRQHandler+0x1b8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d045      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_DMA_IRQHandler+0x1bc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d040      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <HAL_DMA_IRQHandler+0x1c0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d03b      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_DMA_IRQHandler+0x1c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d036      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a57      	ldr	r2, [pc, #348]	; (8003804 <HAL_DMA_IRQHandler+0x1c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d031      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_DMA_IRQHandler+0x1cc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d02c      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a54      	ldr	r2, [pc, #336]	; (800380c <HAL_DMA_IRQHandler+0x1d0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d027      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_DMA_IRQHandler+0x1d4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_DMA_IRQHandler+0x1d8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01d      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_DMA_IRQHandler+0x1dc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4e      	ldr	r2, [pc, #312]	; (800381c <HAL_DMA_IRQHandler+0x1e0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <HAL_DMA_IRQHandler+0x1e4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_DMA_IRQHandler+0x1e8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_DMA_IRQHandler+0x1ec>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_DMA_IRQHandler+0xd2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a48      	ldr	r2, [pc, #288]	; (800382c <HAL_DMA_IRQHandler+0x1f0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_DMA_IRQHandler+0xd6>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_DMA_IRQHandler+0xd8>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 842b 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2208      	movs	r2, #8
 8003724:	409a      	lsls	r2, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a2 	beq.w	8003874 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04a      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <HAL_DMA_IRQHandler+0x1b8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d045      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_DMA_IRQHandler+0x1bc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d040      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_DMA_IRQHandler+0x1c0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d03b      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_DMA_IRQHandler+0x1c4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d036      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a27      	ldr	r2, [pc, #156]	; (8003804 <HAL_DMA_IRQHandler+0x1c8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_DMA_IRQHandler+0x1cc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02c      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a24      	ldr	r2, [pc, #144]	; (800380c <HAL_DMA_IRQHandler+0x1d0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d027      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_DMA_IRQHandler+0x1d4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_DMA_IRQHandler+0x1d8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01d      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_DMA_IRQHandler+0x1dc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_DMA_IRQHandler+0x1e0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_DMA_IRQHandler+0x1e4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_DMA_IRQHandler+0x1e8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_DMA_IRQHandler+0x1ec>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x194>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_DMA_IRQHandler+0x1f0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d12f      	bne.n	8003830 <HAL_DMA_IRQHandler+0x1f4>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e02e      	b.n	8003844 <HAL_DMA_IRQHandler+0x208>
 80037e6:	bf00      	nop
 80037e8:	24000000 	.word	0x24000000
 80037ec:	1b4e81b5 	.word	0x1b4e81b5
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2208      	movs	r2, #8
 8003862:	409a      	lsls	r2, r3
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06e      	beq.n	8003968 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a69      	ldr	r2, [pc, #420]	; (8003a34 <HAL_DMA_IRQHandler+0x3f8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04a      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <HAL_DMA_IRQHandler+0x3fc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d045      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a66      	ldr	r2, [pc, #408]	; (8003a3c <HAL_DMA_IRQHandler+0x400>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a64      	ldr	r2, [pc, #400]	; (8003a40 <HAL_DMA_IRQHandler+0x404>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d03b      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a63      	ldr	r2, [pc, #396]	; (8003a44 <HAL_DMA_IRQHandler+0x408>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d036      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a61      	ldr	r2, [pc, #388]	; (8003a48 <HAL_DMA_IRQHandler+0x40c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d031      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a60      	ldr	r2, [pc, #384]	; (8003a4c <HAL_DMA_IRQHandler+0x410>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d02c      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_DMA_IRQHandler+0x414>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d027      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_DMA_IRQHandler+0x418>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <HAL_DMA_IRQHandler+0x41c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_DMA_IRQHandler+0x420>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_DMA_IRQHandler+0x424>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_DMA_IRQHandler+0x428>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a55      	ldr	r2, [pc, #340]	; (8003a68 <HAL_DMA_IRQHandler+0x42c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_DMA_IRQHandler+0x430>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_DMA_IRQHandler+0x2ee>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_DMA_IRQHandler+0x434>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10a      	bne.n	8003940 <HAL_DMA_IRQHandler+0x304>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e003      	b.n	8003948 <HAL_DMA_IRQHandler+0x30c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 808f 	beq.w	8003a9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <HAL_DMA_IRQHandler+0x3f8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <HAL_DMA_IRQHandler+0x3fc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_DMA_IRQHandler+0x400>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <HAL_DMA_IRQHandler+0x404>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <HAL_DMA_IRQHandler+0x408>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <HAL_DMA_IRQHandler+0x40c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <HAL_DMA_IRQHandler+0x410>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <HAL_DMA_IRQHandler+0x414>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_DMA_IRQHandler+0x418>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_DMA_IRQHandler+0x41c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_DMA_IRQHandler+0x420>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_DMA_IRQHandler+0x424>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_DMA_IRQHandler+0x428>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_DMA_IRQHandler+0x42c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_DMA_IRQHandler+0x430>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x3e2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <HAL_DMA_IRQHandler+0x434>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12a      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x438>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e023      	b.n	8003a7c <HAL_DMA_IRQHandler+0x440>
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2204      	movs	r2, #4
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f043 0204 	orr.w	r2, r3, #4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a6 	beq.w	8003bfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a85      	ldr	r2, [pc, #532]	; (8003ccc <HAL_DMA_IRQHandler+0x690>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04a      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a83      	ldr	r2, [pc, #524]	; (8003cd0 <HAL_DMA_IRQHandler+0x694>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d045      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a82      	ldr	r2, [pc, #520]	; (8003cd4 <HAL_DMA_IRQHandler+0x698>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d040      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <HAL_DMA_IRQHandler+0x69c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7f      	ldr	r2, [pc, #508]	; (8003cdc <HAL_DMA_IRQHandler+0x6a0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7d      	ldr	r2, [pc, #500]	; (8003ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7c      	ldr	r2, [pc, #496]	; (8003ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02c      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7a      	ldr	r2, [pc, #488]	; (8003ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a79      	ldr	r2, [pc, #484]	; (8003cec <HAL_DMA_IRQHandler+0x6b0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a77      	ldr	r2, [pc, #476]	; (8003cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a76      	ldr	r2, [pc, #472]	; (8003cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <HAL_DMA_IRQHandler+0x6c0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <HAL_DMA_IRQHandler+0x6c4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <HAL_DMA_IRQHandler+0x6c8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x516>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_DMA_IRQHandler+0x6cc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10a      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x52c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e009      	b.n	8003b7c <HAL_DMA_IRQHandler+0x540>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2210      	movs	r2, #16
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d024      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
 8003bbc:	e01f      	b.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
 8003bce:	e016      	b.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0208 	bic.w	r2, r2, #8
 8003bec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2220      	movs	r2, #32
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8110 	beq.w	8003e34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2c      	ldr	r2, [pc, #176]	; (8003ccc <HAL_DMA_IRQHandler+0x690>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04a      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_DMA_IRQHandler+0x694>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d045      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_DMA_IRQHandler+0x698>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d040      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_DMA_IRQHandler+0x69c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d03b      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <HAL_DMA_IRQHandler+0x6a0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d036      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d031      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d02c      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d027      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <HAL_DMA_IRQHandler+0x6b0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d022      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01d      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_DMA_IRQHandler+0x6c0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <HAL_DMA_IRQHandler+0x6c4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_DMA_IRQHandler+0x6c8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x678>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <HAL_DMA_IRQHandler+0x6cc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d12b      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x6d0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e02a      	b.n	8003d20 <HAL_DMA_IRQHandler+0x6e4>
 8003cca:	bf00      	nop
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8087 	beq.w	8003e34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2220      	movs	r2, #32
 8003d30:	409a      	lsls	r2, r3
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d139      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0216 	bic.w	r2, r2, #22
 8003d50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x736>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	223f      	movs	r2, #63	; 0x3f
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 834a 	beq.w	8004440 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
          }
          return;
 8003db4:	e344      	b.n	8004440 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
 8003de2:	e027      	b.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d023      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e01e      	b.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0210 	bic.w	r2, r2, #16
 8003e12:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8306 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8088 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <HAL_DMA_IRQHandler+0xa08>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d04a      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a79      	ldr	r2, [pc, #484]	; (8004048 <HAL_DMA_IRQHandler+0xa0c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d045      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a77      	ldr	r2, [pc, #476]	; (800404c <HAL_DMA_IRQHandler+0xa10>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d040      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a76      	ldr	r2, [pc, #472]	; (8004050 <HAL_DMA_IRQHandler+0xa14>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d03b      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a74      	ldr	r2, [pc, #464]	; (8004054 <HAL_DMA_IRQHandler+0xa18>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d036      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a73      	ldr	r2, [pc, #460]	; (8004058 <HAL_DMA_IRQHandler+0xa1c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d031      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a71      	ldr	r2, [pc, #452]	; (800405c <HAL_DMA_IRQHandler+0xa20>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02c      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a70      	ldr	r2, [pc, #448]	; (8004060 <HAL_DMA_IRQHandler+0xa24>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d027      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_DMA_IRQHandler+0xa28>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6d      	ldr	r2, [pc, #436]	; (8004068 <HAL_DMA_IRQHandler+0xa2c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6b      	ldr	r2, [pc, #428]	; (800406c <HAL_DMA_IRQHandler+0xa30>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6a      	ldr	r2, [pc, #424]	; (8004070 <HAL_DMA_IRQHandler+0xa34>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a68      	ldr	r2, [pc, #416]	; (8004074 <HAL_DMA_IRQHandler+0xa38>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_DMA_IRQHandler+0xa3c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_DMA_IRQHandler+0xa40>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x8b8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a64      	ldr	r2, [pc, #400]	; (8004080 <HAL_DMA_IRQHandler+0xa44>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <HAL_DMA_IRQHandler+0x8ca>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_DMA_IRQHandler+0x8da>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d307      	bcc.n	8003f32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f2      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x8da>
 8003f30:	e000      	b.n	8003f34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f32:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f52:	e003      	b.n	8003f5c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8272 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e26c      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a43      	ldr	r2, [pc, #268]	; (8004084 <HAL_DMA_IRQHandler+0xa48>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d022      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a42      	ldr	r2, [pc, #264]	; (8004088 <HAL_DMA_IRQHandler+0xa4c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d01d      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a40      	ldr	r2, [pc, #256]	; (800408c <HAL_DMA_IRQHandler+0xa50>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d018      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3f      	ldr	r2, [pc, #252]	; (8004090 <HAL_DMA_IRQHandler+0xa54>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <HAL_DMA_IRQHandler+0xa58>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3c      	ldr	r2, [pc, #240]	; (8004098 <HAL_DMA_IRQHandler+0xa5c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	; (800409c <HAL_DMA_IRQHandler+0xa60>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x984>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a39      	ldr	r2, [pc, #228]	; (80040a0 <HAL_DMA_IRQHandler+0xa64>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x988>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x98a>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 823f 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2204      	movs	r2, #4
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80cd 	beq.w	8004184 <HAL_DMA_IRQHandler+0xb48>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80c7 	beq.w	8004184 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2204      	movs	r2, #4
 8004000:	409a      	lsls	r2, r3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d049      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8210 	beq.w	8004444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800402c:	e20a      	b.n	8004444 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8206 	beq.w	8004444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004040:	e200      	b.n	8004444 <HAL_DMA_IRQHandler+0xe08>
 8004042:	bf00      	nop
 8004044:	40020010 	.word	0x40020010
 8004048:	40020028 	.word	0x40020028
 800404c:	40020040 	.word	0x40020040
 8004050:	40020058 	.word	0x40020058
 8004054:	40020070 	.word	0x40020070
 8004058:	40020088 	.word	0x40020088
 800405c:	400200a0 	.word	0x400200a0
 8004060:	400200b8 	.word	0x400200b8
 8004064:	40020410 	.word	0x40020410
 8004068:	40020428 	.word	0x40020428
 800406c:	40020440 	.word	0x40020440
 8004070:	40020458 	.word	0x40020458
 8004074:	40020470 	.word	0x40020470
 8004078:	40020488 	.word	0x40020488
 800407c:	400204a0 	.word	0x400204a0
 8004080:	400204b8 	.word	0x400204b8
 8004084:	58025408 	.word	0x58025408
 8004088:	5802541c 	.word	0x5802541c
 800408c:	58025430 	.word	0x58025430
 8004090:	58025444 	.word	0x58025444
 8004094:	58025458 	.word	0x58025458
 8004098:	5802546c 	.word	0x5802546c
 800409c:	58025480 	.word	0x58025480
 80040a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d160      	bne.n	8004170 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a8c      	ldr	r2, [pc, #560]	; (80042e4 <HAL_DMA_IRQHandler+0xca8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a8a      	ldr	r2, [pc, #552]	; (80042e8 <HAL_DMA_IRQHandler+0xcac>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a89      	ldr	r2, [pc, #548]	; (80042ec <HAL_DMA_IRQHandler+0xcb0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a87      	ldr	r2, [pc, #540]	; (80042f0 <HAL_DMA_IRQHandler+0xcb4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a86      	ldr	r2, [pc, #536]	; (80042f4 <HAL_DMA_IRQHandler+0xcb8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a84      	ldr	r2, [pc, #528]	; (80042f8 <HAL_DMA_IRQHandler+0xcbc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a83      	ldr	r2, [pc, #524]	; (80042fc <HAL_DMA_IRQHandler+0xcc0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a81      	ldr	r2, [pc, #516]	; (8004300 <HAL_DMA_IRQHandler+0xcc4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a80      	ldr	r2, [pc, #512]	; (8004304 <HAL_DMA_IRQHandler+0xcc8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7e      	ldr	r2, [pc, #504]	; (8004308 <HAL_DMA_IRQHandler+0xccc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7d      	ldr	r2, [pc, #500]	; (800430c <HAL_DMA_IRQHandler+0xcd0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7b      	ldr	r2, [pc, #492]	; (8004310 <HAL_DMA_IRQHandler+0xcd4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7a      	ldr	r2, [pc, #488]	; (8004314 <HAL_DMA_IRQHandler+0xcd8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a78      	ldr	r2, [pc, #480]	; (8004318 <HAL_DMA_IRQHandler+0xcdc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a77      	ldr	r2, [pc, #476]	; (800431c <HAL_DMA_IRQHandler+0xce0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_IRQHandler+0xb12>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_DMA_IRQHandler+0xce4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <HAL_DMA_IRQHandler+0xb24>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0208 	bic.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e007      	b.n	8004170 <HAL_DMA_IRQHandler+0xb34>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8165 	beq.w	8004444 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004182:	e15f      	b.n	8004444 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2202      	movs	r2, #2
 800418e:	409a      	lsls	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80c5 	beq.w	8004324 <HAL_DMA_IRQHandler+0xce8>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80bf 	beq.w	8004324 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2202      	movs	r2, #2
 80041b0:	409a      	lsls	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 813a 	beq.w	8004448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041dc:	e134      	b.n	8004448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8130 	beq.w	8004448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f0:	e12a      	b.n	8004448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d168      	bne.n	80042ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a38      	ldr	r2, [pc, #224]	; (80042e4 <HAL_DMA_IRQHandler+0xca8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04a      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a37      	ldr	r2, [pc, #220]	; (80042e8 <HAL_DMA_IRQHandler+0xcac>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d045      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a35      	ldr	r2, [pc, #212]	; (80042ec <HAL_DMA_IRQHandler+0xcb0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d040      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <HAL_DMA_IRQHandler+0xcb4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d03b      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a32      	ldr	r2, [pc, #200]	; (80042f4 <HAL_DMA_IRQHandler+0xcb8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d036      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a31      	ldr	r2, [pc, #196]	; (80042f8 <HAL_DMA_IRQHandler+0xcbc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d031      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <HAL_DMA_IRQHandler+0xcc0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02c      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <HAL_DMA_IRQHandler+0xcc4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d027      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <HAL_DMA_IRQHandler+0xcc8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <HAL_DMA_IRQHandler+0xccc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <HAL_DMA_IRQHandler+0xcd0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a28      	ldr	r2, [pc, #160]	; (8004310 <HAL_DMA_IRQHandler+0xcd4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a26      	ldr	r2, [pc, #152]	; (8004314 <HAL_DMA_IRQHandler+0xcd8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a25      	ldr	r2, [pc, #148]	; (8004318 <HAL_DMA_IRQHandler+0xcdc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a23      	ldr	r2, [pc, #140]	; (800431c <HAL_DMA_IRQHandler+0xce0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_DMA_IRQHandler+0xc60>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a22      	ldr	r2, [pc, #136]	; (8004320 <HAL_DMA_IRQHandler+0xce4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <HAL_DMA_IRQHandler+0xc72>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0214 	bic.w	r2, r2, #20
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e007      	b.n	80042be <HAL_DMA_IRQHandler+0xc82>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 020a 	bic.w	r2, r2, #10
 80042bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80b8 	beq.w	8004448 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e0:	e0b2      	b.n	8004448 <HAL_DMA_IRQHandler+0xe0c>
 80042e2:	bf00      	nop
 80042e4:	40020010 	.word	0x40020010
 80042e8:	40020028 	.word	0x40020028
 80042ec:	40020040 	.word	0x40020040
 80042f0:	40020058 	.word	0x40020058
 80042f4:	40020070 	.word	0x40020070
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	400200b8 	.word	0x400200b8
 8004304:	40020410 	.word	0x40020410
 8004308:	40020428 	.word	0x40020428
 800430c:	40020440 	.word	0x40020440
 8004310:	40020458 	.word	0x40020458
 8004314:	40020470 	.word	0x40020470
 8004318:	40020488 	.word	0x40020488
 800431c:	400204a0 	.word	0x400204a0
 8004320:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2208      	movs	r2, #8
 800432e:	409a      	lsls	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8088 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8082 	beq.w	800444a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a41      	ldr	r2, [pc, #260]	; (8004450 <HAL_DMA_IRQHandler+0xe14>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d04a      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3f      	ldr	r2, [pc, #252]	; (8004454 <HAL_DMA_IRQHandler+0xe18>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d045      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3e      	ldr	r2, [pc, #248]	; (8004458 <HAL_DMA_IRQHandler+0xe1c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d040      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3c      	ldr	r2, [pc, #240]	; (800445c <HAL_DMA_IRQHandler+0xe20>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d03b      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_DMA_IRQHandler+0xe24>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d036      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a39      	ldr	r2, [pc, #228]	; (8004464 <HAL_DMA_IRQHandler+0xe28>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_DMA_IRQHandler+0xe2c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d02c      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a36      	ldr	r2, [pc, #216]	; (800446c <HAL_DMA_IRQHandler+0xe30>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d027      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a35      	ldr	r2, [pc, #212]	; (8004470 <HAL_DMA_IRQHandler+0xe34>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a33      	ldr	r2, [pc, #204]	; (8004474 <HAL_DMA_IRQHandler+0xe38>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01d      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a32      	ldr	r2, [pc, #200]	; (8004478 <HAL_DMA_IRQHandler+0xe3c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a30      	ldr	r2, [pc, #192]	; (800447c <HAL_DMA_IRQHandler+0xe40>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2f      	ldr	r2, [pc, #188]	; (8004480 <HAL_DMA_IRQHandler+0xe44>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2d      	ldr	r2, [pc, #180]	; (8004484 <HAL_DMA_IRQHandler+0xe48>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <HAL_DMA_IRQHandler+0xe4c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xdaa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <HAL_DMA_IRQHandler+0xe50>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <HAL_DMA_IRQHandler+0xdbc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 021c 	bic.w	r2, r2, #28
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e007      	b.n	8004408 <HAL_DMA_IRQHandler+0xdcc>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 020e 	bic.w	r2, r2, #14
 8004406:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e004      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004448:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8

08004490 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a84      	ldr	r2, [pc, #528]	; (80046d8 <DMA_SetConfig+0x230>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d072      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a82      	ldr	r2, [pc, #520]	; (80046dc <DMA_SetConfig+0x234>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d06d      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a81      	ldr	r2, [pc, #516]	; (80046e0 <DMA_SetConfig+0x238>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d068      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a7f      	ldr	r2, [pc, #508]	; (80046e4 <DMA_SetConfig+0x23c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d063      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	; (80046e8 <DMA_SetConfig+0x240>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d05e      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <DMA_SetConfig+0x244>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d059      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a7b      	ldr	r2, [pc, #492]	; (80046f0 <DMA_SetConfig+0x248>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d054      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a79      	ldr	r2, [pc, #484]	; (80046f4 <DMA_SetConfig+0x24c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04f      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a78      	ldr	r2, [pc, #480]	; (80046f8 <DMA_SetConfig+0x250>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d04a      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a76      	ldr	r2, [pc, #472]	; (80046fc <DMA_SetConfig+0x254>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d045      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a75      	ldr	r2, [pc, #468]	; (8004700 <DMA_SetConfig+0x258>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d040      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a73      	ldr	r2, [pc, #460]	; (8004704 <DMA_SetConfig+0x25c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d03b      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a72      	ldr	r2, [pc, #456]	; (8004708 <DMA_SetConfig+0x260>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d036      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a70      	ldr	r2, [pc, #448]	; (800470c <DMA_SetConfig+0x264>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d031      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6f      	ldr	r2, [pc, #444]	; (8004710 <DMA_SetConfig+0x268>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d02c      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a6d      	ldr	r2, [pc, #436]	; (8004714 <DMA_SetConfig+0x26c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d027      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6c      	ldr	r2, [pc, #432]	; (8004718 <DMA_SetConfig+0x270>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6a      	ldr	r2, [pc, #424]	; (800471c <DMA_SetConfig+0x274>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01d      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a69      	ldr	r2, [pc, #420]	; (8004720 <DMA_SetConfig+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a67      	ldr	r2, [pc, #412]	; (8004724 <DMA_SetConfig+0x27c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a66      	ldr	r2, [pc, #408]	; (8004728 <DMA_SetConfig+0x280>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a64      	ldr	r2, [pc, #400]	; (800472c <DMA_SetConfig+0x284>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a63      	ldr	r2, [pc, #396]	; (8004730 <DMA_SetConfig+0x288>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a61      	ldr	r2, [pc, #388]	; (8004734 <DMA_SetConfig+0x28c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <DMA_SetConfig+0x10e>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <DMA_SetConfig+0x110>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <DMA_SetConfig+0x230>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d04a      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <DMA_SetConfig+0x234>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d045      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3b      	ldr	r2, [pc, #236]	; (80046e0 <DMA_SetConfig+0x238>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d040      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <DMA_SetConfig+0x23c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03b      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <DMA_SetConfig+0x240>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d036      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a37      	ldr	r2, [pc, #220]	; (80046ec <DMA_SetConfig+0x244>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d031      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <DMA_SetConfig+0x248>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02c      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <DMA_SetConfig+0x24c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d027      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <DMA_SetConfig+0x250>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a31      	ldr	r2, [pc, #196]	; (80046fc <DMA_SetConfig+0x254>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2f      	ldr	r2, [pc, #188]	; (8004700 <DMA_SetConfig+0x258>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <DMA_SetConfig+0x25c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <DMA_SetConfig+0x260>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2b      	ldr	r2, [pc, #172]	; (800470c <DMA_SetConfig+0x264>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <DMA_SetConfig+0x268>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a28      	ldr	r2, [pc, #160]	; (8004714 <DMA_SetConfig+0x26c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <DMA_SetConfig+0x1d4>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <DMA_SetConfig+0x1d6>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d05a      	beq.n	8004738 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	223f      	movs	r2, #63	; 0x3f
 800468c:	409a      	lsls	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d108      	bne.n	80046c4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046c2:	e087      	b.n	80047d4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
}
 80046d4:	e07e      	b.n	80047d4 <DMA_SetConfig+0x32c>
 80046d6:	bf00      	nop
 80046d8:	40020010 	.word	0x40020010
 80046dc:	40020028 	.word	0x40020028
 80046e0:	40020040 	.word	0x40020040
 80046e4:	40020058 	.word	0x40020058
 80046e8:	40020070 	.word	0x40020070
 80046ec:	40020088 	.word	0x40020088
 80046f0:	400200a0 	.word	0x400200a0
 80046f4:	400200b8 	.word	0x400200b8
 80046f8:	40020410 	.word	0x40020410
 80046fc:	40020428 	.word	0x40020428
 8004700:	40020440 	.word	0x40020440
 8004704:	40020458 	.word	0x40020458
 8004708:	40020470 	.word	0x40020470
 800470c:	40020488 	.word	0x40020488
 8004710:	400204a0 	.word	0x400204a0
 8004714:	400204b8 	.word	0x400204b8
 8004718:	58025408 	.word	0x58025408
 800471c:	5802541c 	.word	0x5802541c
 8004720:	58025430 	.word	0x58025430
 8004724:	58025444 	.word	0x58025444
 8004728:	58025458 	.word	0x58025458
 800472c:	5802546c 	.word	0x5802546c
 8004730:	58025480 	.word	0x58025480
 8004734:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <DMA_SetConfig+0x338>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <DMA_SetConfig+0x33c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <DMA_SetConfig+0x340>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <DMA_SetConfig+0x344>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <DMA_SetConfig+0x348>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <DMA_SetConfig+0x34c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <DMA_SetConfig+0x350>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <DMA_SetConfig+0x354>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <DMA_SetConfig+0x2e4>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <DMA_SetConfig+0x2e6>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d020      	beq.n	80047d4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d108      	bne.n	80047c4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	60da      	str	r2, [r3, #12]
}
 80047c2:	e007      	b.n	80047d4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	58025408 	.word	0x58025408
 80047e4:	5802541c 	.word	0x5802541c
 80047e8:	58025430 	.word	0x58025430
 80047ec:	58025444 	.word	0x58025444
 80047f0:	58025458 	.word	0x58025458
 80047f4:	5802546c 	.word	0x5802546c
 80047f8:	58025480 	.word	0x58025480
 80047fc:	58025494 	.word	0x58025494

08004800 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a42      	ldr	r2, [pc, #264]	; (8004918 <DMA_CalcBaseAndBitshift+0x118>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d04a      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a41      	ldr	r2, [pc, #260]	; (800491c <DMA_CalcBaseAndBitshift+0x11c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d045      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3f      	ldr	r2, [pc, #252]	; (8004920 <DMA_CalcBaseAndBitshift+0x120>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d040      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3e      	ldr	r2, [pc, #248]	; (8004924 <DMA_CalcBaseAndBitshift+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d03b      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <DMA_CalcBaseAndBitshift+0x128>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d036      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <DMA_CalcBaseAndBitshift+0x12c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d031      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a39      	ldr	r2, [pc, #228]	; (8004930 <DMA_CalcBaseAndBitshift+0x130>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d02c      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a38      	ldr	r2, [pc, #224]	; (8004934 <DMA_CalcBaseAndBitshift+0x134>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d027      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a36      	ldr	r2, [pc, #216]	; (8004938 <DMA_CalcBaseAndBitshift+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a35      	ldr	r2, [pc, #212]	; (800493c <DMA_CalcBaseAndBitshift+0x13c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a33      	ldr	r2, [pc, #204]	; (8004940 <DMA_CalcBaseAndBitshift+0x140>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a32      	ldr	r2, [pc, #200]	; (8004944 <DMA_CalcBaseAndBitshift+0x144>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a30      	ldr	r2, [pc, #192]	; (8004948 <DMA_CalcBaseAndBitshift+0x148>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2f      	ldr	r2, [pc, #188]	; (800494c <DMA_CalcBaseAndBitshift+0x14c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <DMA_CalcBaseAndBitshift+0x150>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <DMA_CalcBaseAndBitshift+0x154>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <DMA_CalcBaseAndBitshift+0xac>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <DMA_CalcBaseAndBitshift+0xae>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d024      	beq.n	80048fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3b10      	subs	r3, #16
 80048ba:	4a27      	ldr	r2, [pc, #156]	; (8004958 <DMA_CalcBaseAndBitshift+0x158>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	4a24      	ldr	r2, [pc, #144]	; (800495c <DMA_CalcBaseAndBitshift+0x15c>)
 80048cc:	5cd3      	ldrb	r3, [r2, r3]
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d908      	bls.n	80048ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <DMA_CalcBaseAndBitshift+0x160>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	659a      	str	r2, [r3, #88]	; 0x58
 80048ea:	e00d      	b.n	8004908 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <DMA_CalcBaseAndBitshift+0x160>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6593      	str	r3, [r2, #88]	; 0x58
 80048fa:	e005      	b.n	8004908 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8
 8004958:	aaaaaaab 	.word	0xaaaaaaab
 800495c:	0800b274 	.word	0x0800b274
 8004960:	fffffc00 	.word	0xfffffc00

08004964 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d120      	bne.n	80049ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	2b03      	cmp	r3, #3
 800497e:	d858      	bhi.n	8004a32 <DMA_CheckFifoParam+0xce>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <DMA_CheckFifoParam+0x24>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	08004999 	.word	0x08004999
 800498c:	080049ab 	.word	0x080049ab
 8004990:	08004999 	.word	0x08004999
 8004994:	08004a33 	.word	0x08004a33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d048      	beq.n	8004a36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049a8:	e045      	b.n	8004a36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049b2:	d142      	bne.n	8004a3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049b8:	e03f      	b.n	8004a3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d123      	bne.n	8004a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d838      	bhi.n	8004a3e <DMA_CheckFifoParam+0xda>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <DMA_CheckFifoParam+0x70>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049eb 	.word	0x080049eb
 80049dc:	080049e5 	.word	0x080049e5
 80049e0:	080049fd 	.word	0x080049fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
        break;
 80049e8:	e030      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d025      	beq.n	8004a42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049fa:	e022      	b.n	8004a42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a04:	d11f      	bne.n	8004a46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a0a:	e01c      	b.n	8004a46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d902      	bls.n	8004a1a <DMA_CheckFifoParam+0xb6>
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d003      	beq.n	8004a20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a18:	e018      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1e:	e015      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a30:	e00b      	b.n	8004a4a <DMA_CheckFifoParam+0xe6>
        break;
 8004a32:	bf00      	nop
 8004a34:	e00a      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a36:	bf00      	nop
 8004a38:	e008      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a3a:	bf00      	nop
 8004a3c:	e006      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
    break;
 8004a4a:	bf00      	nop
    }
  }

  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01d      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a30      	ldr	r2, [pc, #192]	; (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3b08      	subs	r3, #8
 8004acc:	4a28      	ldr	r2, [pc, #160]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ae8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2201      	movs	r2, #1
 8004af2:	409a      	lsls	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004af8:	e024      	b.n	8004b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3b10      	subs	r3, #16
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d806      	bhi.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d902      	bls.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	58025408 	.word	0x58025408
 8004b54:	5802541c 	.word	0x5802541c
 8004b58:	58025430 	.word	0x58025430
 8004b5c:	58025444 	.word	0x58025444
 8004b60:	58025458 	.word	0x58025458
 8004b64:	5802546c 	.word	0x5802546c
 8004b68:	58025480 	.word	0x58025480
 8004b6c:	58025494 	.word	0x58025494
 8004b70:	cccccccd 	.word	0xcccccccd
 8004b74:	16009600 	.word	0x16009600
 8004b78:	58025880 	.word	0x58025880
 8004b7c:	aaaaaaab 	.word	0xaaaaaaab
 8004b80:	400204b8 	.word	0x400204b8
 8004b84:	4002040f 	.word	0x4002040f
 8004b88:	10008200 	.word	0x10008200
 8004b8c:	40020880 	.word	0x40020880

08004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04a      	beq.n	8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d847      	bhi.n	8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c18:	671a      	str	r2, [r3, #112]	; 0x70
 8004c1a:	e009      	b.n	8004c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	461a      	mov	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	2201      	movs	r2, #1
 8004c36:	409a      	lsls	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	58025408 	.word	0x58025408
 8004c4c:	5802541c 	.word	0x5802541c
 8004c50:	58025430 	.word	0x58025430
 8004c54:	58025444 	.word	0x58025444
 8004c58:	58025458 	.word	0x58025458
 8004c5c:	5802546c 	.word	0x5802546c
 8004c60:	58025480 	.word	0x58025480
 8004c64:	58025494 	.word	0x58025494
 8004c68:	1600963f 	.word	0x1600963f
 8004c6c:	58025940 	.word	0x58025940
 8004c70:	1000823f 	.word	0x1000823f
 8004c74:	40020940 	.word	0x40020940

08004c78 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0c6      	b.n	8004e18 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fc18 	bl	80014c8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2223      	movs	r2, #35	; 0x23
 8004c9c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9e:	4b60      	ldr	r3, [pc, #384]	; (8004e20 <HAL_ETH_Init+0x1a8>)
 8004ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ca4:	4a5e      	ldr	r2, [pc, #376]	; (8004e20 <HAL_ETH_Init+0x1a8>)
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004cae:	4b5c      	ldr	r3, [pc, #368]	; (8004e20 <HAL_ETH_Init+0x1a8>)
 8004cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7a1b      	ldrb	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fd f86d 	bl	8001da4 <HAL_SYSCFG_ETHInterfaceSelect>
 8004cca:	e003      	b.n	8004cd4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004ccc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004cd0:	f7fd f868 	bl	8001da4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cec:	f7fd f81e 	bl	8001d2c <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004cf2:	e00f      	b.n	8004d14 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004cf4:	f7fd f81a 	bl	8001d2c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d02:	d907      	bls.n	8004d14 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2204      	movs	r2, #4
 8004d08:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	22e0      	movs	r2, #224	; 0xe0
 8004d0e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e081      	b.n	8004e18 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fac0 	bl	80052ac <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004d2c:	f001 fea4 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a3c      	ldr	r2, [pc, #240]	; (8004e24 <HAL_ETH_Init+0x1ac>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0c9a      	lsrs	r2, r3, #18
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fa13 	bl	8005170 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d60:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d64:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	22e0      	movs	r2, #224	; 0xe0
 8004d7c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e04a      	b.n	8004e18 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d8a:	4413      	add	r3, r2
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <HAL_ETH_Init+0x1b0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6952      	ldr	r2, [r2, #20]
 8004d96:	0052      	lsls	r2, r2, #1
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	6809      	ldr	r1, [r1, #0]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004da2:	440b      	add	r3, r1
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fad8 	bl	800535c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fb1c 	bl	80053ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	3305      	adds	r3, #5
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	3303      	adds	r3, #3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	061a      	lsls	r2, r3, #24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	3302      	adds	r3, #2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004df0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004dfe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2210      	movs	r2, #16
 8004e14:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	58024400 	.word	0x58024400
 8004e24:	431bde83 	.word	0x431bde83
 8004e28:	ffff8001 	.word	0xffff8001

08004e2c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004e3e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004e46:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	7b1b      	ldrb	r3, [r3, #12]
 8004e4c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e4e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	7b5b      	ldrb	r3, [r3, #13]
 8004e54:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e56:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	7b9b      	ldrb	r3, [r3, #14]
 8004e5c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	7bdb      	ldrb	r3, [r3, #15]
 8004e64:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e66:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	7c12      	ldrb	r2, [r2, #16]
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	d102      	bne.n	8004e76 <ETH_SetMACConfig+0x4a>
 8004e70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e74:	e000      	b.n	8004e78 <ETH_SetMACConfig+0x4c>
 8004e76:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e78:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	7c52      	ldrb	r2, [r2, #17]
 8004e7e:	2a00      	cmp	r2, #0
 8004e80:	d102      	bne.n	8004e88 <ETH_SetMACConfig+0x5c>
 8004e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e86:	e000      	b.n	8004e8a <ETH_SetMACConfig+0x5e>
 8004e88:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e8a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	7c9b      	ldrb	r3, [r3, #18]
 8004e90:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e92:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004e98:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004e9e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	7f1b      	ldrb	r3, [r3, #28]
 8004ea4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004ea6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	7f5b      	ldrb	r3, [r3, #29]
 8004eac:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004eae:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	7f92      	ldrb	r2, [r2, #30]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d102      	bne.n	8004ebe <ETH_SetMACConfig+0x92>
 8004eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ebc:	e000      	b.n	8004ec0 <ETH_SetMACConfig+0x94>
 8004ebe:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004ec0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	7fdb      	ldrb	r3, [r3, #31]
 8004ec6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004ec8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	d102      	bne.n	8004eda <ETH_SetMACConfig+0xae>
 8004ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed8:	e000      	b.n	8004edc <ETH_SetMACConfig+0xb0>
 8004eda:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004edc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004ee2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eea:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004eec:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b56      	ldr	r3, [pc, #344]	; (8005058 <ETH_SetMACConfig+0x22c>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f16:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f18:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f20:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004f22:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f2a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004f2c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	d102      	bne.n	8004f3e <ETH_SetMACConfig+0x112>
 8004f38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f3c:	e000      	b.n	8004f40 <ETH_SetMACConfig+0x114>
 8004f3e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004f40:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	4b42      	ldr	r3, [pc, #264]	; (800505c <ETH_SetMACConfig+0x230>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f64:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	4b3a      	ldr	r3, [pc, #232]	; (8005060 <ETH_SetMACConfig+0x234>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f88:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f8e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d101      	bne.n	8004f9e <ETH_SetMACConfig+0x172>
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	e000      	b.n	8004fa0 <ETH_SetMACConfig+0x174>
 8004f9e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004fa0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fb2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	68f9      	ldr	r1, [r7, #12]
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004fc8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004fd0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f023 0103 	bic.w	r1, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004ff6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005012:	2a00      	cmp	r2, #0
 8005014:	d101      	bne.n	800501a <ETH_SetMACConfig+0x1ee>
 8005016:	2240      	movs	r2, #64	; 0x40
 8005018:	e000      	b.n	800501c <ETH_SetMACConfig+0x1f0>
 800501a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800501c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005024:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005026:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800502e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800503c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	430a      	orrs	r2, r1
 8005048:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	00048083 	.word	0x00048083
 800505c:	c0f88000 	.word	0xc0f88000
 8005060:	fffffef0 	.word	0xfffffef0

08005064 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b38      	ldr	r3, [pc, #224]	; (800515c <ETH_SetDMAConfig+0xf8>)
 800507a:	4013      	ands	r3, r2
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	6809      	ldr	r1, [r1, #0]
 8005084:	431a      	orrs	r2, r3
 8005086:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800508a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005096:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	7b1b      	ldrb	r3, [r3, #12]
 800509c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80050aa:	4413      	add	r3, r2
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <ETH_SetDMAConfig+0xfc>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80050be:	440b      	add	r3, r1
 80050c0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	7b5b      	ldrb	r3, [r3, #13]
 80050c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <ETH_SetDMAConfig+0x100>)
 80050dc:	4013      	ands	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6811      	ldr	r1, [r2, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80050ea:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	7d1b      	ldrb	r3, [r3, #20]
 80050f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80050f6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7f5b      	ldrb	r3, [r3, #29]
 80050fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	f241 1304 	movw	r3, #4356	; 0x1104
 800510a:	4413      	add	r3, r2
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <ETH_SetDMAConfig+0x104>)
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6811      	ldr	r1, [r2, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	431a      	orrs	r2, r3
 800511a:	f241 1304 	movw	r3, #4356	; 0x1104
 800511e:	440b      	add	r3, r1
 8005120:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	7f1b      	ldrb	r3, [r3, #28]
 8005126:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	f241 1308 	movw	r3, #4360	; 0x1108
 8005138:	4413      	add	r3, r2
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <ETH_SetDMAConfig+0x108>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6811      	ldr	r1, [r2, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	431a      	orrs	r2, r3
 8005148:	f241 1308 	movw	r3, #4360	; 0x1108
 800514c:	440b      	add	r3, r1
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	ffff87fd 	.word	0xffff87fd
 8005160:	ffff2ffe 	.word	0xffff2ffe
 8005164:	fffec000 	.word	0xfffec000
 8005168:	ffc0efef 	.word	0xffc0efef
 800516c:	7fc0ffff 	.word	0x7fc0ffff

08005170 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b0a4      	sub	sp, #144	; 0x90
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800517e:	2300      	movs	r3, #0
 8005180:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005182:	2300      	movs	r3, #0
 8005184:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80051c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80051cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80051d4:	2300      	movs	r3, #0
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80051ea:	2300      	movs	r3, #0
 80051ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80051f2:	2300      	movs	r3, #0
 80051f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005208:	2320      	movs	r3, #32
 800520a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005214:	2300      	movs	r3, #0
 8005216:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800521a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005224:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800522c:	2302      	movs	r3, #2
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800524a:	2300      	movs	r3, #0
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fde6 	bl	8004e2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005260:	2301      	movs	r3, #1
 8005262:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005264:	2301      	movs	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005272:	2300      	movs	r3, #0
 8005274:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800527a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800527e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005288:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005290:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fee1 	bl	8005064 <ETH_SetDMAConfig>
}
 80052a2:	bf00      	nop
 80052a4:	3790      	adds	r7, #144	; 0x90
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052c6:	f001 fbd7 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 80052ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d908      	bls.n	80052e6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a1d      	ldr	r2, [pc, #116]	; (800534c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d804      	bhi.n	80052e6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e027      	b.n	8005336 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d908      	bls.n	8005300 <ETH_MAC_MDIO_ClkConfig+0x54>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d204      	bcs.n	8005300 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e01a      	b.n	8005336 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d303      	bcc.n	8005310 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a12      	ldr	r2, [pc, #72]	; (8005354 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d911      	bls.n	8005334 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d908      	bls.n	800532a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d804      	bhi.n	800532a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e005      	b.n	8005336 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e000      	b.n	8005336 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005334:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	01312cff 	.word	0x01312cff
 800534c:	02160ebf 	.word	0x02160ebf
 8005350:	03938700 	.word	0x03938700
 8005354:	05f5e0ff 	.word	0x05f5e0ff
 8005358:	08f0d17f 	.word	0x08f0d17f

0800535c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e01d      	b.n	80053a6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	3206      	adds	r2, #6
 800539c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d9de      	bls.n	800536a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	f241 132c 	movw	r3, #4396	; 0x112c
 80053ba:	4413      	add	r3, r2
 80053bc:	2203      	movs	r2, #3
 80053be:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68d9      	ldr	r1, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	f241 1314 	movw	r3, #4372	; 0x1114
 80053cc:	4413      	add	r3, r2
 80053ce:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e024      	b.n	8005442 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6919      	ldr	r1, [r3, #16]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2200      	movs	r2, #0
 800541a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2200      	movs	r2, #0
 8005420:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2200      	movs	r2, #0
 8005426:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3310      	adds	r3, #16
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d9d7      	bls.n	80053f8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f241 1330 	movw	r3, #4400	; 0x1130
 800546e:	4413      	add	r3, r2
 8005470:	2203      	movs	r2, #3
 8005472:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6919      	ldr	r1, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f241 131c 	movw	r3, #4380	; 0x111c
 8005480:	4413      	add	r3, r2
 8005482:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	f241 1328 	movw	r3, #4392	; 0x1128
 8005494:	4413      	add	r3, r2
 8005496:	6019      	str	r1, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054b2:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <HAL_GPIO_Init+0x234>)
 80054b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054b6:	e194      	b.n	80057e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	2101      	movs	r1, #1
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	4013      	ands	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8186 	beq.w	80057dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00b      	beq.n	80054f0 <HAL_GPIO_Init+0x4c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d007      	beq.n	80054f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054e4:	2b11      	cmp	r3, #17
 80054e6:	d003      	beq.n	80054f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b12      	cmp	r3, #18
 80054ee:	d130      	bne.n	8005552 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005526:	2201      	movs	r2, #1
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 0201 	and.w	r2, r3, #1
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	2203      	movs	r2, #3
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4013      	ands	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0xee>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b12      	cmp	r3, #18
 8005590:	d123      	bne.n	80055da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	08da      	lsrs	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3208      	adds	r2, #8
 800559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	220f      	movs	r2, #15
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	08da      	lsrs	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3208      	adds	r2, #8
 80055d4:	69b9      	ldr	r1, [r7, #24]
 80055d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	2203      	movs	r2, #3
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 0203 	and.w	r2, r3, #3
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80e0 	beq.w	80057dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800561c:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <HAL_GPIO_Init+0x238>)
 800561e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005622:	4a2e      	ldr	r2, [pc, #184]	; (80056dc <HAL_GPIO_Init+0x238>)
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_GPIO_Init+0x238>)
 800562e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800563a:	4a29      	ldr	r2, [pc, #164]	; (80056e0 <HAL_GPIO_Init+0x23c>)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	3302      	adds	r3, #2
 8005642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	220f      	movs	r2, #15
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <HAL_GPIO_Init+0x240>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d052      	beq.n	800570c <HAL_GPIO_Init+0x268>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <HAL_GPIO_Init+0x244>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d031      	beq.n	80056d2 <HAL_GPIO_Init+0x22e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_GPIO_Init+0x248>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02b      	beq.n	80056ce <HAL_GPIO_Init+0x22a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_GPIO_Init+0x24c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d025      	beq.n	80056ca <HAL_GPIO_Init+0x226>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_GPIO_Init+0x250>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01f      	beq.n	80056c6 <HAL_GPIO_Init+0x222>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <HAL_GPIO_Init+0x254>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d019      	beq.n	80056c2 <HAL_GPIO_Init+0x21e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <HAL_GPIO_Init+0x258>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_GPIO_Init+0x21a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a19      	ldr	r2, [pc, #100]	; (8005700 <HAL_GPIO_Init+0x25c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00d      	beq.n	80056ba <HAL_GPIO_Init+0x216>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_GPIO_Init+0x260>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d007      	beq.n	80056b6 <HAL_GPIO_Init+0x212>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a17      	ldr	r2, [pc, #92]	; (8005708 <HAL_GPIO_Init+0x264>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_GPIO_Init+0x20e>
 80056ae:	2309      	movs	r3, #9
 80056b0:	e02d      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056b2:	230a      	movs	r3, #10
 80056b4:	e02b      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056b6:	2308      	movs	r3, #8
 80056b8:	e029      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056ba:	2307      	movs	r3, #7
 80056bc:	e027      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056be:	2306      	movs	r3, #6
 80056c0:	e025      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056c2:	2305      	movs	r3, #5
 80056c4:	e023      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056c6:	2304      	movs	r3, #4
 80056c8:	e021      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056ca:	2303      	movs	r3, #3
 80056cc:	e01f      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e01d      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e01b      	b.n	800570e <HAL_GPIO_Init+0x26a>
 80056d6:	bf00      	nop
 80056d8:	58000080 	.word	0x58000080
 80056dc:	58024400 	.word	0x58024400
 80056e0:	58000400 	.word	0x58000400
 80056e4:	58020000 	.word	0x58020000
 80056e8:	58020400 	.word	0x58020400
 80056ec:	58020800 	.word	0x58020800
 80056f0:	58020c00 	.word	0x58020c00
 80056f4:	58021000 	.word	0x58021000
 80056f8:	58021400 	.word	0x58021400
 80056fc:	58021800 	.word	0x58021800
 8005700:	58021c00 	.word	0x58021c00
 8005704:	58022000 	.word	0x58022000
 8005708:	58022400 	.word	0x58022400
 800570c:	2300      	movs	r3, #0
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	f002 0203 	and.w	r2, r2, #3
 8005714:	0092      	lsls	r2, r2, #2
 8005716:	4093      	lsls	r3, r2
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800571e:	4938      	ldr	r1, [pc, #224]	; (8005800 <HAL_GPIO_Init+0x35c>)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	3302      	adds	r3, #2
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	43db      	mvns	r3, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4013      	ands	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	3301      	adds	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f47f ae63 	bne.w	80054b8 <HAL_GPIO_Init+0x14>
  }
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	3724      	adds	r7, #36	; 0x24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	58000400 	.word	0x58000400

08005804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	807b      	strh	r3, [r7, #2]
 8005810:	4613      	mov	r3, r2
 8005812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005814:	787b      	ldrb	r3, [r7, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800581a:	887a      	ldrh	r2, [r7, #2]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005820:	e003      	b.n	800582a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	041a      	lsls	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	619a      	str	r2, [r3, #24]
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005840:	4a08      	ldr	r2, [pc, #32]	; (8005864 <HAL_HSEM_FastTake+0x2c>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3320      	adds	r3, #32
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	4a07      	ldr	r2, [pc, #28]	; (8005868 <HAL_HSEM_FastTake+0x30>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	e000      	b.n	8005856 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	58026400 	.word	0x58026400
 8005868:	80000300 	.word	0x80000300

0800586c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005876:	4906      	ldr	r1, [pc, #24]	; (8005890 <HAL_HSEM_Release+0x24>)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	58026400 	.word	0x58026400

08005894 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005896:	b08f      	sub	sp, #60	; 0x3c
 8005898:	af0a      	add	r7, sp, #40	; 0x28
 800589a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e116      	b.n	8005ad4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fc f867 	bl	8001994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2203      	movs	r2, #3
 80058ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f005 f99f 	bl	800ac28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	687e      	ldr	r6, [r7, #4]
 80058f2:	466d      	mov	r5, sp
 80058f4:	f106 0410 	add.w	r4, r6, #16
 80058f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005900:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005904:	e885 0003 	stmia.w	r5, {r0, r1}
 8005908:	1d33      	adds	r3, r6, #4
 800590a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f005 f91d 	bl	800ab4c <USB_CoreInit>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e0d7      	b.n	8005ad4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f005 f98d 	bl	800ac4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]
 8005934:	e04a      	b.n	80059cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005936:	7bfa      	ldrb	r2, [r7, #15]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	333d      	adds	r3, #61	; 0x3d
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800594a:	7bfa      	ldrb	r2, [r7, #15]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	333c      	adds	r3, #60	; 0x3c
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800595e:	7bfa      	ldrb	r2, [r7, #15]
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	b298      	uxth	r0, r3
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3342      	adds	r3, #66	; 0x42
 8005972:	4602      	mov	r2, r0
 8005974:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	333f      	adds	r3, #63	; 0x3f
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3344      	adds	r3, #68	; 0x44
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800599e:	7bfa      	ldrb	r2, [r7, #15]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	3348      	adds	r3, #72	; 0x48
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059b2:	7bfa      	ldrb	r2, [r7, #15]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3350      	adds	r3, #80	; 0x50
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3301      	adds	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3af      	bcc.n	8005936 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
 80059da:	e044      	b.n	8005a66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059dc:	7bfa      	ldrb	r2, [r7, #15]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a04:	7bfa      	ldrb	r2, [r7, #15]
 8005a06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	3301      	adds	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	7bfa      	ldrb	r2, [r7, #15]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3b5      	bcc.n	80059dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	687e      	ldr	r6, [r7, #4]
 8005a78:	466d      	mov	r5, sp
 8005a7a:	f106 0410 	add.w	r4, r6, #16
 8005a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a8e:	1d33      	adds	r3, r6, #4
 8005a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a92:	6838      	ldr	r0, [r7, #0]
 8005a94:	f005 f904 	bl	800aca0 <USB_DevInit>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e014      	b.n	8005ad4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d102      	bne.n	8005ac8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f80a 	bl	8005adc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f005 faa6 	bl	800b01e <USB_DevDisconnect>

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005adc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_PCDEx_ActivateLPM+0x44>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	10000003 	.word	0x10000003

08005b24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b2c:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d00a      	beq.n	8005b4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b38:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d001      	beq.n	8005b4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e040      	b.n	8005bcc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e03e      	b.n	8005bcc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b56:	491f      	ldr	r1, [pc, #124]	; (8005bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b5e:	f7fc f8e5 	bl	8001d2c <HAL_GetTick>
 8005b62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b64:	e009      	b.n	8005b7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b66:	f7fc f8e1 	bl	8001d2c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b74:	d901      	bls.n	8005b7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e028      	b.n	8005bcc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	d1ee      	bne.n	8005b66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b1e      	cmp	r3, #30
 8005b8c:	d008      	beq.n	8005ba0 <HAL_PWREx_ConfigSupply+0x7c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b2e      	cmp	r3, #46	; 0x2e
 8005b92:	d005      	beq.n	8005ba0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b1d      	cmp	r3, #29
 8005b98:	d002      	beq.n	8005ba0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b2d      	cmp	r3, #45	; 0x2d
 8005b9e:	d114      	bne.n	8005bca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005ba0:	f7fc f8c4 	bl	8001d2c <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ba6:	e009      	b.n	8005bbc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ba8:	f7fc f8c0 	bl	8001d2c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb6:	d901      	bls.n	8005bbc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e007      	b.n	8005bcc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc8:	d1ee      	bne.n	8005ba8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024800 	.word	0x58024800

08005bd8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be6:	60d3      	str	r3, [r2, #12]
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	58024800 	.word	0x58024800

08005bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	; 0x30
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e3ff      	b.n	800640a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8087 	beq.w	8005d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c18:	4b99      	ldr	r3, [pc, #612]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c22:	4b97      	ldr	r3, [pc, #604]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d007      	beq.n	8005c3e <HAL_RCC_OscConfig+0x46>
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	2b18      	cmp	r3, #24
 8005c32:	d110      	bne.n	8005c56 <HAL_RCC_OscConfig+0x5e>
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d10b      	bne.n	8005c56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3e:	4b90      	ldr	r3, [pc, #576]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d06c      	beq.n	8005d24 <HAL_RCC_OscConfig+0x12c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d168      	bne.n	8005d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e3d9      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5e:	d106      	bne.n	8005c6e <HAL_RCC_OscConfig+0x76>
 8005c60:	4b87      	ldr	r3, [pc, #540]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a86      	ldr	r2, [pc, #536]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e02e      	b.n	8005ccc <HAL_RCC_OscConfig+0xd4>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x98>
 8005c76:	4b82      	ldr	r3, [pc, #520]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a81      	ldr	r2, [pc, #516]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a7e      	ldr	r2, [pc, #504]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e01d      	b.n	8005ccc <HAL_RCC_OscConfig+0xd4>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCC_OscConfig+0xbc>
 8005c9a:	4b79      	ldr	r3, [pc, #484]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a78      	ldr	r2, [pc, #480]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a75      	ldr	r2, [pc, #468]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e00b      	b.n	8005ccc <HAL_RCC_OscConfig+0xd4>
 8005cb4:	4b72      	ldr	r3, [pc, #456]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a71      	ldr	r2, [pc, #452]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b6f      	ldr	r3, [pc, #444]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6e      	ldr	r2, [pc, #440]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d013      	beq.n	8005cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fc f82a 	bl	8001d2c <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cdc:	f7fc f826 	bl	8001d2c <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b64      	cmp	r3, #100	; 0x64
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e38d      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cee:	4b64      	ldr	r3, [pc, #400]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCC_OscConfig+0xe4>
 8005cfa:	e014      	b.n	8005d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fc f816 	bl	8001d2c <HAL_GetTick>
 8005d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fc f812 	bl	8001d2c <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	; 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e379      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d16:	4b5a      	ldr	r3, [pc, #360]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x10c>
 8005d22:	e000      	b.n	8005d26 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80ae 	beq.w	8005e90 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d34:	4b52      	ldr	r3, [pc, #328]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d3e:	4b50      	ldr	r3, [pc, #320]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_RCC_OscConfig+0x162>
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	2b18      	cmp	r3, #24
 8005d4e:	d13a      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x1ce>
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d135      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d5a:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_OscConfig+0x17a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e34b      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d72:	f7fc f80b 	bl	8001d8c <HAL_GetREVID>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d817      	bhi.n	8005db0 <HAL_RCC_OscConfig+0x1b8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d108      	bne.n	8005d9a <HAL_RCC_OscConfig+0x1a2>
 8005d88:	4b3d      	ldr	r3, [pc, #244]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d90:	4a3b      	ldr	r2, [pc, #236]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d96:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d98:	e07a      	b.n	8005e90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9a:	4b39      	ldr	r3, [pc, #228]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	031b      	lsls	r3, r3, #12
 8005da8:	4935      	ldr	r1, [pc, #212]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dae:	e06f      	b.n	8005e90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db0:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	4930      	ldr	r1, [pc, #192]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc4:	e064      	b.n	8005e90 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d045      	beq.n	8005e5a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dce:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 0219 	bic.w	r2, r3, #25
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	4929      	ldr	r1, [pc, #164]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fb ffa4 	bl	8001d2c <HAL_GetTick>
 8005de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de8:	f7fb ffa0 	bl	8001d2c <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e307      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e06:	f7fb ffc1 	bl	8001d8c <HAL_GetREVID>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d817      	bhi.n	8005e44 <HAL_RCC_OscConfig+0x24c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d108      	bne.n	8005e2e <HAL_RCC_OscConfig+0x236>
 8005e1c:	4b18      	ldr	r3, [pc, #96]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e24:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e2a:	6053      	str	r3, [r2, #4]
 8005e2c:	e030      	b.n	8005e90 <HAL_RCC_OscConfig+0x298>
 8005e2e:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	031b      	lsls	r3, r3, #12
 8005e3c:	4910      	ldr	r1, [pc, #64]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	604b      	str	r3, [r1, #4]
 8005e42:	e025      	b.n	8005e90 <HAL_RCC_OscConfig+0x298>
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	061b      	lsls	r3, r3, #24
 8005e52:	490b      	ldr	r1, [pc, #44]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	604b      	str	r3, [r1, #4]
 8005e58:	e01a      	b.n	8005e90 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <HAL_RCC_OscConfig+0x288>)
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fb ff61 	bl	8001d2c <HAL_GetTick>
 8005e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e6e:	f7fb ff5d 	bl	8001d2c <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d903      	bls.n	8005e84 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e2c4      	b.n	800640a <HAL_RCC_OscConfig+0x812>
 8005e80:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e84:	4ba4      	ldr	r3, [pc, #656]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ee      	bne.n	8005e6e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80a9 	beq.w	8005ff0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e9e:	4b9e      	ldr	r3, [pc, #632]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ea8:	4b9b      	ldr	r3, [pc, #620]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d007      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x2cc>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b18      	cmp	r3, #24
 8005eb8:	d13a      	bne.n	8005f30 <HAL_RCC_OscConfig+0x338>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d135      	bne.n	8005f30 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ec4:	4b94      	ldr	r3, [pc, #592]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_OscConfig+0x2e4>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	2b80      	cmp	r3, #128	; 0x80
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e296      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005edc:	f7fb ff56 	bl	8001d8c <HAL_GetREVID>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d817      	bhi.n	8005f1a <HAL_RCC_OscConfig+0x322>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCC_OscConfig+0x30c>
 8005ef2:	4b89      	ldr	r3, [pc, #548]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005efa:	4a87      	ldr	r2, [pc, #540]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f02:	e075      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f04:	4b84      	ldr	r3, [pc, #528]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	069b      	lsls	r3, r3, #26
 8005f12:	4981      	ldr	r1, [pc, #516]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f18:	e06a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	061b      	lsls	r3, r3, #24
 8005f28:	497b      	ldr	r1, [pc, #492]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f2e:	e05f      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d042      	beq.n	8005fbe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f38:	4b77      	ldr	r3, [pc, #476]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a76      	ldr	r2, [pc, #472]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fb fef2 	bl	8001d2c <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f4c:	f7fb feee 	bl	8001d2c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e255      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f5e:	4b6e      	ldr	r3, [pc, #440]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f0      	beq.n	8005f4c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f6a:	f7fb ff0f 	bl	8001d8c <HAL_GetREVID>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d817      	bhi.n	8005fa8 <HAL_RCC_OscConfig+0x3b0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d108      	bne.n	8005f92 <HAL_RCC_OscConfig+0x39a>
 8005f80:	4b65      	ldr	r3, [pc, #404]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f88:	4a63      	ldr	r2, [pc, #396]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f8e:	6053      	str	r3, [r2, #4]
 8005f90:	e02e      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3f8>
 8005f92:	4b61      	ldr	r3, [pc, #388]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	069b      	lsls	r3, r3, #26
 8005fa0:	495d      	ldr	r1, [pc, #372]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
 8005fa6:	e023      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3f8>
 8005fa8:	4b5b      	ldr	r3, [pc, #364]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	061b      	lsls	r3, r3, #24
 8005fb6:	4958      	ldr	r1, [pc, #352]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60cb      	str	r3, [r1, #12]
 8005fbc:	e018      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005fbe:	4b56      	ldr	r3, [pc, #344]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a55      	ldr	r2, [pc, #340]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fca:	f7fb feaf 	bl	8001d2c <HAL_GetTick>
 8005fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005fd2:	f7fb feab 	bl	8001d2c <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e212      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1f0      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d036      	beq.n	800606a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d019      	beq.n	8006038 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006004:	4b44      	ldr	r3, [pc, #272]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8006006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006008:	4a43      	ldr	r2, [pc, #268]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006010:	f7fb fe8c 	bl	8001d2c <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006018:	f7fb fe88 	bl	8001d2c <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e1ef      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800602a:	4b3b      	ldr	r3, [pc, #236]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 800602c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f0      	beq.n	8006018 <HAL_RCC_OscConfig+0x420>
 8006036:	e018      	b.n	800606a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006038:	4b37      	ldr	r3, [pc, #220]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 800603a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603c:	4a36      	ldr	r2, [pc, #216]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006044:	f7fb fe72 	bl	8001d2c <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800604c:	f7fb fe6e 	bl	8001d2c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e1d5      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8006060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f0      	bne.n	800604c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d036      	beq.n	80060e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d019      	beq.n	80060b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800607e:	4b26      	ldr	r3, [pc, #152]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a25      	ldr	r2, [pc, #148]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8006084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006088:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800608a:	f7fb fe4f 	bl	8001d2c <HAL_GetTick>
 800608e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006092:	f7fb fe4b 	bl	8001d2c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e1b2      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x49a>
 80060b0:	e018      	b.n	80060e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 80060b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060be:	f7fb fe35 	bl	8001d2c <HAL_GetTick>
 80060c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060c6:	f7fb fe31 	bl	8001d2c <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e198      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060d8:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f0      	bne.n	80060c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8085 	beq.w	80061fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <HAL_RCC_OscConfig+0x524>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <HAL_RCC_OscConfig+0x524>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060fe:	f7fb fe15 	bl	8001d2c <HAL_GetTick>
 8006102:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006104:	e00c      	b.n	8006120 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006106:	f7fb fe11 	bl	8001d2c <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b64      	cmp	r3, #100	; 0x64
 8006112:	d905      	bls.n	8006120 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e178      	b.n	800640a <HAL_RCC_OscConfig+0x812>
 8006118:	58024400 	.word	0x58024400
 800611c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006120:	4b96      	ldr	r3, [pc, #600]	; (800637c <HAL_RCC_OscConfig+0x784>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0ec      	beq.n	8006106 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d106      	bne.n	8006142 <HAL_RCC_OscConfig+0x54a>
 8006134:	4b92      	ldr	r3, [pc, #584]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	4a91      	ldr	r2, [pc, #580]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	; 0x70
 8006140:	e02d      	b.n	800619e <HAL_RCC_OscConfig+0x5a6>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x56c>
 800614a:	4b8d      	ldr	r3, [pc, #564]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	4a8c      	ldr	r2, [pc, #560]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	6713      	str	r3, [r2, #112]	; 0x70
 8006156:	4b8a      	ldr	r3, [pc, #552]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a89      	ldr	r2, [pc, #548]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800615c:	f023 0304 	bic.w	r3, r3, #4
 8006160:	6713      	str	r3, [r2, #112]	; 0x70
 8006162:	e01c      	b.n	800619e <HAL_RCC_OscConfig+0x5a6>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b05      	cmp	r3, #5
 800616a:	d10c      	bne.n	8006186 <HAL_RCC_OscConfig+0x58e>
 800616c:	4b84      	ldr	r3, [pc, #528]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	4a83      	ldr	r2, [pc, #524]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	6713      	str	r3, [r2, #112]	; 0x70
 8006178:	4b81      	ldr	r3, [pc, #516]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	4a80      	ldr	r2, [pc, #512]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6713      	str	r3, [r2, #112]	; 0x70
 8006184:	e00b      	b.n	800619e <HAL_RCC_OscConfig+0x5a6>
 8006186:	4b7e      	ldr	r3, [pc, #504]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	4a7d      	ldr	r2, [pc, #500]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	6713      	str	r3, [r2, #112]	; 0x70
 8006192:	4b7b      	ldr	r3, [pc, #492]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a7a      	ldr	r2, [pc, #488]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006198:	f023 0304 	bic.w	r3, r3, #4
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d015      	beq.n	80061d2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a6:	f7fb fdc1 	bl	8001d2c <HAL_GetTick>
 80061aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ae:	f7fb fdbd 	bl	8001d2c <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e122      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061c4:	4b6e      	ldr	r3, [pc, #440]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0ee      	beq.n	80061ae <HAL_RCC_OscConfig+0x5b6>
 80061d0:	e014      	b.n	80061fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d2:	f7fb fdab 	bl	8001d2c <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fb fda7 	bl	8001d2c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e10c      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061f0:	4b63      	ldr	r3, [pc, #396]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ee      	bne.n	80061da <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8101 	beq.w	8006408 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006206:	4b5e      	ldr	r3, [pc, #376]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800620e:	2b18      	cmp	r3, #24
 8006210:	f000 80bc 	beq.w	800638c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b02      	cmp	r3, #2
 800621a:	f040 8095 	bne.w	8006348 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621e:	4b58      	ldr	r3, [pc, #352]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a57      	ldr	r2, [pc, #348]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fb fd7f 	bl	8001d2c <HAL_GetTick>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006232:	f7fb fd7b 	bl	8001d2c <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e0e2      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006244:	4b4e      	ldr	r3, [pc, #312]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006254:	4b4b      	ldr	r3, [pc, #300]	; (8006384 <HAL_RCC_OscConfig+0x78c>)
 8006256:	4013      	ands	r3, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006260:	0112      	lsls	r2, r2, #4
 8006262:	430a      	orrs	r2, r1
 8006264:	4946      	ldr	r1, [pc, #280]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006266:	4313      	orrs	r3, r2
 8006268:	628b      	str	r3, [r1, #40]	; 0x28
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	3b01      	subs	r3, #1
 8006270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	3b01      	subs	r3, #1
 800627a:	025b      	lsls	r3, r3, #9
 800627c:	b29b      	uxth	r3, r3
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	3b01      	subs	r3, #1
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	3b01      	subs	r3, #1
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800629a:	4939      	ldr	r1, [pc, #228]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800629c:	4313      	orrs	r3, r2
 800629e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062a0:	4b37      	ldr	r3, [pc, #220]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4a36      	ldr	r2, [pc, #216]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062ac:	4b34      	ldr	r3, [pc, #208]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b0:	4b35      	ldr	r3, [pc, #212]	; (8006388 <HAL_RCC_OscConfig+0x790>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062b8:	00d2      	lsls	r2, r2, #3
 80062ba:	4931      	ldr	r1, [pc, #196]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062c0:	4b2f      	ldr	r3, [pc, #188]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	f023 020c 	bic.w	r2, r3, #12
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	492c      	ldr	r1, [pc, #176]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062d2:	4b2b      	ldr	r3, [pc, #172]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	f023 0202 	bic.w	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	4928      	ldr	r1, [pc, #160]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062e4:	4b26      	ldr	r3, [pc, #152]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	4a25      	ldr	r2, [pc, #148]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062fc:	4b20      	ldr	r3, [pc, #128]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006308:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a19      	ldr	r2, [pc, #100]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800631a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800631e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fb fd04 	bl	8001d2c <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006328:	f7fb fd00 	bl	8001d2c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e067      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800633a:	4b11      	ldr	r3, [pc, #68]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x730>
 8006346:	e05f      	b.n	8006408 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 800634e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fb fcea 	bl	8001d2c <HAL_GetTick>
 8006358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635c:	f7fb fce6 	bl	8001d2c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e04d      	b.n	800640a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800636e:	4b04      	ldr	r3, [pc, #16]	; (8006380 <HAL_RCC_OscConfig+0x788>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x764>
 800637a:	e045      	b.n	8006408 <HAL_RCC_OscConfig+0x810>
 800637c:	58024800 	.word	0x58024800
 8006380:	58024400 	.word	0x58024400
 8006384:	fffffc0c 	.word	0xfffffc0c
 8006388:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800638c:	4b21      	ldr	r3, [pc, #132]	; (8006414 <HAL_RCC_OscConfig+0x81c>)
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <HAL_RCC_OscConfig+0x81c>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	2b01      	cmp	r3, #1
 800639e:	d031      	beq.n	8006404 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f003 0203 	and.w	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d12a      	bne.n	8006404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d122      	bne.n	8006404 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d11a      	bne.n	8006404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	0a5b      	lsrs	r3, r3, #9
 80063d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063dc:	429a      	cmp	r2, r3
 80063de:	d111      	bne.n	8006404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d108      	bne.n	8006404 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	0e1b      	lsrs	r3, r3, #24
 80063f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3730      	adds	r7, #48	; 0x30
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	58024400 	.word	0x58024400

08006418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e19c      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800642c:	4b8a      	ldr	r3, [pc, #552]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d910      	bls.n	800645c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b87      	ldr	r3, [pc, #540]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 020f 	bic.w	r2, r3, #15
 8006442:	4985      	ldr	r1, [pc, #532]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b83      	ldr	r3, [pc, #524]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e184      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	4b7b      	ldr	r3, [pc, #492]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006474:	429a      	cmp	r2, r3
 8006476:	d908      	bls.n	800648a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006478:	4b78      	ldr	r3, [pc, #480]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	4975      	ldr	r1, [pc, #468]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006486:	4313      	orrs	r3, r2
 8006488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	4b70      	ldr	r3, [pc, #448]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d908      	bls.n	80064b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064a6:	4b6d      	ldr	r3, [pc, #436]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	496a      	ldr	r1, [pc, #424]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	4b64      	ldr	r3, [pc, #400]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064d4:	4b61      	ldr	r3, [pc, #388]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	495e      	ldr	r1, [pc, #376]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d010      	beq.n	8006514 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	4b59      	ldr	r3, [pc, #356]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064fe:	429a      	cmp	r2, r3
 8006500:	d908      	bls.n	8006514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006502:	4b56      	ldr	r3, [pc, #344]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4953      	ldr	r1, [pc, #332]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006510:	4313      	orrs	r3, r2
 8006512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	4b4d      	ldr	r3, [pc, #308]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	429a      	cmp	r2, r3
 800652e:	d908      	bls.n	8006542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006530:	4b4a      	ldr	r3, [pc, #296]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f023 020f 	bic.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4947      	ldr	r1, [pc, #284]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800653e:	4313      	orrs	r3, r2
 8006540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d055      	beq.n	80065fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800654e:	4b43      	ldr	r3, [pc, #268]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4940      	ldr	r1, [pc, #256]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800655c:	4313      	orrs	r3, r2
 800655e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d107      	bne.n	8006578 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006568:	4b3c      	ldr	r3, [pc, #240]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d121      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0f6      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d107      	bne.n	8006590 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006580:	4b36      	ldr	r3, [pc, #216]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d115      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0ea      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0de      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0d6      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065b8:	4b28      	ldr	r3, [pc, #160]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f023 0207 	bic.w	r2, r3, #7
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4925      	ldr	r1, [pc, #148]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fb fbaf 	bl	8001d2c <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d2:	f7fb fbab 	bl	8001d2c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e0be      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d1eb      	bne.n	80065d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d010      	beq.n	8006628 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	429a      	cmp	r2, r3
 8006614:	d208      	bcs.n	8006628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006616:	4b11      	ldr	r3, [pc, #68]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f023 020f 	bic.w	r2, r3, #15
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	490e      	ldr	r1, [pc, #56]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006624:	4313      	orrs	r3, r2
 8006626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d214      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 020f 	bic.w	r2, r3, #15
 800663e:	4906      	ldr	r1, [pc, #24]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b04      	ldr	r3, [pc, #16]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d005      	beq.n	8006660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e086      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
 8006658:	52002000 	.word	0x52002000
 800665c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006678:	429a      	cmp	r2, r3
 800667a:	d208      	bcs.n	800668e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800667c:	4b3c      	ldr	r3, [pc, #240]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4939      	ldr	r1, [pc, #228]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 800668a:	4313      	orrs	r3, r2
 800668c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	4b34      	ldr	r3, [pc, #208]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d208      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	492e      	ldr	r1, [pc, #184]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	4b28      	ldr	r3, [pc, #160]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d208      	bcs.n	80066ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066d8:	4b25      	ldr	r3, [pc, #148]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	4922      	ldr	r1, [pc, #136]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006702:	429a      	cmp	r2, r3
 8006704:	d208      	bcs.n	8006718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4917      	ldr	r1, [pc, #92]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006714:	4313      	orrs	r3, r2
 8006716:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006718:	f000 f834 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	4912      	ldr	r1, [pc, #72]	; (8006774 <HAL_RCC_ClockConfig+0x35c>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <HAL_RCC_ClockConfig+0x35c>)
 8006740:	5cd3      	ldrb	r3, [r2, r3]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_RCC_ClockConfig+0x360>)
 800674e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_RCC_ClockConfig+0x364>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_RCC_ClockConfig+0x368>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fb fa9c 	bl	8001c98 <HAL_InitTick>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
 8006774:	0800b264 	.word	0x0800b264
 8006778:	24000004 	.word	0x24000004
 800677c:	24000000 	.word	0x24000000
 8006780:	24000018 	.word	0x24000018

08006784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006784:	b480      	push	{r7}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678a:	4bb3      	ldr	r3, [pc, #716]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006792:	2b18      	cmp	r3, #24
 8006794:	f200 8155 	bhi.w	8006a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	08006805 	.word	0x08006805
 80067a4:	08006a43 	.word	0x08006a43
 80067a8:	08006a43 	.word	0x08006a43
 80067ac:	08006a43 	.word	0x08006a43
 80067b0:	08006a43 	.word	0x08006a43
 80067b4:	08006a43 	.word	0x08006a43
 80067b8:	08006a43 	.word	0x08006a43
 80067bc:	08006a43 	.word	0x08006a43
 80067c0:	0800682b 	.word	0x0800682b
 80067c4:	08006a43 	.word	0x08006a43
 80067c8:	08006a43 	.word	0x08006a43
 80067cc:	08006a43 	.word	0x08006a43
 80067d0:	08006a43 	.word	0x08006a43
 80067d4:	08006a43 	.word	0x08006a43
 80067d8:	08006a43 	.word	0x08006a43
 80067dc:	08006a43 	.word	0x08006a43
 80067e0:	08006831 	.word	0x08006831
 80067e4:	08006a43 	.word	0x08006a43
 80067e8:	08006a43 	.word	0x08006a43
 80067ec:	08006a43 	.word	0x08006a43
 80067f0:	08006a43 	.word	0x08006a43
 80067f4:	08006a43 	.word	0x08006a43
 80067f8:	08006a43 	.word	0x08006a43
 80067fc:	08006a43 	.word	0x08006a43
 8006800:	08006837 	.word	0x08006837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006804:	4b94      	ldr	r3, [pc, #592]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006810:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	4a90      	ldr	r2, [pc, #576]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006822:	e111      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006824:	4b8d      	ldr	r3, [pc, #564]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006826:	61bb      	str	r3, [r7, #24]
    break;
 8006828:	e10e      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800682a:	4b8d      	ldr	r3, [pc, #564]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800682c:	61bb      	str	r3, [r7, #24]
    break;
 800682e:	e10b      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006830:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006832:	61bb      	str	r3, [r7, #24]
    break;
 8006834:	e108      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006840:	4b85      	ldr	r3, [pc, #532]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800684a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800684c:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006856:	4b80      	ldr	r3, [pc, #512]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	08db      	lsrs	r3, r3, #3
 800685c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	fb02 f303 	mul.w	r3, r2, r3
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80e1 	beq.w	8006a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b02      	cmp	r3, #2
 800687e:	f000 8083 	beq.w	8006988 <HAL_RCC_GetSysClockFreq+0x204>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f200 80a1 	bhi.w	80069cc <HAL_RCC_GetSysClockFreq+0x248>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x114>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d056      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006896:	e099      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006898:	4b6f      	ldr	r3, [pc, #444]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02d      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a4:	4b6c      	ldr	r3, [pc, #432]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	08db      	lsrs	r3, r3, #3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	4a6b      	ldr	r2, [pc, #428]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a02 	vldr	s12, [r7, #8]
 80068e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80068fe:	e087      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b51      	ldr	r3, [pc, #324]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a02 	vldr	s12, [r7, #8]
 8006926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006942:	e065      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a02 	vldr	s12, [r7, #8]
 800696a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006986:	e043      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ca:	e021      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a10:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	0a5b      	lsrs	r3, r3, #9
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a34:	ee17 3a90 	vmov	r3, s15
 8006a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a3a:	e005      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
    break;
 8006a40:	e002      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a44:	61bb      	str	r3, [r7, #24]
    break;
 8006a46:	bf00      	nop
  }

  return sysclockfreq;
 8006a48:	69bb      	ldr	r3, [r7, #24]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	007a1200 	.word	0x007a1200
 8006a68:	46000000 	.word	0x46000000
 8006a6c:	4c742400 	.word	0x4c742400
 8006a70:	4a742400 	.word	0x4a742400
 8006a74:	4af42400 	.word	0x4af42400

08006a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a7e:	f7ff fe81 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	490f      	ldr	r1, [pc, #60]	; (8006acc <HAL_RCC_GetHCLKFreq+0x54>)
 8006a90:	5ccb      	ldrb	r3, [r1, r3]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <HAL_RCC_GetHCLKFreq+0x54>)
 8006aa6:	5cd3      	ldrb	r3, [r2, r3]
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	0800b264 	.word	0x0800b264
 8006ad0:	24000004 	.word	0x24000004
 8006ad4:	24000000 	.word	0x24000000

08006ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006adc:	f7ff ffcc 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4904      	ldr	r1, [pc, #16]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	58024400 	.word	0x58024400
 8006b00:	0800b264 	.word	0x0800b264

08006b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b08:	f7ff ffb6 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b1a:	5ccb      	ldrb	r3, [r1, r3]
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	0800b264 	.word	0x0800b264

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d03f      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b54:	d02a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b5a:	d824      	bhi.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b60:	d018      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b66:	d81e      	bhi.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b70:	d007      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b72:	e018      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b74:	4bab      	ldr	r3, [pc, #684]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4aaa      	ldr	r2, [pc, #680]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b80:	e015      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2102      	movs	r1, #2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f9cf 	bl	8007f2c <RCCEx_PLL2_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b92:	e00c      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3324      	adds	r3, #36	; 0x24
 8006b98:	2102      	movs	r1, #2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 fa78 	bl	8008090 <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bb4:	4b9b      	ldr	r3, [pc, #620]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc0:	4998      	ldr	r1, [pc, #608]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8006bc6:	e001      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d03d      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d826      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bfd 	.word	0x08006bfd
 8006bec:	08006c0b 	.word	0x08006c0b
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c35 	.word	0x08006c35
 8006bf8:	08006c35 	.word	0x08006c35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfc:	4b89      	ldr	r3, [pc, #548]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a88      	ldr	r2, [pc, #544]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c08:	e015      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 f98b 	bl	8007f2c <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c1a:	e00c      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fa34 	bl	8008090 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c3c:	4b79      	ldr	r3, [pc, #484]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c40:	f023 0207 	bic.w	r2, r3, #7
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	4976      	ldr	r1, [pc, #472]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8006c4e:	e001      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d042      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c68:	d02b      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6e:	d825      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c70:	2bc0      	cmp	r3, #192	; 0xc0
 8006c72:	d028      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c74:	2bc0      	cmp	r3, #192	; 0xc0
 8006c76:	d821      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d016      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006c7c:	2b80      	cmp	r3, #128	; 0x80
 8006c7e:	d81d      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d007      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006c88:	e018      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8a:	4b66      	ldr	r3, [pc, #408]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	4a65      	ldr	r2, [pc, #404]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006c96:	e017      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 f944 	bl	8007f2c <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ca8:	e00e      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	; 0x24
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f9ed 	bl	8008090 <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cba:	e005      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e002      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006cce:	4b55      	ldr	r3, [pc, #340]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	4952      	ldr	r1, [pc, #328]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	650b      	str	r3, [r1, #80]	; 0x50
 8006ce0:	e001      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d049      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cfc:	d030      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d02:	d82a      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d08:	d02c      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006d0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d0e:	d824      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d14:	d018      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d1a:	d81e      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d24:	d007      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d26:	e018      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d28:	4b3e      	ldr	r3, [pc, #248]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	4a3d      	ldr	r2, [pc, #244]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d34:	e017      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 f8f5 	bl	8007f2c <RCCEx_PLL2_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d46:	e00e      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 f99e 	bl	8008090 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d58:	e005      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	e002      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006d60:	bf00      	nop
 8006d62:	e000      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d6c:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d7a:	492a      	ldr	r1, [pc, #168]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8006d80:	e001      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04c      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d9c:	d030      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006da2:	d82a      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006da4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006da8:	d02c      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006daa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dae:	d824      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006db4:	d018      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006db6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dba:	d81e      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dc4:	d007      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006dc6:	e018      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc8:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dd4:	e017      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 f8a5 	bl	8007f2c <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006de6:	e00e      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3324      	adds	r3, #36	; 0x24
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 f94e 	bl	8008090 <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006df8:	e005      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e1a:	4902      	ldr	r1, [pc, #8]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e20:	e004      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006e22:	bf00      	nop
 8006e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d032      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3c:	2b30      	cmp	r3, #48	; 0x30
 8006e3e:	d01c      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e40:	2b30      	cmp	r3, #48	; 0x30
 8006e42:	d817      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d00c      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d813      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d016      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d10f      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4baf      	ldr	r3, [pc, #700]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	4aae      	ldr	r2, [pc, #696]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e60:	e00e      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3304      	adds	r3, #4
 8006e66:	2102      	movs	r1, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 f85f 	bl	8007f2c <RCCEx_PLL2_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e72:	e005      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	75fb      	strb	r3, [r7, #23]
      break;
 8006e78:	e002      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e86:	4ba3      	ldr	r3, [pc, #652]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	49a0      	ldr	r1, [pc, #640]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e98:	e001      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d047      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb2:	d030      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb8:	d82a      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006eba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ebe:	d02c      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006ec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ec4:	d824      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eca:	d018      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed0:	d81e      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eda:	d007      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006edc:	e018      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ede:	4b8d      	ldr	r3, [pc, #564]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a8c      	ldr	r2, [pc, #560]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006eea:	e017      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 f81a 	bl	8007f2c <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006efc:	e00e      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3324      	adds	r3, #36	; 0x24
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 f8c3 	bl	8008090 <RCCEx_PLL3_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f0e:	e005      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
      break;
 8006f14:	e002      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006f16:	bf00      	nop
 8006f18:	e000      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f22:	4b7c      	ldr	r3, [pc, #496]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f26:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2e:	4979      	ldr	r1, [pc, #484]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	650b      	str	r3, [r1, #80]	; 0x50
 8006f34:	e001      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
 8006f38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d049      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f4e:	d02e      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f54:	d828      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f5a:	d02a      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006f5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f60:	d822      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f66:	d026      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f6c:	d81c      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f72:	d010      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f78:	d816      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01d      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f82:	d111      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3304      	adds	r3, #4
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 ffce 	bl	8007f2c <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f94:	e012      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3324      	adds	r3, #36	; 0x24
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 f877 	bl	8008090 <RCCEx_PLL3_Config>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fa6:	e009      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
      break;
 8006fac:	e006      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e004      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fc2:	4b54      	ldr	r3, [pc, #336]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fce:	4951      	ldr	r1, [pc, #324]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	650b      	str	r3, [r1, #80]	; 0x50
 8006fd4:	e001      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d04b      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff0:	d02e      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff6:	d828      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffc:	d02a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d822      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007008:	d026      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800700a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800700e:	d81c      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007014:	d010      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701a:	d816      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01d      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007024:	d111      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3304      	adds	r3, #4
 800702a:	2101      	movs	r1, #1
 800702c:	4618      	mov	r0, r3
 800702e:	f000 ff7d 	bl	8007f2c <RCCEx_PLL2_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007036:	e012      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3324      	adds	r3, #36	; 0x24
 800703c:	2101      	movs	r1, #1
 800703e:	4618      	mov	r0, r3
 8007040:	f001 f826 	bl	8008090 <RCCEx_PLL3_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007048:	e009      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
      break;
 800704e:	e006      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007050:	bf00      	nop
 8007052:	e004      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800705c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007068:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007072:	4928      	ldr	r1, [pc, #160]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007074:	4313      	orrs	r3, r2
 8007076:	658b      	str	r3, [r1, #88]	; 0x58
 8007078:	e001      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d02f      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007092:	d00e      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007098:	d814      	bhi.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d015      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800709e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070a2:	d10f      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a4:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070b0:	e00c      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2101      	movs	r1, #1
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 ff37 	bl	8007f2c <RCCEx_PLL2_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070c2:	e003      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
      break;
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80070ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070de:	490d      	ldr	r1, [pc, #52]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	650b      	str	r3, [r1, #80]	; 0x50
 80070e4:	e001      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d033      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d81c      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	0800713f 	.word	0x0800713f
 8007108:	08007119 	.word	0x08007119
 800710c:	08007127 	.word	0x08007127
 8007110:	0800713f 	.word	0x0800713f
 8007114:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007118:	4bb8      	ldr	r3, [pc, #736]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	4ab7      	ldr	r2, [pc, #732]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800711e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007124:	e00c      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3304      	adds	r3, #4
 800712a:	2102      	movs	r1, #2
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fefd 	bl	8007f2c <RCCEx_PLL2_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007136:	e003      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
      break;
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800713e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007146:	4bad      	ldr	r3, [pc, #692]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	f023 0203 	bic.w	r2, r3, #3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	49aa      	ldr	r1, [pc, #680]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007154:	4313      	orrs	r3, r2
 8007156:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007158:	e001      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8086 	beq.w	8007278 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800716c:	4ba4      	ldr	r3, [pc, #656]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4aa3      	ldr	r2, [pc, #652]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007178:	f7fa fdd8 	bl	8001d2c <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800717e:	e009      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007180:	f7fa fdd4 	bl	8001d2c <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d902      	bls.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	75fb      	strb	r3, [r7, #23]
        break;
 8007192:	e005      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007194:	4b9a      	ldr	r3, [pc, #616]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ef      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d166      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071a6:	4b95      	ldr	r3, [pc, #596]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071b0:	4053      	eors	r3, r2
 80071b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d013      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071ba:	4b90      	ldr	r3, [pc, #576]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071c4:	4b8d      	ldr	r3, [pc, #564]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c8:	4a8c      	ldr	r2, [pc, #560]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071d0:	4b8a      	ldr	r3, [pc, #552]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d4:	4a89      	ldr	r2, [pc, #548]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071dc:	4a87      	ldr	r2, [pc, #540]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ec:	d115      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ee:	f7fa fd9d 	bl	8001d2c <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071f4:	e00b      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f6:	f7fa fd99 	bl	8001d2c <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	f241 3288 	movw	r2, #5000	; 0x1388
 8007204:	4293      	cmp	r3, r2
 8007206:	d902      	bls.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	75fb      	strb	r3, [r7, #23]
            break;
 800720c:	e005      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800720e:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ed      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d126      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800722e:	d10d      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007230:	4b72      	ldr	r3, [pc, #456]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800723e:	0919      	lsrs	r1, r3, #4
 8007240:	4b70      	ldr	r3, [pc, #448]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007242:	400b      	ands	r3, r1
 8007244:	496d      	ldr	r1, [pc, #436]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007246:	4313      	orrs	r3, r2
 8007248:	610b      	str	r3, [r1, #16]
 800724a:	e005      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800724c:	4b6b      	ldr	r3, [pc, #428]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	4a6a      	ldr	r2, [pc, #424]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007252:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007256:	6113      	str	r3, [r2, #16]
 8007258:	4b68      	ldr	r3, [pc, #416]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800725a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007266:	4965      	ldr	r1, [pc, #404]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007268:	4313      	orrs	r3, r2
 800726a:	670b      	str	r3, [r1, #112]	; 0x70
 800726c:	e004      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	75bb      	strb	r3, [r7, #22]
 8007272:	e001      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d07e      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007288:	2b28      	cmp	r3, #40	; 0x28
 800728a:	d867      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	08007363 	.word	0x08007363
 8007298:	0800735d 	.word	0x0800735d
 800729c:	0800735d 	.word	0x0800735d
 80072a0:	0800735d 	.word	0x0800735d
 80072a4:	0800735d 	.word	0x0800735d
 80072a8:	0800735d 	.word	0x0800735d
 80072ac:	0800735d 	.word	0x0800735d
 80072b0:	0800735d 	.word	0x0800735d
 80072b4:	08007339 	.word	0x08007339
 80072b8:	0800735d 	.word	0x0800735d
 80072bc:	0800735d 	.word	0x0800735d
 80072c0:	0800735d 	.word	0x0800735d
 80072c4:	0800735d 	.word	0x0800735d
 80072c8:	0800735d 	.word	0x0800735d
 80072cc:	0800735d 	.word	0x0800735d
 80072d0:	0800735d 	.word	0x0800735d
 80072d4:	0800734b 	.word	0x0800734b
 80072d8:	0800735d 	.word	0x0800735d
 80072dc:	0800735d 	.word	0x0800735d
 80072e0:	0800735d 	.word	0x0800735d
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	0800735d 	.word	0x0800735d
 80072ec:	0800735d 	.word	0x0800735d
 80072f0:	0800735d 	.word	0x0800735d
 80072f4:	08007363 	.word	0x08007363
 80072f8:	0800735d 	.word	0x0800735d
 80072fc:	0800735d 	.word	0x0800735d
 8007300:	0800735d 	.word	0x0800735d
 8007304:	0800735d 	.word	0x0800735d
 8007308:	0800735d 	.word	0x0800735d
 800730c:	0800735d 	.word	0x0800735d
 8007310:	0800735d 	.word	0x0800735d
 8007314:	08007363 	.word	0x08007363
 8007318:	0800735d 	.word	0x0800735d
 800731c:	0800735d 	.word	0x0800735d
 8007320:	0800735d 	.word	0x0800735d
 8007324:	0800735d 	.word	0x0800735d
 8007328:	0800735d 	.word	0x0800735d
 800732c:	0800735d 	.word	0x0800735d
 8007330:	0800735d 	.word	0x0800735d
 8007334:	08007363 	.word	0x08007363
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	2101      	movs	r1, #1
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fdf4 	bl	8007f2c <RCCEx_PLL2_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007348:	e00c      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3324      	adds	r3, #36	; 0x24
 800734e:	2101      	movs	r1, #1
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fe9d 	bl	8008090 <RCCEx_PLL3_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800735a:	e003      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
      break;
 8007360:	e000      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007376:	4921      	ldr	r1, [pc, #132]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007378:	4313      	orrs	r3, r2
 800737a:	654b      	str	r3, [r1, #84]	; 0x54
 800737c:	e001      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d03e      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007392:	2b05      	cmp	r3, #5
 8007394:	d820      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073df 	.word	0x080073df
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073c7 	.word	0x080073c7
 80073a8:	080073df 	.word	0x080073df
 80073ac:	080073df 	.word	0x080073df
 80073b0:	080073df 	.word	0x080073df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	2101      	movs	r1, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fdb6 	bl	8007f2c <RCCEx_PLL2_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80073c4:	e00c      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	2101      	movs	r1, #1
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fe5f 	bl	8008090 <RCCEx_PLL3_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
      break;
 80073dc:	e000      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80073de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d110      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073e6:	4b05      	ldr	r3, [pc, #20]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	f023 0207 	bic.w	r2, r3, #7
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f2:	4902      	ldr	r1, [pc, #8]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	654b      	str	r3, [r1, #84]	; 0x54
 80073f8:	e008      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80073fa:	bf00      	nop
 80073fc:	58024400 	.word	0x58024400
 8007400:	58024800 	.word	0x58024800
 8007404:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d039      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	2b05      	cmp	r3, #5
 8007420:	d820      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	0800746b 	.word	0x0800746b
 800742c:	08007441 	.word	0x08007441
 8007430:	08007453 	.word	0x08007453
 8007434:	0800746b 	.word	0x0800746b
 8007438:	0800746b 	.word	0x0800746b
 800743c:	0800746b 	.word	0x0800746b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	2101      	movs	r1, #1
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fd70 	bl	8007f2c <RCCEx_PLL2_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007450:	e00c      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3324      	adds	r3, #36	; 0x24
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fe19 	bl	8008090 <RCCEx_PLL3_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007462:	e003      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
      break;
 8007468:	e000      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800746a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007472:	4bb7      	ldr	r3, [pc, #732]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	f023 0207 	bic.w	r2, r3, #7
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007480:	49b3      	ldr	r1, [pc, #716]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007482:	4313      	orrs	r3, r2
 8007484:	658b      	str	r3, [r1, #88]	; 0x58
 8007486:	e001      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b00      	cmp	r3, #0
 8007496:	d04b      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a2:	d02e      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80074a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a8:	d828      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ae:	d02a      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80074b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b4:	d822      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074ba:	d026      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80074bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074c0:	d81c      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c6:	d010      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80074c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074cc:	d816      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01d      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80074d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d6:	d111      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fd24 	bl	8007f2c <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074e8:	e012      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3324      	adds	r3, #36	; 0x24
 80074ee:	2102      	movs	r1, #2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fdcd 	bl	8008090 <RCCEx_PLL3_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074fa:	e009      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007502:	bf00      	nop
 8007504:	e004      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800750e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007516:	4b8e      	ldr	r3, [pc, #568]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007524:	498a      	ldr	r1, [pc, #552]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007526:	4313      	orrs	r3, r2
 8007528:	654b      	str	r3, [r1, #84]	; 0x54
 800752a:	e001      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d04b      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007542:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007546:	d02e      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007548:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800754c:	d828      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800754e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007552:	d02a      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007558:	d822      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800755a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800755e:	d026      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007564:	d81c      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756a:	d010      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800756c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007570:	d816      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01d      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800757a:	d111      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3304      	adds	r3, #4
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fcd2 	bl	8007f2c <RCCEx_PLL2_Config>
 8007588:	4603      	mov	r3, r0
 800758a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800758c:	e012      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3324      	adds	r3, #36	; 0x24
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fd7b 	bl	8008090 <RCCEx_PLL3_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800759e:	e009      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	75fb      	strb	r3, [r7, #23]
      break;
 80075a4:	e006      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075a6:	bf00      	nop
 80075a8:	e004      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075aa:	bf00      	nop
 80075ac:	e002      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80075b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075ba:	4b65      	ldr	r3, [pc, #404]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075c8:	4961      	ldr	r1, [pc, #388]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	658b      	str	r3, [r1, #88]	; 0x58
 80075ce:	e001      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d04b      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075ea:	d02e      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80075ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075f0:	d828      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80075f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f6:	d02a      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80075f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fc:	d822      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80075fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007602:	d026      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007604:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007608:	d81c      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800760a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800760e:	d010      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007614:	d816      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01d      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800761a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761e:	d111      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fc80 	bl	8007f2c <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007630:	e012      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3324      	adds	r3, #36	; 0x24
 8007636:	2102      	movs	r1, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fd29 	bl	8008090 <RCCEx_PLL3_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007642:	e009      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	75fb      	strb	r3, [r7, #23]
      break;
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800764a:	bf00      	nop
 800764c:	e004      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800764e:	bf00      	nop
 8007650:	e002      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007652:	bf00      	nop
 8007654:	e000      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800765e:	4b3c      	ldr	r3, [pc, #240]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800766c:	4938      	ldr	r1, [pc, #224]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800766e:	4313      	orrs	r3, r2
 8007670:	658b      	str	r3, [r1, #88]	; 0x58
 8007672:	e001      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01a      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768e:	d10a      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3324      	adds	r3, #36	; 0x24
 8007694:	2102      	movs	r1, #2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fcfa 	bl	8008090 <RCCEx_PLL3_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076a6:	4b2a      	ldr	r3, [pc, #168]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b4:	4926      	ldr	r1, [pc, #152]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01a      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d0:	d10a      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3324      	adds	r3, #36	; 0x24
 80076d6:	2102      	movs	r1, #2
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fcd9 	bl	8008090 <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076f6:	4916      	ldr	r1, [pc, #88]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d036      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800770e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007712:	d01f      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007718:	d817      	bhi.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800771e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007722:	d009      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007724:	e011      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fbfd 	bl	8007f2c <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007736:	e00e      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3324      	adds	r3, #36	; 0x24
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fca6 	bl	8008090 <RCCEx_PLL3_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007748:	e005      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
      break;
 800774e:	e002      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007750:	58024400 	.word	0x58024400
      break;
 8007754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800775c:	4b93      	ldr	r3, [pc, #588]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800775e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800776a:	4990      	ldr	r1, [pc, #576]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800776c:	4313      	orrs	r3, r2
 800776e:	658b      	str	r3, [r1, #88]	; 0x58
 8007770:	e001      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d033      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800778c:	d01c      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800778e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007792:	d816      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007798:	d003      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800779a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800779e:	d007      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80077a0:	e00f      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a2:	4b82      	ldr	r3, [pc, #520]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	4a81      	ldr	r2, [pc, #516]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80077ae:	e00c      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3324      	adds	r3, #36	; 0x24
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fc6a 	bl	8008090 <RCCEx_PLL3_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80077c0:	e003      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75fb      	strb	r3, [r7, #23]
      break;
 80077c6:	e000      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80077c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077d0:	4b76      	ldr	r3, [pc, #472]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077de:	4973      	ldr	r1, [pc, #460]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	654b      	str	r3, [r1, #84]	; 0x54
 80077e4:	e001      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d029      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80077fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007802:	d007      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007804:	e00f      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007806:	4b69      	ldr	r3, [pc, #420]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	4a68      	ldr	r2, [pc, #416]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800780c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007812:	e00b      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	2102      	movs	r1, #2
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fb86 	bl	8007f2c <RCCEx_PLL2_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007824:	e002      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
      break;
 800782a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007832:	4b5e      	ldr	r3, [pc, #376]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007836:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	495b      	ldr	r1, [pc, #364]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007840:	4313      	orrs	r3, r2
 8007842:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007844:	e001      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3324      	adds	r3, #36	; 0x24
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fc17 	bl	8008090 <RCCEx_PLL3_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d030      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800787c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007880:	d017      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007886:	d811      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788c:	d013      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800788e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007892:	d80b      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789c:	d106      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789e:	4b43      	ldr	r3, [pc, #268]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	4a42      	ldr	r2, [pc, #264]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80078aa:	e007      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
      break;
 80078b0:	e004      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078b2:	bf00      	nop
 80078b4:	e002      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078b6:	bf00      	nop
 80078b8:	e000      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80078ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078c2:	4b3a      	ldr	r3, [pc, #232]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ce:	4937      	ldr	r1, [pc, #220]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	654b      	str	r3, [r1, #84]	; 0x54
 80078d4:	e001      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078e6:	4b31      	ldr	r3, [pc, #196]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f2:	492e      	ldr	r1, [pc, #184]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007904:	4b29      	ldr	r3, [pc, #164]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007912:	4926      	ldr	r1, [pc, #152]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007914:	4313      	orrs	r3, r2
 8007916:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007924:	4b21      	ldr	r3, [pc, #132]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007928:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007930:	491e      	ldr	r1, [pc, #120]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007932:	4313      	orrs	r3, r2
 8007934:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007942:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	4a19      	ldr	r2, [pc, #100]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800794c:	6113      	str	r3, [r2, #16]
 800794e:	4b17      	ldr	r3, [pc, #92]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007958:	4914      	ldr	r1, [pc, #80]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800795a:	4313      	orrs	r3, r2
 800795c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	da08      	bge.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007966:	4b11      	ldr	r3, [pc, #68]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007972:	490e      	ldr	r1, [pc, #56]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007974:	4313      	orrs	r3, r2
 8007976:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007992:	4906      	ldr	r1, [pc, #24]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007998:	7dbb      	ldrb	r3, [r7, #22]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	e000      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	58024400 	.word	0x58024400

080079b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079b4:	f7ff f860 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 80079b8:	4602      	mov	r2, r0
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	4904      	ldr	r1, [pc, #16]	; (80079d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079c6:	5ccb      	ldrb	r3, [r1, r3]
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	58024400 	.word	0x58024400
 80079d8:	0800b264 	.word	0x0800b264

080079dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	; 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079e4:	4ba1      	ldr	r3, [pc, #644]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80079ee:	4b9f      	ldr	r3, [pc, #636]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	0b1b      	lsrs	r3, r3, #12
 80079f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079fa:	4b9c      	ldr	r3, [pc, #624]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a06:	4b99      	ldr	r3, [pc, #612]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0a:	08db      	lsrs	r3, r3, #3
 8007a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8111 	beq.w	8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	f000 8083 	beq.w	8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	f200 80a1 	bhi.w	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d056      	beq.n	8007af4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a46:	e099      	b.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a48:	4b88      	ldr	r3, [pc, #544]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02d      	beq.n	8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a54:	4b85      	ldr	r3, [pc, #532]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	08db      	lsrs	r3, r3, #3
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	4a84      	ldr	r2, [pc, #528]	; (8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
 8007a64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7e:	4b7b      	ldr	r3, [pc, #492]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007aae:	e087      	b.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac2:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007af2:	e065      	b.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b06:	4b59      	ldr	r3, [pc, #356]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b36:	e043      	b.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	4b48      	ldr	r3, [pc, #288]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b7a:	e021      	b.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8e:	4b37      	ldr	r3, [pc, #220]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007bc0:	4b2a      	ldr	r3, [pc, #168]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc4:	0a5b      	lsrs	r3, r3, #9
 8007bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be6:	ee17 2a90 	vmov	r2, s15
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007bee:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	0c1b      	lsrs	r3, r3, #16
 8007bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c14:	ee17 2a90 	vmov	r2, s15
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c1c:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c42:	ee17 2a90 	vmov	r2, s15
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c4a:	e008      	b.n	8007c5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	609a      	str	r2, [r3, #8]
}
 8007c5e:	bf00      	nop
 8007c60:	3724      	adds	r7, #36	; 0x24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	03d09000 	.word	0x03d09000
 8007c74:	46000000 	.word	0x46000000
 8007c78:	4c742400 	.word	0x4c742400
 8007c7c:	4a742400 	.word	0x4a742400
 8007c80:	4af42400 	.word	0x4af42400

08007c84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c8c:	4ba1      	ldr	r3, [pc, #644]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007c96:	4b9f      	ldr	r3, [pc, #636]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	0d1b      	lsrs	r3, r3, #20
 8007c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ca0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ca2:	4b9c      	ldr	r3, [pc, #624]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007cae:	4b99      	ldr	r3, [pc, #612]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb2:	08db      	lsrs	r3, r3, #3
 8007cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8111 	beq.w	8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	f000 8083 	beq.w	8007de0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f200 80a1 	bhi.w	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d056      	beq.n	8007d9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cee:	e099      	b.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf0:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02d      	beq.n	8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cfc:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	08db      	lsrs	r3, r3, #3
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	4a84      	ldr	r2, [pc, #528]	; (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d08:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	ee07 3a90 	vmov	s15, r3
 8007d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d26:	4b7b      	ldr	r3, [pc, #492]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d56:	e087      	b.n	8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6a:	4b6a      	ldr	r3, [pc, #424]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d9a:	e065      	b.n	8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dde:	e043      	b.n	8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df2:	4b48      	ldr	r3, [pc, #288]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e22:	e021      	b.n	8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e36:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e68:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	0a5b      	lsrs	r3, r3, #9
 8007e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8e:	ee17 2a90 	vmov	r2, s15
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ebc:	ee17 2a90 	vmov	r2, s15
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ec4:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	0e1b      	lsrs	r3, r3, #24
 8007eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eea:	ee17 2a90 	vmov	r2, s15
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ef2:	e008      	b.n	8007f06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]
}
 8007f06:	bf00      	nop
 8007f08:	3724      	adds	r7, #36	; 0x24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	46000000 	.word	0x46000000
 8007f20:	4c742400 	.word	0x4c742400
 8007f24:	4a742400 	.word	0x4a742400
 8007f28:	4af42400 	.word	0x4af42400

08007f2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f3a:	4b53      	ldr	r3, [pc, #332]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d101      	bne.n	8007f4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e099      	b.n	800807e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f4a:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a4e      	ldr	r2, [pc, #312]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f56:	f7f9 fee9 	bl	8001d2c <HAL_GetTick>
 8007f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f5c:	e008      	b.n	8007f70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f5e:	f7f9 fee5 	bl	8001d2c <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d901      	bls.n	8007f70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e086      	b.n	800807e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f70:	4b45      	ldr	r3, [pc, #276]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f0      	bne.n	8007f5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f7c:	4b42      	ldr	r3, [pc, #264]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	031b      	lsls	r3, r3, #12
 8007f8a:	493f      	ldr	r1, [pc, #252]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	025b      	lsls	r3, r3, #9
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fc0:	4931      	ldr	r1, [pc, #196]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fc6:	4b30      	ldr	r3, [pc, #192]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	492d      	ldr	r1, [pc, #180]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fd8:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	f023 0220 	bic.w	r2, r3, #32
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	4928      	ldr	r1, [pc, #160]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fea:	4b27      	ldr	r3, [pc, #156]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	4a26      	ldr	r2, [pc, #152]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	f023 0310 	bic.w	r3, r3, #16
 8007ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <RCCEx_PLL2_Config+0x160>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	69d2      	ldr	r2, [r2, #28]
 8008002:	00d2      	lsls	r2, r2, #3
 8008004:	4920      	ldr	r1, [pc, #128]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008006:	4313      	orrs	r3, r2
 8008008:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800800a:	4b1f      	ldr	r3, [pc, #124]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008010:	f043 0310 	orr.w	r3, r3, #16
 8008014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800801c:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4a19      	ldr	r2, [pc, #100]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008028:	e00f      	b.n	800804a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d106      	bne.n	800803e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008030:	4b15      	ldr	r3, [pc, #84]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	4a14      	ldr	r2, [pc, #80]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800803a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800803c:	e005      	b.n	800804a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a11      	ldr	r2, [pc, #68]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a0e      	ldr	r2, [pc, #56]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008056:	f7f9 fe69 	bl	8001d2c <HAL_GetTick>
 800805a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800805c:	e008      	b.n	8008070 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800805e:	f7f9 fe65 	bl	8001d2c <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e006      	b.n	800807e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0f0      	beq.n	800805e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	58024400 	.word	0x58024400
 800808c:	ffff0007 	.word	0xffff0007

08008090 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800809e:	4b53      	ldr	r3, [pc, #332]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d101      	bne.n	80080ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e099      	b.n	80081e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080ae:	4b4f      	ldr	r3, [pc, #316]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a4e      	ldr	r2, [pc, #312]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ba:	f7f9 fe37 	bl	8001d2c <HAL_GetTick>
 80080be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080c0:	e008      	b.n	80080d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080c2:	f7f9 fe33 	bl	8001d2c <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e086      	b.n	80081e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080d4:	4b45      	ldr	r3, [pc, #276]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f0      	bne.n	80080c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080e0:	4b42      	ldr	r3, [pc, #264]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	051b      	lsls	r3, r3, #20
 80080ee:	493f      	ldr	r1, [pc, #252]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	628b      	str	r3, [r1, #40]	; 0x28
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	3b01      	subs	r3, #1
 8008104:	025b      	lsls	r3, r3, #9
 8008106:	b29b      	uxth	r3, r3
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	3b01      	subs	r3, #1
 8008110:	041b      	lsls	r3, r3, #16
 8008112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	3b01      	subs	r3, #1
 800811e:	061b      	lsls	r3, r3, #24
 8008120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008124:	4931      	ldr	r1, [pc, #196]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800812a:	4b30      	ldr	r3, [pc, #192]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	492d      	ldr	r1, [pc, #180]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008138:	4313      	orrs	r3, r2
 800813a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800813c:	4b2b      	ldr	r3, [pc, #172]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	4928      	ldr	r1, [pc, #160]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800814e:	4b27      	ldr	r3, [pc, #156]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	4a26      	ldr	r2, [pc, #152]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800815a:	4b24      	ldr	r3, [pc, #144]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800815c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800815e:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <RCCEx_PLL3_Config+0x160>)
 8008160:	4013      	ands	r3, r2
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	69d2      	ldr	r2, [r2, #28]
 8008166:	00d2      	lsls	r2, r2, #3
 8008168:	4920      	ldr	r1, [pc, #128]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800816a:	4313      	orrs	r3, r2
 800816c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800816e:	4b1f      	ldr	r3, [pc, #124]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	4a1e      	ldr	r2, [pc, #120]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	4a19      	ldr	r2, [pc, #100]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800818a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800818c:	e00f      	b.n	80081ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d106      	bne.n	80081a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008194:	4b15      	ldr	r3, [pc, #84]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4a14      	ldr	r2, [pc, #80]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800819a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800819e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081a0:	e005      	b.n	80081ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	4a11      	ldr	r2, [pc, #68]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a0e      	ldr	r2, [pc, #56]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ba:	f7f9 fdb7 	bl	8001d2c <HAL_GetTick>
 80081be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081c0:	e008      	b.n	80081d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081c2:	f7f9 fdb3 	bl	8001d2c <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e006      	b.n	80081e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0f0      	beq.n	80081c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	58024400 	.word	0x58024400
 80081f0:	ffff0007 	.word	0xffff0007

080081f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e0eb      	b.n	80083e2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a75      	ldr	r2, [pc, #468]	; (80083ec <HAL_SPI_Init+0x1f8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00f      	beq.n	800823a <HAL_SPI_Init+0x46>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a74      	ldr	r2, [pc, #464]	; (80083f0 <HAL_SPI_Init+0x1fc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00a      	beq.n	800823a <HAL_SPI_Init+0x46>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a72      	ldr	r2, [pc, #456]	; (80083f4 <HAL_SPI_Init+0x200>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d005      	beq.n	800823a <HAL_SPI_Init+0x46>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	d901      	bls.n	800823a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e0d3      	b.n	80083e2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 ff62 	bl	8009104 <SPI_GetPacketSize>
 8008240:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a69      	ldr	r2, [pc, #420]	; (80083ec <HAL_SPI_Init+0x1f8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00c      	beq.n	8008266 <HAL_SPI_Init+0x72>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a67      	ldr	r2, [pc, #412]	; (80083f0 <HAL_SPI_Init+0x1fc>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d007      	beq.n	8008266 <HAL_SPI_Init+0x72>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a66      	ldr	r2, [pc, #408]	; (80083f4 <HAL_SPI_Init+0x200>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d002      	beq.n	8008266 <HAL_SPI_Init+0x72>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b08      	cmp	r3, #8
 8008264:	d811      	bhi.n	800828a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800826a:	4a60      	ldr	r2, [pc, #384]	; (80083ec <HAL_SPI_Init+0x1f8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d009      	beq.n	8008284 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a5e      	ldr	r2, [pc, #376]	; (80083f0 <HAL_SPI_Init+0x1fc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_SPI_Init+0x90>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a5d      	ldr	r2, [pc, #372]	; (80083f4 <HAL_SPI_Init+0x200>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d104      	bne.n	800828e <HAL_SPI_Init+0x9a>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b10      	cmp	r3, #16
 8008288:	d901      	bls.n	800828e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e0a9      	b.n	80083e2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7f9 f9de 	bl	8001664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0201 	bic.w	r2, r2, #1
 80082be:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082c8:	d119      	bne.n	80082fe <HAL_SPI_Init+0x10a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d2:	d103      	bne.n	80082dc <HAL_SPI_Init+0xe8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ec:	d107      	bne.n	80082fe <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	431a      	orrs	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008310:	ea42 0103 	orr.w	r1, r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835e:	ea42 0103 	orr.w	r1, r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d113      	bne.n	800839e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008388:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800839c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40013000 	.word	0x40013000
 80083f0:	40003800 	.word	0x40003800
 80083f4:	40003c00 	.word	0x40003c00

080083f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3320      	adds	r3, #32
 800840e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_SPI_Transmit+0x2a>
 800841e:	2302      	movs	r3, #2
 8008420:	e1d7      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800842a:	f7f9 fc7f 	bl	8001d2c <HAL_GetTick>
 800842e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b01      	cmp	r3, #1
 800843a:	d007      	beq.n	800844c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800843c:	2302      	movs	r3, #2
 800843e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008448:	7efb      	ldrb	r3, [r7, #27]
 800844a:	e1c2      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <HAL_SPI_Transmit+0x60>
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008464:	7efb      	ldrb	r3, [r7, #27]
 8008466:	e1b4      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2203      	movs	r2, #3
 800846c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80084b8:	d107      	bne.n	80084ca <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b96      	ldr	r3, [pc, #600]	; (800872c <HAL_SPI_Transmit+0x334>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	88f9      	ldrh	r1, [r7, #6]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	430b      	orrs	r3, r1
 80084dc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0201 	orr.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f6:	d107      	bne.n	8008508 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b0f      	cmp	r3, #15
 800850e:	d947      	bls.n	80085a0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008510:	e03f      	b.n	8008592 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b02      	cmp	r3, #2
 800851e:	d114      	bne.n	800854a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008530:	1d1a      	adds	r2, r3, #4
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008548:	e023      	b.n	8008592 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800854a:	f7f9 fbef 	bl	8001d2c <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d803      	bhi.n	8008562 <HAL_SPI_Transmit+0x16a>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d102      	bne.n	8008568 <HAL_SPI_Transmit+0x170>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d114      	bne.n	8008592 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fcfd 	bl	8008f68 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e11f      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1b9      	bne.n	8008512 <HAL_SPI_Transmit+0x11a>
 800859e:	e0f2      	b.n	8008786 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b07      	cmp	r3, #7
 80085a6:	f240 80e7 	bls.w	8008778 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085aa:	e05d      	b.n	8008668 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d132      	bne.n	8008620 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d918      	bls.n	80085f8 <HAL_SPI_Transmit+0x200>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d014      	beq.n	80085f8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085de:	1d1a      	adds	r2, r3, #4
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b02      	subs	r3, #2
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80085f6:	e037      	b.n	8008668 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008606:	1c9a      	adds	r2, r3, #2
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800861e:	e023      	b.n	8008668 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008620:	f7f9 fb84 	bl	8001d2c <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d803      	bhi.n	8008638 <HAL_SPI_Transmit+0x240>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d102      	bne.n	800863e <HAL_SPI_Transmit+0x246>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d114      	bne.n	8008668 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fc92 	bl	8008f68 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e0b4      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800866e:	b29b      	uxth	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d19b      	bne.n	80085ac <HAL_SPI_Transmit+0x1b4>
 8008674:	e087      	b.n	8008786 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b02      	cmp	r3, #2
 8008682:	d155      	bne.n	8008730 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800868a:	b29b      	uxth	r3, r3
 800868c:	2b03      	cmp	r3, #3
 800868e:	d918      	bls.n	80086c2 <HAL_SPI_Transmit+0x2ca>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	2b40      	cmp	r3, #64	; 0x40
 8008696:	d914      	bls.n	80086c2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b04      	subs	r3, #4
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086c0:	e05a      	b.n	8008778 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d917      	bls.n	80086fe <HAL_SPI_Transmit+0x306>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d013      	beq.n	80086fe <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086da:	881a      	ldrh	r2, [r3, #0]
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e4:	1c9a      	adds	r2, r3, #2
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b02      	subs	r3, #2
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086fc:	e03c      	b.n	8008778 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3320      	adds	r3, #32
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800871c:	b29b      	uxth	r3, r3
 800871e:	3b01      	subs	r3, #1
 8008720:	b29a      	uxth	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008728:	e026      	b.n	8008778 <HAL_SPI_Transmit+0x380>
 800872a:	bf00      	nop
 800872c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008730:	f7f9 fafc 	bl	8001d2c <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d803      	bhi.n	8008748 <HAL_SPI_Transmit+0x350>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008746:	d102      	bne.n	800874e <HAL_SPI_Transmit+0x356>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d114      	bne.n	8008778 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fc0a 	bl	8008f68 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e02c      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	f47f af78 	bne.w	8008676 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	2108      	movs	r1, #8
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fc89 	bl	80090a8 <SPI_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a2:	f043 0220 	orr.w	r2, r3, #32
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fbdb 	bl	8008f68 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80087d0:	7efb      	ldrb	r3, [r7, #27]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop

080087dc <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_SPI_Transmit_DMA+0x20>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e128      	b.n	8008a4e <HAL_SPI_Transmit_DMA+0x272>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d007      	beq.n	8008820 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008810:	2302      	movs	r3, #2
 8008812:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	e116      	b.n	8008a4e <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <HAL_SPI_Transmit_DMA+0x50>
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d107      	bne.n	800883c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	e108      	b.n	8008a4e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2203      	movs	r2, #3
 8008840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	88fa      	ldrh	r2, [r7, #6]
 8008856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800888c:	d107      	bne.n	800889e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800889c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b0f      	cmp	r3, #15
 80088a4:	d905      	bls.n	80088b2 <HAL_SPI_Transmit_DMA+0xd6>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b0:	d10f      	bne.n	80088d2 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80088b6:	2b07      	cmp	r3, #7
 80088b8:	d913      	bls.n	80088e2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c4:	d00d      	beq.n	80088e2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ca:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80088cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088d0:	d007      	beq.n	80088e2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	e0b5      	b.n	8008a4e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b07      	cmp	r3, #7
 80088e8:	d820      	bhi.n	800892c <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f4:	d109      	bne.n	800890a <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3301      	adds	r3, #1
 8008900:	105b      	asrs	r3, r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008914:	d11e      	bne.n	8008954 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800891c:	b29b      	uxth	r3, r3
 800891e:	3303      	adds	r3, #3
 8008920:	109b      	asrs	r3, r3, #2
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800892a:	e013      	b.n	8008954 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b0f      	cmp	r3, #15
 8008932:	d80f      	bhi.n	8008954 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800893e:	d109      	bne.n	8008954 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008946:	b29b      	uxth	r3, r3
 8008948:	3301      	adds	r3, #1
 800894a:	105b      	asrs	r3, r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008958:	4a3f      	ldr	r2, [pc, #252]	; (8008a58 <HAL_SPI_Transmit_DMA+0x27c>)
 800895a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008960:	4a3e      	ldr	r2, [pc, #248]	; (8008a5c <HAL_SPI_Transmit_DMA+0x280>)
 8008962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008968:	4a3d      	ldr	r2, [pc, #244]	; (8008a60 <HAL_SPI_Transmit_DMA+0x284>)
 800896a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008970:	2200      	movs	r2, #0
 8008972:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008982:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898c:	4619      	mov	r1, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3320      	adds	r3, #32
 8008994:	461a      	mov	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800899c:	b29b      	uxth	r3, r3
 800899e:	f7f9 fe81 	bl	80026a4 <HAL_DMA_Start_IT>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00f      	beq.n	80089c8 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ae:	f043 0210 	orr.w	r2, r3, #16
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	e042      	b.n	8008a4e <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d2:	d108      	bne.n	80089e6 <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6859      	ldr	r1, [r3, #4]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <HAL_SPI_Transmit_DMA+0x288>)
 80089e0:	400b      	ands	r3, r1
 80089e2:	6053      	str	r3, [r2, #4]
 80089e4:	e009      	b.n	80089fa <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <HAL_SPI_Transmit_DMA+0x288>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	88f9      	ldrh	r1, [r7, #6]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	430b      	orrs	r3, r1
 80089f8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a08:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008a18:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f042 0201 	orr.w	r2, r2, #1
 8008a28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a32:	d107      	bne.n	8008a44 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a42:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	08008ed3 	.word	0x08008ed3
 8008a5c:	08008e8d 	.word	0x08008e8d
 8008a60:	08008eef 	.word	0x08008eef
 8008a64:	ffff0000 	.word	0xffff0000

08008a68 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	; 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008a80:	6a3a      	ldr	r2, [r7, #32]
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4013      	ands	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a9a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3330      	adds	r3, #48	; 0x30
 8008aa2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d113      	bne.n	8008ad6 <HAL_SPI_IRQHandler+0x6e>
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10e      	bne.n	8008ad6 <HAL_SPI_IRQHandler+0x6e>
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
    handled = 1UL;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10f      	bne.n	8008b00 <HAL_SPI_IRQHandler+0x98>
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <HAL_SPI_IRQHandler+0x98>
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
    handled = 1UL;
 8008afc:	2301      	movs	r3, #1
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10f      	bne.n	8008b2a <HAL_SPI_IRQHandler+0xc2>
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <HAL_SPI_IRQHandler+0xc2>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d105      	bne.n	8008b2a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
    handled = 1UL;
 8008b26:	2301      	movs	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 816f 	bne.w	8008e10 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a0 	beq.w	8008c7e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699a      	ldr	r2, [r3, #24]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0208 	orr.w	r2, r2, #8
 8008b4c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699a      	ldr	r2, [r3, #24]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0210 	orr.w	r2, r2, #16
 8008b5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	699a      	ldr	r2, [r3, #24]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691a      	ldr	r2, [r3, #16]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0208 	bic.w	r2, r2, #8
 8008b7c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <HAL_SPI_IRQHandler+0x140>
 8008b88:	7cfb      	ldrb	r3, [r7, #19]
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d004      	beq.n	8008b98 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <HAL_SPI_IRQHandler+0x140>
 8008b98:	7cfb      	ldrb	r3, [r7, #19]
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d059      	beq.n	8008c52 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d154      	bne.n	8008c52 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d13d      	bne.n	8008c32 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8008bb6:	e036      	b.n	8008c26 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	2b0f      	cmp	r3, #15
 8008bbe:	d90b      	bls.n	8008bd8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008bca:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	665a      	str	r2, [r3, #100]	; 0x64
 8008bd6:	e01d      	b.n	8008c14 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b07      	cmp	r3, #7
 8008bde:	d90b      	bls.n	8008bf8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	8812      	ldrh	r2, [r2, #0]
 8008be8:	b292      	uxth	r2, r2
 8008bea:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf0:	1c9a      	adds	r2, r3, #2
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	665a      	str	r2, [r3, #100]	; 0x64
 8008bf6:	e00d      	b.n	8008c14 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1c2      	bne.n	8008bb8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f998 	bl	8008f68 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f914 	bl	8008e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8008c50:	e0e3      	b.n	8008e1a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008c52:	7cfb      	ldrb	r3, [r7, #19]
 8008c54:	2b05      	cmp	r3, #5
 8008c56:	d103      	bne.n	8008c60 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8f9 	bl	8008e50 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8008c5e:	e0d9      	b.n	8008e14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d103      	bne.n	8008c6e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f8e8 	bl	8008e3c <HAL_SPI_RxCpltCallback>
    return;
 8008c6c:	e0d2      	b.n	8008e14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008c6e:	7cfb      	ldrb	r3, [r7, #19]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	f040 80cf 	bne.w	8008e14 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f8d6 	bl	8008e28 <HAL_SPI_TxCpltCallback>
    return;
 8008c7c:	e0ca      	b.n	8008e14 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00d      	beq.n	8008ca4 <HAL_SPI_IRQHandler+0x23c>
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d008      	beq.n	8008ca4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	699a      	ldr	r2, [r3, #24]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca0:	619a      	str	r2, [r3, #24]

    return;
 8008ca2:	e0ba      	b.n	8008e1a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80b5 	beq.w	8008e1a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00f      	beq.n	8008cda <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cc0:	f043 0204 	orr.w	r2, r3, #4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699a      	ldr	r2, [r3, #24]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00f      	beq.n	8008d04 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cea:	f043 0201 	orr.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00f      	beq.n	8008d2e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d14:	f043 0208 	orr.w	r2, r3, #8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00f      	beq.n	8008d58 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0220 	orr.w	r2, r2, #32
 8008d56:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d05a      	beq.n	8008e18 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0201 	bic.w	r2, r2, #1
 8008d70:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6919      	ldr	r1, [r3, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	4b28      	ldr	r3, [pc, #160]	; (8008e20 <HAL_SPI_IRQHandler+0x3b8>)
 8008d7e:	400b      	ands	r3, r1
 8008d80:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d8c:	d138      	bne.n	8008e00 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008d9c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d013      	beq.n	8008dce <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008daa:	4a1e      	ldr	r2, [pc, #120]	; (8008e24 <HAL_SPI_IRQHandler+0x3bc>)
 8008dac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fa f9fe 	bl	80031b4 <HAL_DMA_Abort_IT>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d020      	beq.n	8008e18 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dda:	4a12      	ldr	r2, [pc, #72]	; (8008e24 <HAL_SPI_IRQHandler+0x3bc>)
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa f9e6 	bl	80031b4 <HAL_DMA_Abort_IT>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d014      	beq.n	8008e18 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008dfe:	e00b      	b.n	8008e18 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f835 	bl	8008e78 <HAL_SPI_ErrorCallback>
    return;
 8008e0e:	e003      	b.n	8008e18 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8008e10:	bf00      	nop
 8008e12:	e002      	b.n	8008e1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008e14:	bf00      	nop
 8008e16:	e000      	b.n	8008e1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008e18:	bf00      	nop
  }
}
 8008e1a:	3728      	adds	r7, #40	; 0x28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	fffffc94 	.word	0xfffffc94
 8008e24:	08008f35 	.word	0x08008f35

08008e28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b07      	cmp	r3, #7
 8008ea4:	d011      	beq.n	8008eca <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb0:	d103      	bne.n	8008eba <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff ffb8 	bl	8008e28 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008eb8:	e007      	b.n	8008eca <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0208 	orr.w	r2, r2, #8
 8008ec8:	611a      	str	r2, [r3, #16]
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff ffbf 	bl	8008e64 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fb fac7 	bl	8004490 <HAL_DMA_GetError>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d011      	beq.n	8008f2c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f82d 	bl	8008f68 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f14:	f043 0210 	orr.w	r2, r3, #16
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff ffa6 	bl	8008e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff ff8c 	bl	8008e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699a      	ldr	r2, [r3, #24]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0208 	orr.w	r2, r2, #8
 8008f86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699a      	ldr	r2, [r3, #24]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0210 	orr.w	r2, r2, #16
 8008f96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6919      	ldr	r1, [r3, #16]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b3c      	ldr	r3, [pc, #240]	; (80090a4 <SPI_CloseTransfer+0x13c>)
 8008fb4:	400b      	ands	r3, r1
 8008fb6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008fc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d014      	beq.n	8008ffe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00f      	beq.n	8008ffe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0220 	orr.w	r2, r2, #32
 8008ffc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d014      	beq.n	8009034 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00f      	beq.n	8009034 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009032:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00f      	beq.n	800905e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009044:	f043 0201 	orr.w	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800905c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00f      	beq.n	8009088 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800906e:	f043 0208 	orr.w	r2, r3, #8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	699a      	ldr	r2, [r3, #24]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009086:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	fffffc90 	.word	0xfffffc90

080090a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	4613      	mov	r3, r2
 80090b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090b8:	e010      	b.n	80090dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090ba:	f7f8 fe37 	bl	8001d2c <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d803      	bhi.n	80090d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d102      	bne.n	80090d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e00f      	b.n	80090fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	695a      	ldr	r2, [r3, #20]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4013      	ands	r3, r2
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	bf0c      	ite	eq
 80090ec:	2301      	moveq	r3, #1
 80090ee:	2300      	movne	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	461a      	mov	r2, r3
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d0df      	beq.n	80090ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	3301      	adds	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	3301      	adds	r3, #1
 800911c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	3307      	adds	r3, #7
 8009122:	08db      	lsrs	r3, r3, #3
 8009124:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	fb02 f303 	mul.w	r3, r2, r3
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e042      	b.n	80091d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7f8 fb46 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2224      	movs	r2, #36	; 0x24
 8009168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0201 	bic.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb61 	bl	8009844 <UART_SetConfig>
 8009182:	4603      	mov	r3, r0
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e022      	b.n	80091d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f8b5 	bl	800a304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0201 	orr.w	r2, r2, #1
 80091c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 f93c 	bl	800a448 <UART_CheckIdleState>
 80091d0:	4603      	mov	r3, r0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d131      	bne.n	8009258 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <HAL_UART_Receive_DMA+0x24>
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e02a      	b.n	800925a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <HAL_UART_Receive_DMA+0x36>
 800920e:	2302      	movs	r3, #2
 8009210:	e023      	b.n	800925a <HAL_UART_Receive_DMA+0x7e>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a0f      	ldr	r2, [pc, #60]	; (8009264 <HAL_UART_Receive_DMA+0x88>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00e      	beq.n	8009248 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009246:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	461a      	mov	r2, r3
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f001 f9c6 	bl	800a5e0 <UART_Start_Receive_DMA>
 8009254:	4603      	mov	r3, r0
 8009256:	e000      	b.n	800925a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009258:	2302      	movs	r3, #2
  }
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	58000c00 	.word	0x58000c00

08009268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	f640 030f 	movw	r3, #2063	; 0x80f
 800928e:	4013      	ands	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d118      	bne.n	80092ca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d013      	beq.n	80092ca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d104      	bne.n	80092b6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8282 	beq.w	80097c4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
      }
      return;
 80092c8:	e27c      	b.n	80097c4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80ef 	beq.w	80094b0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	4b73      	ldr	r3, [pc, #460]	; (80094a4 <HAL_UART_IRQHandler+0x23c>)
 80092d6:	4013      	ands	r3, r2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d105      	bne.n	80092e8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	4b72      	ldr	r3, [pc, #456]	; (80094a8 <HAL_UART_IRQHandler+0x240>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80e4 	beq.w	80094b0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d010      	beq.n	8009314 <HAL_UART_IRQHandler+0xac>
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2201      	movs	r2, #1
 8009302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930a:	f043 0201 	orr.w	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d010      	beq.n	8009340 <HAL_UART_IRQHandler+0xd8>
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00b      	beq.n	8009340 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2202      	movs	r2, #2
 800932e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009336:	f043 0204 	orr.w	r2, r3, #4
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d010      	beq.n	800936c <HAL_UART_IRQHandler+0x104>
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2204      	movs	r2, #4
 800935a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009362:	f043 0202 	orr.w	r2, r3, #2
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d015      	beq.n	80093a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d104      	bne.n	800938a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4b48      	ldr	r3, [pc, #288]	; (80094a4 <HAL_UART_IRQHandler+0x23c>)
 8009384:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00b      	beq.n	80093a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2208      	movs	r2, #8
 8009390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009398:	f043 0208 	orr.w	r2, r3, #8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d011      	beq.n	80093d0 <HAL_UART_IRQHandler+0x168>
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00c      	beq.n	80093d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093c6:	f043 0220 	orr.w	r2, r3, #32
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 81f6 	beq.w	80097c8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d011      	beq.n	800940a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009410:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d004      	beq.n	800942a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009426:	2b00      	cmp	r3, #0
 8009428:	d031      	beq.n	800948e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 f964 	bl	800a6f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943a:	2b40      	cmp	r3, #64	; 0x40
 800943c:	d123      	bne.n	8009486 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800944c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d013      	beq.n	800947e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945a:	4a14      	ldr	r2, [pc, #80]	; (80094ac <HAL_UART_IRQHandler+0x244>)
 800945c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009462:	4618      	mov	r0, r3
 8009464:	f7f9 fea6 	bl	80031b4 <HAL_DMA_Abort_IT>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d017      	beq.n	800949e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947c:	e00f      	b.n	800949e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9ca 	bl	8009818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009484:	e00b      	b.n	800949e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9c6 	bl	8009818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800948c:	e007      	b.n	800949e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9c2 	bl	8009818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800949c:	e194      	b.n	80097c8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949e:	bf00      	nop
    return;
 80094a0:	e192      	b.n	80097c8 <HAL_UART_IRQHandler+0x560>
 80094a2:	bf00      	nop
 80094a4:	10000001 	.word	0x10000001
 80094a8:	04000120 	.word	0x04000120
 80094ac:	0800a8ab 	.word	0x0800a8ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	f040 810f 	bne.w	80096d8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 8109 	beq.w	80096d8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8103 	beq.w	80096d8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2210      	movs	r2, #16
 80094d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e4:	2b40      	cmp	r3, #64	; 0x40
 80094e6:	f040 80bb 	bne.w	8009660 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a96      	ldr	r2, [pc, #600]	; (800974c <HAL_UART_IRQHandler+0x4e4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d059      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a94      	ldr	r2, [pc, #592]	; (8009750 <HAL_UART_IRQHandler+0x4e8>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d053      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a92      	ldr	r2, [pc, #584]	; (8009754 <HAL_UART_IRQHandler+0x4ec>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d04d      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a90      	ldr	r2, [pc, #576]	; (8009758 <HAL_UART_IRQHandler+0x4f0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d047      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a8e      	ldr	r2, [pc, #568]	; (800975c <HAL_UART_IRQHandler+0x4f4>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d041      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a8c      	ldr	r2, [pc, #560]	; (8009760 <HAL_UART_IRQHandler+0x4f8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d03b      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a8a      	ldr	r2, [pc, #552]	; (8009764 <HAL_UART_IRQHandler+0x4fc>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d035      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a88      	ldr	r2, [pc, #544]	; (8009768 <HAL_UART_IRQHandler+0x500>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d02f      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a86      	ldr	r2, [pc, #536]	; (800976c <HAL_UART_IRQHandler+0x504>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d029      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a84      	ldr	r2, [pc, #528]	; (8009770 <HAL_UART_IRQHandler+0x508>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d023      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a82      	ldr	r2, [pc, #520]	; (8009774 <HAL_UART_IRQHandler+0x50c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d01d      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a80      	ldr	r2, [pc, #512]	; (8009778 <HAL_UART_IRQHandler+0x510>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d017      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a7e      	ldr	r2, [pc, #504]	; (800977c <HAL_UART_IRQHandler+0x514>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d011      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a7c      	ldr	r2, [pc, #496]	; (8009780 <HAL_UART_IRQHandler+0x518>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00b      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a7a      	ldr	r2, [pc, #488]	; (8009784 <HAL_UART_IRQHandler+0x51c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d005      	beq.n	80095aa <HAL_UART_IRQHandler+0x342>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a78      	ldr	r2, [pc, #480]	; (8009788 <HAL_UART_IRQHandler+0x520>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d105      	bne.n	80095b6 <HAL_UART_IRQHandler+0x34e>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	e004      	b.n	80095c0 <HAL_UART_IRQHandler+0x358>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80095c2:	893b      	ldrh	r3, [r7, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8101 	beq.w	80097cc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095d0:	893a      	ldrh	r2, [r7, #8]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	f080 80fa 	bcs.w	80097cc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	893a      	ldrh	r2, [r7, #8]
 80095dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ea:	d02b      	beq.n	8009644 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0201 	bic.w	r2, r2, #1
 800960a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800961a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2220      	movs	r2, #32
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0210 	bic.w	r2, r2, #16
 8009638:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	4618      	mov	r0, r3
 8009640:	f7f9 fa9a 	bl	8002b78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009650:	b29b      	uxth	r3, r3
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	b29b      	uxth	r3, r3
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f8e7 	bl	800982c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800965e:	e0b5      	b.n	80097cc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800966c:	b29b      	uxth	r3, r3
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009678:	b29b      	uxth	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80a8 	beq.w	80097d0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009680:	897b      	ldrh	r3, [r7, #10]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80a4 	beq.w	80097d0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009696:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6899      	ldr	r1, [r3, #8]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b3a      	ldr	r3, [pc, #232]	; (800978c <HAL_UART_IRQHandler+0x524>)
 80096a4:	400b      	ands	r3, r1
 80096a6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0210 	bic.w	r2, r2, #16
 80096ca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096cc:	897b      	ldrh	r3, [r7, #10]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f8ab 	bl	800982c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096d6:	e07b      	b.n	80097d0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00d      	beq.n	80096fe <HAL_UART_IRQHandler+0x496>
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d008      	beq.n	80096fe <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 f907 	bl	800a90a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096fc:	e06b      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009704:	2b00      	cmp	r3, #0
 8009706:	d012      	beq.n	800972e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009720:	2b00      	cmp	r3, #0
 8009722:	d057      	beq.n	80097d4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
    }
    return;
 800972c:	e052      	b.n	80097d4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	d02b      	beq.n	8009790 <HAL_UART_IRQHandler+0x528>
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	d026      	beq.n	8009790 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 f8c7 	bl	800a8d6 <UART_EndTransmit_IT>
    return;
 8009748:	e045      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
 800974a:	bf00      	nop
 800974c:	40020010 	.word	0x40020010
 8009750:	40020028 	.word	0x40020028
 8009754:	40020040 	.word	0x40020040
 8009758:	40020058 	.word	0x40020058
 800975c:	40020070 	.word	0x40020070
 8009760:	40020088 	.word	0x40020088
 8009764:	400200a0 	.word	0x400200a0
 8009768:	400200b8 	.word	0x400200b8
 800976c:	40020410 	.word	0x40020410
 8009770:	40020428 	.word	0x40020428
 8009774:	40020440 	.word	0x40020440
 8009778:	40020458 	.word	0x40020458
 800977c:	40020470 	.word	0x40020470
 8009780:	40020488 	.word	0x40020488
 8009784:	400204a0 	.word	0x400204a0
 8009788:	400204b8 	.word	0x400204b8
 800978c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d008      	beq.n	80097ac <HAL_UART_IRQHandler+0x544>
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d003      	beq.n	80097ac <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 f8c4 	bl	800a932 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097aa:	e014      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <HAL_UART_IRQHandler+0x56e>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	da0c      	bge.n	80097d6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 f8ae 	bl	800a91e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097c2:	e008      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
      return;
 80097c4:	bf00      	nop
 80097c6:	e006      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
    return;
 80097c8:	bf00      	nop
 80097ca:	e004      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
      return;
 80097cc:	bf00      	nop
 80097ce:	e002      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
      return;
 80097d0:	bf00      	nop
 80097d2:	e000      	b.n	80097d6 <HAL_UART_IRQHandler+0x56e>
    return;
 80097d4:	bf00      	nop
  }
}
 80097d6:	3720      	adds	r7, #32
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009844:	b5b0      	push	{r4, r5, r7, lr}
 8009846:	b08e      	sub	sp, #56	; 0x38
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	4313      	orrs	r3, r2
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4bbf      	ldr	r3, [pc, #764]	; (8009b70 <UART_SetConfig+0x32c>)
 8009872:	4013      	ands	r3, r2
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800987a:	430b      	orrs	r3, r1
 800987c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4ab5      	ldr	r2, [pc, #724]	; (8009b74 <UART_SetConfig+0x330>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d004      	beq.n	80098ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098aa:	4313      	orrs	r3, r2
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	4bb0      	ldr	r3, [pc, #704]	; (8009b78 <UART_SetConfig+0x334>)
 80098b6:	4013      	ands	r3, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6812      	ldr	r2, [r2, #0]
 80098bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098be:	430b      	orrs	r3, r1
 80098c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f023 010f 	bic.w	r1, r3, #15
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4aa7      	ldr	r2, [pc, #668]	; (8009b7c <UART_SetConfig+0x338>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d176      	bne.n	80099d0 <UART_SetConfig+0x18c>
 80098e2:	4ba7      	ldr	r3, [pc, #668]	; (8009b80 <UART_SetConfig+0x33c>)
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098ea:	2b28      	cmp	r3, #40	; 0x28
 80098ec:	d86c      	bhi.n	80099c8 <UART_SetConfig+0x184>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0xb0>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009999 	.word	0x08009999
 80098f8:	080099c9 	.word	0x080099c9
 80098fc:	080099c9 	.word	0x080099c9
 8009900:	080099c9 	.word	0x080099c9
 8009904:	080099c9 	.word	0x080099c9
 8009908:	080099c9 	.word	0x080099c9
 800990c:	080099c9 	.word	0x080099c9
 8009910:	080099c9 	.word	0x080099c9
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099c9 	.word	0x080099c9
 800991c:	080099c9 	.word	0x080099c9
 8009920:	080099c9 	.word	0x080099c9
 8009924:	080099c9 	.word	0x080099c9
 8009928:	080099c9 	.word	0x080099c9
 800992c:	080099c9 	.word	0x080099c9
 8009930:	080099c9 	.word	0x080099c9
 8009934:	080099a9 	.word	0x080099a9
 8009938:	080099c9 	.word	0x080099c9
 800993c:	080099c9 	.word	0x080099c9
 8009940:	080099c9 	.word	0x080099c9
 8009944:	080099c9 	.word	0x080099c9
 8009948:	080099c9 	.word	0x080099c9
 800994c:	080099c9 	.word	0x080099c9
 8009950:	080099c9 	.word	0x080099c9
 8009954:	080099b1 	.word	0x080099b1
 8009958:	080099c9 	.word	0x080099c9
 800995c:	080099c9 	.word	0x080099c9
 8009960:	080099c9 	.word	0x080099c9
 8009964:	080099c9 	.word	0x080099c9
 8009968:	080099c9 	.word	0x080099c9
 800996c:	080099c9 	.word	0x080099c9
 8009970:	080099c9 	.word	0x080099c9
 8009974:	080099b9 	.word	0x080099b9
 8009978:	080099c9 	.word	0x080099c9
 800997c:	080099c9 	.word	0x080099c9
 8009980:	080099c9 	.word	0x080099c9
 8009984:	080099c9 	.word	0x080099c9
 8009988:	080099c9 	.word	0x080099c9
 800998c:	080099c9 	.word	0x080099c9
 8009990:	080099c9 	.word	0x080099c9
 8009994:	080099c1 	.word	0x080099c1
 8009998:	2301      	movs	r3, #1
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e222      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e21e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e21a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e216      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099b8:	2320      	movs	r3, #32
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e212      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099c0:	2340      	movs	r3, #64	; 0x40
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e20e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099c8:	2380      	movs	r3, #128	; 0x80
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e20a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a6b      	ldr	r2, [pc, #428]	; (8009b84 <UART_SetConfig+0x340>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d130      	bne.n	8009a3c <UART_SetConfig+0x1f8>
 80099da:	4b69      	ldr	r3, [pc, #420]	; (8009b80 <UART_SetConfig+0x33c>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d826      	bhi.n	8009a34 <UART_SetConfig+0x1f0>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <UART_SetConfig+0x1a8>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a05 	.word	0x08009a05
 80099f0:	08009a0d 	.word	0x08009a0d
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e1ec      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e1e8      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a14:	2308      	movs	r3, #8
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e1e4      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e1e0      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a24:	2320      	movs	r3, #32
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e1dc      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a2c:	2340      	movs	r3, #64	; 0x40
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e1d8      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	e1d4      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a51      	ldr	r2, [pc, #324]	; (8009b88 <UART_SetConfig+0x344>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d130      	bne.n	8009aa8 <UART_SetConfig+0x264>
 8009a46:	4b4e      	ldr	r3, [pc, #312]	; (8009b80 <UART_SetConfig+0x33c>)
 8009a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d826      	bhi.n	8009aa0 <UART_SetConfig+0x25c>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0x214>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a81 	.word	0x08009a81
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e1b6      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e1b2      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e1ae      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e1aa      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e1a6      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e1a2      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e19e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a37      	ldr	r2, [pc, #220]	; (8009b8c <UART_SetConfig+0x348>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d130      	bne.n	8009b14 <UART_SetConfig+0x2d0>
 8009ab2:	4b33      	ldr	r3, [pc, #204]	; (8009b80 <UART_SetConfig+0x33c>)
 8009ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d826      	bhi.n	8009b0c <UART_SetConfig+0x2c8>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0x280>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009add 	.word	0x08009add
 8009ac8:	08009ae5 	.word	0x08009ae5
 8009acc:	08009aed 	.word	0x08009aed
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e180      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e17c      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009aec:	2308      	movs	r3, #8
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e178      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009af4:	2310      	movs	r3, #16
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e174      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009afc:	2320      	movs	r3, #32
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e170      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e16c      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e168      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1d      	ldr	r2, [pc, #116]	; (8009b90 <UART_SetConfig+0x34c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d142      	bne.n	8009ba4 <UART_SetConfig+0x360>
 8009b1e:	4b18      	ldr	r3, [pc, #96]	; (8009b80 <UART_SetConfig+0x33c>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d838      	bhi.n	8009b9c <UART_SetConfig+0x358>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <UART_SetConfig+0x2ec>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b59 	.word	0x08009b59
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e14a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e146      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e142      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e13e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e13a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b70:	cfff69f3 	.word	0xcfff69f3
 8009b74:	58000c00 	.word	0x58000c00
 8009b78:	11fff4ff 	.word	0x11fff4ff
 8009b7c:	40011000 	.word	0x40011000
 8009b80:	58024400 	.word	0x58024400
 8009b84:	40004400 	.word	0x40004400
 8009b88:	40004800 	.word	0x40004800
 8009b8c:	40004c00 	.word	0x40004c00
 8009b90:	40005000 	.word	0x40005000
 8009b94:	2340      	movs	r3, #64	; 0x40
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e124      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009b9c:	2380      	movs	r3, #128	; 0x80
 8009b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba2:	e120      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4acc      	ldr	r2, [pc, #816]	; (8009edc <UART_SetConfig+0x698>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d176      	bne.n	8009c9c <UART_SetConfig+0x458>
 8009bae:	4bcc      	ldr	r3, [pc, #816]	; (8009ee0 <UART_SetConfig+0x69c>)
 8009bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bb6:	2b28      	cmp	r3, #40	; 0x28
 8009bb8:	d86c      	bhi.n	8009c94 <UART_SetConfig+0x450>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <UART_SetConfig+0x37c>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009c65 	.word	0x08009c65
 8009bc4:	08009c95 	.word	0x08009c95
 8009bc8:	08009c95 	.word	0x08009c95
 8009bcc:	08009c95 	.word	0x08009c95
 8009bd0:	08009c95 	.word	0x08009c95
 8009bd4:	08009c95 	.word	0x08009c95
 8009bd8:	08009c95 	.word	0x08009c95
 8009bdc:	08009c95 	.word	0x08009c95
 8009be0:	08009c6d 	.word	0x08009c6d
 8009be4:	08009c95 	.word	0x08009c95
 8009be8:	08009c95 	.word	0x08009c95
 8009bec:	08009c95 	.word	0x08009c95
 8009bf0:	08009c95 	.word	0x08009c95
 8009bf4:	08009c95 	.word	0x08009c95
 8009bf8:	08009c95 	.word	0x08009c95
 8009bfc:	08009c95 	.word	0x08009c95
 8009c00:	08009c75 	.word	0x08009c75
 8009c04:	08009c95 	.word	0x08009c95
 8009c08:	08009c95 	.word	0x08009c95
 8009c0c:	08009c95 	.word	0x08009c95
 8009c10:	08009c95 	.word	0x08009c95
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c95 	.word	0x08009c95
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009c7d 	.word	0x08009c7d
 8009c24:	08009c95 	.word	0x08009c95
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c95 	.word	0x08009c95
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009c95 	.word	0x08009c95
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009c85 	.word	0x08009c85
 8009c44:	08009c95 	.word	0x08009c95
 8009c48:	08009c95 	.word	0x08009c95
 8009c4c:	08009c95 	.word	0x08009c95
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009c95 	.word	0x08009c95
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c95 	.word	0x08009c95
 8009c60:	08009c8d 	.word	0x08009c8d
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e0bc      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e0b8      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c74:	2308      	movs	r3, #8
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e0b4      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c82:	e0b0      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c84:	2320      	movs	r3, #32
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8a:	e0ac      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c8c:	2340      	movs	r3, #64	; 0x40
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e0a8      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c94:	2380      	movs	r3, #128	; 0x80
 8009c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9a:	e0a4      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a90      	ldr	r2, [pc, #576]	; (8009ee4 <UART_SetConfig+0x6a0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d130      	bne.n	8009d08 <UART_SetConfig+0x4c4>
 8009ca6:	4b8e      	ldr	r3, [pc, #568]	; (8009ee0 <UART_SetConfig+0x69c>)
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d826      	bhi.n	8009d00 <UART_SetConfig+0x4bc>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <UART_SetConfig+0x474>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cd1 	.word	0x08009cd1
 8009cbc:	08009cd9 	.word	0x08009cd9
 8009cc0:	08009ce1 	.word	0x08009ce1
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	08009cf1 	.word	0x08009cf1
 8009ccc:	08009cf9 	.word	0x08009cf9
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e086      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e082      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e07e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009ce8:	2310      	movs	r3, #16
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e07a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e076      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e072      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d00:	2380      	movs	r3, #128	; 0x80
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e06e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a76      	ldr	r2, [pc, #472]	; (8009ee8 <UART_SetConfig+0x6a4>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d130      	bne.n	8009d74 <UART_SetConfig+0x530>
 8009d12:	4b73      	ldr	r3, [pc, #460]	; (8009ee0 <UART_SetConfig+0x69c>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d826      	bhi.n	8009d6c <UART_SetConfig+0x528>
 8009d1e:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x4e0>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009d3d 	.word	0x08009d3d
 8009d28:	08009d45 	.word	0x08009d45
 8009d2c:	08009d4d 	.word	0x08009d4d
 8009d30:	08009d55 	.word	0x08009d55
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e050      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d44:	2304      	movs	r3, #4
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e04c      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e048      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d54:	2310      	movs	r3, #16
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e044      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e040      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e03c      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d6c:	2380      	movs	r3, #128	; 0x80
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e038      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a5c      	ldr	r2, [pc, #368]	; (8009eec <UART_SetConfig+0x6a8>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d130      	bne.n	8009de0 <UART_SetConfig+0x59c>
 8009d7e:	4b58      	ldr	r3, [pc, #352]	; (8009ee0 <UART_SetConfig+0x69c>)
 8009d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d826      	bhi.n	8009dd8 <UART_SetConfig+0x594>
 8009d8a:	a201      	add	r2, pc, #4	; (adr r2, 8009d90 <UART_SetConfig+0x54c>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009da9 	.word	0x08009da9
 8009d94:	08009db1 	.word	0x08009db1
 8009d98:	08009db9 	.word	0x08009db9
 8009d9c:	08009dc1 	.word	0x08009dc1
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	2302      	movs	r3, #2
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e01a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009db0:	2304      	movs	r3, #4
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e016      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009db8:	2308      	movs	r3, #8
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e012      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e00e      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009dc8:	2320      	movs	r3, #32
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e00a      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009dd0:	2340      	movs	r3, #64	; 0x40
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e006      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009dd8:	2380      	movs	r3, #128	; 0x80
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e002      	b.n	8009de6 <UART_SetConfig+0x5a2>
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a40      	ldr	r2, [pc, #256]	; (8009eec <UART_SetConfig+0x6a8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	f040 80ef 	bne.w	8009fd0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009df2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	dc46      	bgt.n	8009e88 <UART_SetConfig+0x644>
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	f2c0 8081 	blt.w	8009f02 <UART_SetConfig+0x6be>
 8009e00:	3b02      	subs	r3, #2
 8009e02:	2b1e      	cmp	r3, #30
 8009e04:	d87d      	bhi.n	8009f02 <UART_SetConfig+0x6be>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <UART_SetConfig+0x5c8>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e8f 	.word	0x08009e8f
 8009e10:	08009f03 	.word	0x08009f03
 8009e14:	08009e97 	.word	0x08009e97
 8009e18:	08009f03 	.word	0x08009f03
 8009e1c:	08009f03 	.word	0x08009f03
 8009e20:	08009f03 	.word	0x08009f03
 8009e24:	08009ea7 	.word	0x08009ea7
 8009e28:	08009f03 	.word	0x08009f03
 8009e2c:	08009f03 	.word	0x08009f03
 8009e30:	08009f03 	.word	0x08009f03
 8009e34:	08009f03 	.word	0x08009f03
 8009e38:	08009f03 	.word	0x08009f03
 8009e3c:	08009f03 	.word	0x08009f03
 8009e40:	08009f03 	.word	0x08009f03
 8009e44:	08009eb7 	.word	0x08009eb7
 8009e48:	08009f03 	.word	0x08009f03
 8009e4c:	08009f03 	.word	0x08009f03
 8009e50:	08009f03 	.word	0x08009f03
 8009e54:	08009f03 	.word	0x08009f03
 8009e58:	08009f03 	.word	0x08009f03
 8009e5c:	08009f03 	.word	0x08009f03
 8009e60:	08009f03 	.word	0x08009f03
 8009e64:	08009f03 	.word	0x08009f03
 8009e68:	08009f03 	.word	0x08009f03
 8009e6c:	08009f03 	.word	0x08009f03
 8009e70:	08009f03 	.word	0x08009f03
 8009e74:	08009f03 	.word	0x08009f03
 8009e78:	08009f03 	.word	0x08009f03
 8009e7c:	08009f03 	.word	0x08009f03
 8009e80:	08009f03 	.word	0x08009f03
 8009e84:	08009ef5 	.word	0x08009ef5
 8009e88:	2b40      	cmp	r3, #64	; 0x40
 8009e8a:	d036      	beq.n	8009efa <UART_SetConfig+0x6b6>
 8009e8c:	e039      	b.n	8009f02 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e8e:	f7fd fd8f 	bl	80079b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e94:	e03b      	b.n	8009f0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e96:	f107 0314 	add.w	r3, r7, #20
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fd fd9e 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ea4:	e033      	b.n	8009f0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fd feea 	bl	8007c84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eb4:	e02b      	b.n	8009f0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <UART_SetConfig+0x69c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0320 	and.w	r3, r3, #32
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ec2:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <UART_SetConfig+0x69c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	08db      	lsrs	r3, r3, #3
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <UART_SetConfig+0x6ac>)
 8009ece:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ed4:	e01b      	b.n	8009f0e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009ed6:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <UART_SetConfig+0x6ac>)
 8009ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eda:	e018      	b.n	8009f0e <UART_SetConfig+0x6ca>
 8009edc:	40011400 	.word	0x40011400
 8009ee0:	58024400 	.word	0x58024400
 8009ee4:	40007800 	.word	0x40007800
 8009ee8:	40007c00 	.word	0x40007c00
 8009eec:	58000c00 	.word	0x58000c00
 8009ef0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ef4:	4bc4      	ldr	r3, [pc, #784]	; (800a208 <UART_SetConfig+0x9c4>)
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ef8:	e009      	b.n	8009f0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f00:	e005      	b.n	8009f0e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 81da 	beq.w	800a2ca <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	4abc      	ldr	r2, [pc, #752]	; (800a20c <UART_SetConfig+0x9c8>)
 8009f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f20:	461a      	mov	r2, r3
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f28:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	4413      	add	r3, r2
 8009f34:	6a3a      	ldr	r2, [r7, #32]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d305      	bcc.n	8009f46 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d903      	bls.n	8009f4e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f4c:	e1bd      	b.n	800a2ca <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	4618      	mov	r0, r3
 8009f52:	f04f 0100 	mov.w	r1, #0
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	4aac      	ldr	r2, [pc, #688]	; (800a20c <UART_SetConfig+0x9c8>)
 8009f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	f04f 0300 	mov.w	r3, #0
 8009f66:	f7f6 f9b7 	bl	80002d8 <__aeabi_uldivmod>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4619      	mov	r1, r3
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	020b      	lsls	r3, r1, #8
 8009f7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f80:	0202      	lsls	r2, r0, #8
 8009f82:	6879      	ldr	r1, [r7, #4]
 8009f84:	6849      	ldr	r1, [r1, #4]
 8009f86:	0849      	lsrs	r1, r1, #1
 8009f88:	4608      	mov	r0, r1
 8009f8a:	f04f 0100 	mov.w	r1, #0
 8009f8e:	1814      	adds	r4, r2, r0
 8009f90:	eb43 0501 	adc.w	r5, r3, r1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	f04f 0300 	mov.w	r3, #0
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 f999 	bl	80002d8 <__aeabi_uldivmod>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4613      	mov	r3, r2
 8009fac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fb4:	d308      	bcc.n	8009fc8 <UART_SetConfig+0x784>
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fbc:	d204      	bcs.n	8009fc8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc4:	60da      	str	r2, [r3, #12]
 8009fc6:	e180      	b.n	800a2ca <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fce:	e17c      	b.n	800a2ca <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd8:	f040 80bf 	bne.w	800a15a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	dc49      	bgt.n	800a078 <UART_SetConfig+0x834>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	db7c      	blt.n	800a0e2 <UART_SetConfig+0x89e>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d87a      	bhi.n	800a0e2 <UART_SetConfig+0x89e>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x7b0>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a07f 	.word	0x0800a07f
 8009ff8:	0800a087 	.word	0x0800a087
 8009ffc:	0800a0e3 	.word	0x0800a0e3
 800a000:	0800a0e3 	.word	0x0800a0e3
 800a004:	0800a08f 	.word	0x0800a08f
 800a008:	0800a0e3 	.word	0x0800a0e3
 800a00c:	0800a0e3 	.word	0x0800a0e3
 800a010:	0800a0e3 	.word	0x0800a0e3
 800a014:	0800a09f 	.word	0x0800a09f
 800a018:	0800a0e3 	.word	0x0800a0e3
 800a01c:	0800a0e3 	.word	0x0800a0e3
 800a020:	0800a0e3 	.word	0x0800a0e3
 800a024:	0800a0e3 	.word	0x0800a0e3
 800a028:	0800a0e3 	.word	0x0800a0e3
 800a02c:	0800a0e3 	.word	0x0800a0e3
 800a030:	0800a0e3 	.word	0x0800a0e3
 800a034:	0800a0af 	.word	0x0800a0af
 800a038:	0800a0e3 	.word	0x0800a0e3
 800a03c:	0800a0e3 	.word	0x0800a0e3
 800a040:	0800a0e3 	.word	0x0800a0e3
 800a044:	0800a0e3 	.word	0x0800a0e3
 800a048:	0800a0e3 	.word	0x0800a0e3
 800a04c:	0800a0e3 	.word	0x0800a0e3
 800a050:	0800a0e3 	.word	0x0800a0e3
 800a054:	0800a0e3 	.word	0x0800a0e3
 800a058:	0800a0e3 	.word	0x0800a0e3
 800a05c:	0800a0e3 	.word	0x0800a0e3
 800a060:	0800a0e3 	.word	0x0800a0e3
 800a064:	0800a0e3 	.word	0x0800a0e3
 800a068:	0800a0e3 	.word	0x0800a0e3
 800a06c:	0800a0e3 	.word	0x0800a0e3
 800a070:	0800a0e3 	.word	0x0800a0e3
 800a074:	0800a0d5 	.word	0x0800a0d5
 800a078:	2b40      	cmp	r3, #64	; 0x40
 800a07a:	d02e      	beq.n	800a0da <UART_SetConfig+0x896>
 800a07c:	e031      	b.n	800a0e2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a07e:	f7fc fd2b 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 800a082:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a084:	e033      	b.n	800a0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a086:	f7fc fd3d 	bl	8006b04 <HAL_RCC_GetPCLK2Freq>
 800a08a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a08c:	e02f      	b.n	800a0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	4618      	mov	r0, r3
 800a094:	f7fd fca2 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09c:	e027      	b.n	800a0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fd fdee 	bl	8007c84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ac:	e01f      	b.n	800a0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ae:	4b58      	ldr	r3, [pc, #352]	; (800a210 <UART_SetConfig+0x9cc>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0320 	and.w	r3, r3, #32
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0ba:	4b55      	ldr	r3, [pc, #340]	; (800a210 <UART_SetConfig+0x9cc>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	4a53      	ldr	r2, [pc, #332]	; (800a214 <UART_SetConfig+0x9d0>)
 800a0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0cc:	e00f      	b.n	800a0ee <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a0ce:	4b51      	ldr	r3, [pc, #324]	; (800a214 <UART_SetConfig+0x9d0>)
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d2:	e00c      	b.n	800a0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0d4:	4b4c      	ldr	r3, [pc, #304]	; (800a208 <UART_SetConfig+0x9c4>)
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d8:	e009      	b.n	800a0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0e0:	e005      	b.n	800a0ee <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80ea 	beq.w	800a2ca <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	4a44      	ldr	r2, [pc, #272]	; (800a20c <UART_SetConfig+0x9c8>)
 800a0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a100:	461a      	mov	r2, r3
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	fbb3 f3f2 	udiv	r3, r3, r2
 800a108:	005a      	lsls	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	085b      	lsrs	r3, r3, #1
 800a110:	441a      	add	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	2b0f      	cmp	r3, #15
 800a122:	d916      	bls.n	800a152 <UART_SetConfig+0x90e>
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a12a:	d212      	bcs.n	800a152 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f023 030f 	bic.w	r3, r3, #15
 800a134:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	085b      	lsrs	r3, r3, #1
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f003 0307 	and.w	r3, r3, #7
 800a140:	b29a      	uxth	r2, r3
 800a142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a144:	4313      	orrs	r3, r2
 800a146:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a14e:	60da      	str	r2, [r3, #12]
 800a150:	e0bb      	b.n	800a2ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a158:	e0b7      	b.n	800a2ca <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a15a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a15e:	2b20      	cmp	r3, #32
 800a160:	dc4a      	bgt.n	800a1f8 <UART_SetConfig+0x9b4>
 800a162:	2b00      	cmp	r3, #0
 800a164:	f2c0 8086 	blt.w	800a274 <UART_SetConfig+0xa30>
 800a168:	2b20      	cmp	r3, #32
 800a16a:	f200 8083 	bhi.w	800a274 <UART_SetConfig+0xa30>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0x930>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a1ff 	.word	0x0800a1ff
 800a178:	0800a219 	.word	0x0800a219
 800a17c:	0800a275 	.word	0x0800a275
 800a180:	0800a275 	.word	0x0800a275
 800a184:	0800a221 	.word	0x0800a221
 800a188:	0800a275 	.word	0x0800a275
 800a18c:	0800a275 	.word	0x0800a275
 800a190:	0800a275 	.word	0x0800a275
 800a194:	0800a231 	.word	0x0800a231
 800a198:	0800a275 	.word	0x0800a275
 800a19c:	0800a275 	.word	0x0800a275
 800a1a0:	0800a275 	.word	0x0800a275
 800a1a4:	0800a275 	.word	0x0800a275
 800a1a8:	0800a275 	.word	0x0800a275
 800a1ac:	0800a275 	.word	0x0800a275
 800a1b0:	0800a275 	.word	0x0800a275
 800a1b4:	0800a241 	.word	0x0800a241
 800a1b8:	0800a275 	.word	0x0800a275
 800a1bc:	0800a275 	.word	0x0800a275
 800a1c0:	0800a275 	.word	0x0800a275
 800a1c4:	0800a275 	.word	0x0800a275
 800a1c8:	0800a275 	.word	0x0800a275
 800a1cc:	0800a275 	.word	0x0800a275
 800a1d0:	0800a275 	.word	0x0800a275
 800a1d4:	0800a275 	.word	0x0800a275
 800a1d8:	0800a275 	.word	0x0800a275
 800a1dc:	0800a275 	.word	0x0800a275
 800a1e0:	0800a275 	.word	0x0800a275
 800a1e4:	0800a275 	.word	0x0800a275
 800a1e8:	0800a275 	.word	0x0800a275
 800a1ec:	0800a275 	.word	0x0800a275
 800a1f0:	0800a275 	.word	0x0800a275
 800a1f4:	0800a267 	.word	0x0800a267
 800a1f8:	2b40      	cmp	r3, #64	; 0x40
 800a1fa:	d037      	beq.n	800a26c <UART_SetConfig+0xa28>
 800a1fc:	e03a      	b.n	800a274 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1fe:	f7fc fc6b 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 800a202:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a204:	e03c      	b.n	800a280 <UART_SetConfig+0xa3c>
 800a206:	bf00      	nop
 800a208:	003d0900 	.word	0x003d0900
 800a20c:	0800b27c 	.word	0x0800b27c
 800a210:	58024400 	.word	0x58024400
 800a214:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a218:	f7fc fc74 	bl	8006b04 <HAL_RCC_GetPCLK2Freq>
 800a21c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a21e:	e02f      	b.n	800a280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a220:	f107 0314 	add.w	r3, r7, #20
 800a224:	4618      	mov	r0, r3
 800a226:	f7fd fbd9 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a22e:	e027      	b.n	800a280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a230:	f107 0308 	add.w	r3, r7, #8
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fd25 	bl	8007c84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a23e:	e01f      	b.n	800a280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a240:	4b2c      	ldr	r3, [pc, #176]	; (800a2f4 <UART_SetConfig+0xab0>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0320 	and.w	r3, r3, #32
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d009      	beq.n	800a260 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a24c:	4b29      	ldr	r3, [pc, #164]	; (800a2f4 <UART_SetConfig+0xab0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	08db      	lsrs	r3, r3, #3
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	4a28      	ldr	r2, [pc, #160]	; (800a2f8 <UART_SetConfig+0xab4>)
 800a258:	fa22 f303 	lsr.w	r3, r2, r3
 800a25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a25e:	e00f      	b.n	800a280 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a260:	4b25      	ldr	r3, [pc, #148]	; (800a2f8 <UART_SetConfig+0xab4>)
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a264:	e00c      	b.n	800a280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a266:	4b25      	ldr	r3, [pc, #148]	; (800a2fc <UART_SetConfig+0xab8>)
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a26a:	e009      	b.n	800a280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a272:	e005      	b.n	800a280 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a27e:	bf00      	nop
    }

    if (pclk != 0U)
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d021      	beq.n	800a2ca <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	4a1d      	ldr	r2, [pc, #116]	; (800a300 <UART_SetConfig+0xabc>)
 800a28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a290:	461a      	mov	r2, r3
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	fbb3 f2f2 	udiv	r2, r3, r2
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	085b      	lsrs	r3, r3, #1
 800a29e:	441a      	add	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	2b0f      	cmp	r3, #15
 800a2b0:	d908      	bls.n	800a2c4 <UART_SetConfig+0xa80>
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b8:	d204      	bcs.n	800a2c4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	e002      	b.n	800a2ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a2e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3738      	adds	r7, #56	; 0x38
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	58024400 	.word	0x58024400
 800a2f8:	03d09000 	.word	0x03d09000
 800a2fc:	003d0900 	.word	0x003d0900
 800a300:	0800b27c 	.word	0x0800b27c

0800a304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00a      	beq.n	800a32e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a398:	f003 0310 	and.w	r3, r3, #16
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01a      	beq.n	800a41a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a402:	d10a      	bne.n	800a41a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	605a      	str	r2, [r3, #4]
  }
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a458:	f7f7 fc68 	bl	8001d2c <HAL_GetTick>
 800a45c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0308 	and.w	r3, r3, #8
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d10e      	bne.n	800a48a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a46c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f82f 	bl	800a4de <UART_WaitOnFlagUntilTimeout>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e025      	b.n	800a4d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b04      	cmp	r3, #4
 800a496:	d10e      	bne.n	800a4b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f819 	bl	800a4de <UART_WaitOnFlagUntilTimeout>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e00f      	b.n	800a4d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	603b      	str	r3, [r7, #0]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ee:	e062      	b.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d05e      	beq.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f8:	f7f7 fc18 	bl	8001d2c <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	429a      	cmp	r2, r3
 800a506:	d302      	bcc.n	800a50e <UART_WaitOnFlagUntilTimeout+0x30>
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d11d      	bne.n	800a54a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a51c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0201 	bic.w	r2, r2, #1
 800a52c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2220      	movs	r2, #32
 800a53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e045      	b.n	800a5d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b00      	cmp	r3, #0
 800a556:	d02e      	beq.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a566:	d126      	bne.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a570:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a580:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0201 	bic.w	r2, r2, #1
 800a590:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e00f      	b.n	800a5d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69da      	ldr	r2, [r3, #28]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	bf0c      	ite	eq
 800a5c6:	2301      	moveq	r3, #1
 800a5c8:	2300      	movne	r3, #0
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d08d      	beq.n	800a4f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	88fa      	ldrh	r2, [r7, #6]
 800a5f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2222      	movs	r2, #34	; 0x22
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02c      	beq.n	800a66e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a618:	4a25      	ldr	r2, [pc, #148]	; (800a6b0 <UART_Start_Receive_DMA+0xd0>)
 800a61a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a620:	4a24      	ldr	r2, [pc, #144]	; (800a6b4 <UART_Start_Receive_DMA+0xd4>)
 800a622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a628:	4a23      	ldr	r2, [pc, #140]	; (800a6b8 <UART_Start_Receive_DMA+0xd8>)
 800a62a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a630:	2200      	movs	r2, #0
 800a632:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3324      	adds	r3, #36	; 0x24
 800a63e:	4619      	mov	r1, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a644:	461a      	mov	r2, r3
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	f7f8 f82c 	bl	80026a4 <HAL_DMA_Start_IT>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00d      	beq.n	800a66e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2210      	movs	r2, #16
 800a656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2220      	movs	r2, #32
 800a666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e01c      	b.n	800a6a8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a684:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0201 	orr.w	r2, r2, #1
 800a694:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6a4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	0800a75d 	.word	0x0800a75d
 800a6b4:	0800a7f3 	.word	0x0800a7f3
 800a6b8:	0800a82b 	.word	0x0800a82b

0800a6bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a6d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a6e2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a70e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6899      	ldr	r1, [r3, #8]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <UART_EndRxTransfer+0x60>)
 800a71c:	400b      	ands	r3, r1
 800a71e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a724:	2b01      	cmp	r3, #1
 800a726:	d107      	bne.n	800a738 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0210 	bic.w	r2, r2, #16
 800a736:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2220      	movs	r2, #32
 800a73c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	effffffe 	.word	0xeffffffe

0800a75c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a768:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a772:	d02b      	beq.n	800a7cc <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a78a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0201 	bic.w	r2, r2, #1
 800a79a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7aa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d107      	bne.n	800a7cc <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0210 	bic.w	r2, r2, #16
 800a7ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d107      	bne.n	800a7e4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7da:	4619      	mov	r1, r3
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f7ff f825 	bl	800982c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7e2:	e002      	b.n	800a7ea <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7ff f803 	bl	80097f0 <HAL_UART_RxCpltCallback>
}
 800a7ea:	bf00      	nop
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	2b01      	cmp	r3, #1
 800a806:	d109      	bne.n	800a81c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	b29b      	uxth	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f7ff f809 	bl	800982c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a81a:	e002      	b.n	800a822 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7fe fff1 	bl	8009804 <HAL_UART_RxHalfCpltCallback>
}
 800a822:	bf00      	nop
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a83e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a852:	2b80      	cmp	r3, #128	; 0x80
 800a854:	d109      	bne.n	800a86a <UART_DMAError+0x40>
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2b21      	cmp	r3, #33	; 0x21
 800a85a:	d106      	bne.n	800a86a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a864:	6978      	ldr	r0, [r7, #20]
 800a866:	f7ff ff29 	bl	800a6bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d109      	bne.n	800a88c <UART_DMAError+0x62>
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b22      	cmp	r3, #34	; 0x22
 800a87c:	d106      	bne.n	800a88c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2200      	movs	r2, #0
 800a882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a886:	6978      	ldr	r0, [r7, #20]
 800a888:	f7ff ff36 	bl	800a6f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a892:	f043 0210 	orr.w	r2, r3, #16
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a89c:	6978      	ldr	r0, [r7, #20]
 800a89e:	f7fe ffbb 	bl	8009818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8a2:	bf00      	nop
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7fe ffa5 	bl	8009818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7fe ff6d 	bl	80097dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <HAL_UARTEx_DisableFifoMode+0x16>
 800a958:	2302      	movs	r3, #2
 800a95a:	e027      	b.n	800a9ac <HAL_UARTEx_DisableFifoMode+0x66>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2224      	movs	r2, #36	; 0x24
 800a968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 0201 	bic.w	r2, r2, #1
 800a982:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a98a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d101      	bne.n	800a9d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e02d      	b.n	800aa2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2224      	movs	r2, #36	; 0x24
 800a9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 0201 	bic.w	r2, r2, #1
 800a9f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f84f 	bl	800aab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d101      	bne.n	800aa4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e02d      	b.n	800aaa8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2224      	movs	r2, #36	; 0x24
 800aa58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0201 	bic.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f811 	bl	800aab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d108      	bne.n	800aad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad0:	e031      	b.n	800ab36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aad2:	2310      	movs	r3, #16
 800aad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aad6:	2310      	movs	r3, #16
 800aad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	0e5b      	lsrs	r3, r3, #25
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	0f5b      	lsrs	r3, r3, #29
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	7b3a      	ldrb	r2, [r7, #12]
 800aafe:	4911      	ldr	r1, [pc, #68]	; (800ab44 <UARTEx_SetNbDataToProcess+0x94>)
 800ab00:	5c8a      	ldrb	r2, [r1, r2]
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab06:	7b3a      	ldrb	r2, [r7, #12]
 800ab08:	490f      	ldr	r1, [pc, #60]	; (800ab48 <UARTEx_SetNbDataToProcess+0x98>)
 800ab0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	7b7a      	ldrb	r2, [r7, #13]
 800ab1c:	4909      	ldr	r1, [pc, #36]	; (800ab44 <UARTEx_SetNbDataToProcess+0x94>)
 800ab1e:	5c8a      	ldrb	r2, [r1, r2]
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab24:	7b7a      	ldrb	r2, [r7, #13]
 800ab26:	4908      	ldr	r1, [pc, #32]	; (800ab48 <UARTEx_SetNbDataToProcess+0x98>)
 800ab28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	0800b294 	.word	0x0800b294
 800ab48:	0800b29c 	.word	0x0800b29c

0800ab4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	f107 001c 	add.w	r0, r7, #28
 800ab5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d120      	bne.n	800aba6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	4b2a      	ldr	r3, [pc, #168]	; (800ac20 <USB_CoreInit+0xd4>)
 800ab76:	4013      	ands	r3, r2
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d105      	bne.n	800ab9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fa60 	bl	800b060 <USB_CoreReset>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]
 800aba4:	e01a      	b.n	800abdc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fa54 	bl	800b060 <USB_CoreReset>
 800abb8:	4603      	mov	r3, r0
 800abba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800abbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	639a      	str	r2, [r3, #56]	; 0x38
 800abce:	e005      	b.n	800abdc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d116      	bne.n	800ac10 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abf0:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <USB_CoreInit+0xd8>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f043 0206 	orr.w	r2, r3, #6
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f043 0220 	orr.w	r2, r3, #32
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac1c:	b004      	add	sp, #16
 800ac1e:	4770      	bx	lr
 800ac20:	ffbdffbf 	.word	0xffbdffbf
 800ac24:	03ee0000 	.word	0x03ee0000

0800ac28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f023 0201 	bic.w	r2, r3, #1
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	460b      	mov	r3, r1
 800ac54:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d106      	bne.n	800ac76 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60da      	str	r2, [r3, #12]
 800ac74:	e00b      	b.n	800ac8e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac76:	78fb      	ldrb	r3, [r7, #3]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d106      	bne.n	800ac8a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60da      	str	r2, [r3, #12]
 800ac88:	e001      	b.n	800ac8e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e003      	b.n	800ac96 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ac8e:	2032      	movs	r0, #50	; 0x32
 800ac90:	f7f7 f858 	bl	8001d44 <HAL_Delay>

  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aca0:	b084      	sub	sp, #16
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800acae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acba:	2300      	movs	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	e009      	b.n	800acd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3340      	adds	r3, #64	; 0x40
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	2200      	movs	r2, #0
 800accc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	3301      	adds	r3, #1
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b0e      	cmp	r3, #14
 800acd8:	d9f2      	bls.n	800acc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11c      	bne.n	800ad1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acee:	f043 0302 	orr.w	r3, r3, #2
 800acf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e005      	b.n	800ad26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	4619      	mov	r1, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad40:	461a      	mov	r2, r3
 800ad42:	680b      	ldr	r3, [r1, #0]
 800ad44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d10c      	bne.n	800ad66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d104      	bne.n	800ad5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad52:	2100      	movs	r1, #0
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f949 	bl	800afec <USB_SetDevSpeed>
 800ad5a:	e008      	b.n	800ad6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f944 	bl	800afec <USB_SetDevSpeed>
 800ad64:	e003      	b.n	800ad6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad66:	2103      	movs	r1, #3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f93f 	bl	800afec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad6e:	2110      	movs	r1, #16
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f8f3 	bl	800af5c <USB_FlushTxFifo>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f911 	bl	800afa8 <USB_FlushRxFifo>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	461a      	mov	r2, r3
 800ad98:	2300      	movs	r3, #0
 800ad9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada2:	461a      	mov	r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adae:	461a      	mov	r2, r3
 800adb0:	2300      	movs	r3, #0
 800adb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adb4:	2300      	movs	r3, #0
 800adb6:	613b      	str	r3, [r7, #16]
 800adb8:	e043      	b.n	800ae42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800add0:	d118      	bne.n	800ae04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade4:	461a      	mov	r2, r3
 800ade6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	e013      	b.n	800ae16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfa:	461a      	mov	r2, r3
 800adfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	e008      	b.n	800ae16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae10:	461a      	mov	r2, r3
 800ae12:	2300      	movs	r3, #0
 800ae14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae22:	461a      	mov	r2, r3
 800ae24:	2300      	movs	r3, #0
 800ae26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	461a      	mov	r2, r3
 800ae36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	613b      	str	r3, [r7, #16]
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d3b7      	bcc.n	800adba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	613b      	str	r3, [r7, #16]
 800ae4e:	e043      	b.n	800aed8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae66:	d118      	bne.n	800ae9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	e013      	b.n	800aeac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae90:	461a      	mov	r2, r3
 800ae92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	e008      	b.n	800aeac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea6:	461a      	mov	r2, r3
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb8:	461a      	mov	r2, r3
 800aeba:	2300      	movs	r3, #0
 800aebc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeca:	461a      	mov	r2, r3
 800aecc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aed0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3301      	adds	r3, #1
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3b7      	bcc.n	800ae50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aef2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	2b00      	cmp	r3, #0
 800af06:	d105      	bne.n	800af14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	f043 0210 	orr.w	r2, r3, #16
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	699a      	ldr	r2, [r3, #24]
 800af18:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <USB_DevInit+0x2b4>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	f043 0208 	orr.w	r2, r3, #8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d105      	bne.n	800af44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	4b06      	ldr	r3, [pc, #24]	; (800af58 <USB_DevInit+0x2b8>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af50:	b004      	add	sp, #16
 800af52:	4770      	bx	lr
 800af54:	803c3800 	.word	0x803c3800
 800af58:	40000004 	.word	0x40000004

0800af5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	019b      	lsls	r3, r3, #6
 800af6e:	f043 0220 	orr.w	r2, r3, #32
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3301      	adds	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <USB_FlushTxFifo+0x48>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d901      	bls.n	800af88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800af84:	2303      	movs	r3, #3
 800af86:	e006      	b.n	800af96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b20      	cmp	r3, #32
 800af92:	d0f0      	beq.n	800af76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	00030d40 	.word	0x00030d40

0800afa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2210      	movs	r2, #16
 800afb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <USB_FlushRxFifo+0x40>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d901      	bls.n	800afcc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e006      	b.n	800afda <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	f003 0310 	and.w	r3, r3, #16
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d0f0      	beq.n	800afba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	00030d40 	.word	0x00030d40

0800afec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b00c:	4313      	orrs	r3, r2
 800b00e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b038:	f023 0303 	bic.w	r3, r3, #3
 800b03c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b04c:	f043 0302 	orr.w	r3, r3, #2
 800b050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	3301      	adds	r3, #1
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4a13      	ldr	r2, [pc, #76]	; (800b0c4 <USB_CoreReset+0x64>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d901      	bls.n	800b07e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e01b      	b.n	800b0b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	daf2      	bge.n	800b06c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f043 0201 	orr.w	r2, r3, #1
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4a09      	ldr	r2, [pc, #36]	; (800b0c4 <USB_CoreReset+0x64>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d901      	bls.n	800b0a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e006      	b.n	800b0b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d0f0      	beq.n	800b096 <USB_CoreReset+0x36>

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	00030d40 	.word	0x00030d40

0800b0c8 <calloc>:
 800b0c8:	4b02      	ldr	r3, [pc, #8]	; (800b0d4 <calloc+0xc>)
 800b0ca:	460a      	mov	r2, r1
 800b0cc:	4601      	mov	r1, r0
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	f000 b834 	b.w	800b13c <_calloc_r>
 800b0d4:	24000020 	.word	0x24000020

0800b0d8 <__errno>:
 800b0d8:	4b01      	ldr	r3, [pc, #4]	; (800b0e0 <__errno+0x8>)
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	24000020 	.word	0x24000020

0800b0e4 <__libc_init_array>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	4d0d      	ldr	r5, [pc, #52]	; (800b11c <__libc_init_array+0x38>)
 800b0e8:	4c0d      	ldr	r4, [pc, #52]	; (800b120 <__libc_init_array+0x3c>)
 800b0ea:	1b64      	subs	r4, r4, r5
 800b0ec:	10a4      	asrs	r4, r4, #2
 800b0ee:	2600      	movs	r6, #0
 800b0f0:	42a6      	cmp	r6, r4
 800b0f2:	d109      	bne.n	800b108 <__libc_init_array+0x24>
 800b0f4:	4d0b      	ldr	r5, [pc, #44]	; (800b124 <__libc_init_array+0x40>)
 800b0f6:	4c0c      	ldr	r4, [pc, #48]	; (800b128 <__libc_init_array+0x44>)
 800b0f8:	f000 f8a8 	bl	800b24c <_init>
 800b0fc:	1b64      	subs	r4, r4, r5
 800b0fe:	10a4      	asrs	r4, r4, #2
 800b100:	2600      	movs	r6, #0
 800b102:	42a6      	cmp	r6, r4
 800b104:	d105      	bne.n	800b112 <__libc_init_array+0x2e>
 800b106:	bd70      	pop	{r4, r5, r6, pc}
 800b108:	f855 3b04 	ldr.w	r3, [r5], #4
 800b10c:	4798      	blx	r3
 800b10e:	3601      	adds	r6, #1
 800b110:	e7ee      	b.n	800b0f0 <__libc_init_array+0xc>
 800b112:	f855 3b04 	ldr.w	r3, [r5], #4
 800b116:	4798      	blx	r3
 800b118:	3601      	adds	r6, #1
 800b11a:	e7f2      	b.n	800b102 <__libc_init_array+0x1e>
 800b11c:	0800b2ac 	.word	0x0800b2ac
 800b120:	0800b2ac 	.word	0x0800b2ac
 800b124:	0800b2ac 	.word	0x0800b2ac
 800b128:	0800b2b0 	.word	0x0800b2b0

0800b12c <memset>:
 800b12c:	4402      	add	r2, r0
 800b12e:	4603      	mov	r3, r0
 800b130:	4293      	cmp	r3, r2
 800b132:	d100      	bne.n	800b136 <memset+0xa>
 800b134:	4770      	bx	lr
 800b136:	f803 1b01 	strb.w	r1, [r3], #1
 800b13a:	e7f9      	b.n	800b130 <memset+0x4>

0800b13c <_calloc_r>:
 800b13c:	b513      	push	{r0, r1, r4, lr}
 800b13e:	434a      	muls	r2, r1
 800b140:	4611      	mov	r1, r2
 800b142:	9201      	str	r2, [sp, #4]
 800b144:	f000 f80a 	bl	800b15c <_malloc_r>
 800b148:	4604      	mov	r4, r0
 800b14a:	b118      	cbz	r0, 800b154 <_calloc_r+0x18>
 800b14c:	9a01      	ldr	r2, [sp, #4]
 800b14e:	2100      	movs	r1, #0
 800b150:	f7ff ffec 	bl	800b12c <memset>
 800b154:	4620      	mov	r0, r4
 800b156:	b002      	add	sp, #8
 800b158:	bd10      	pop	{r4, pc}
	...

0800b15c <_malloc_r>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	1ccd      	adds	r5, r1, #3
 800b160:	f025 0503 	bic.w	r5, r5, #3
 800b164:	3508      	adds	r5, #8
 800b166:	2d0c      	cmp	r5, #12
 800b168:	bf38      	it	cc
 800b16a:	250c      	movcc	r5, #12
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	4606      	mov	r6, r0
 800b170:	db01      	blt.n	800b176 <_malloc_r+0x1a>
 800b172:	42a9      	cmp	r1, r5
 800b174:	d903      	bls.n	800b17e <_malloc_r+0x22>
 800b176:	230c      	movs	r3, #12
 800b178:	6033      	str	r3, [r6, #0]
 800b17a:	2000      	movs	r0, #0
 800b17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17e:	f000 f857 	bl	800b230 <__malloc_lock>
 800b182:	4921      	ldr	r1, [pc, #132]	; (800b208 <_malloc_r+0xac>)
 800b184:	680a      	ldr	r2, [r1, #0]
 800b186:	4614      	mov	r4, r2
 800b188:	b99c      	cbnz	r4, 800b1b2 <_malloc_r+0x56>
 800b18a:	4f20      	ldr	r7, [pc, #128]	; (800b20c <_malloc_r+0xb0>)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	b923      	cbnz	r3, 800b19a <_malloc_r+0x3e>
 800b190:	4621      	mov	r1, r4
 800b192:	4630      	mov	r0, r6
 800b194:	f000 f83c 	bl	800b210 <_sbrk_r>
 800b198:	6038      	str	r0, [r7, #0]
 800b19a:	4629      	mov	r1, r5
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 f837 	bl	800b210 <_sbrk_r>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	d123      	bne.n	800b1ee <_malloc_r+0x92>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	6033      	str	r3, [r6, #0]
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f000 f846 	bl	800b23c <__malloc_unlock>
 800b1b0:	e7e3      	b.n	800b17a <_malloc_r+0x1e>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	1b5b      	subs	r3, r3, r5
 800b1b6:	d417      	bmi.n	800b1e8 <_malloc_r+0x8c>
 800b1b8:	2b0b      	cmp	r3, #11
 800b1ba:	d903      	bls.n	800b1c4 <_malloc_r+0x68>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	441c      	add	r4, r3
 800b1c0:	6025      	str	r5, [r4, #0]
 800b1c2:	e004      	b.n	800b1ce <_malloc_r+0x72>
 800b1c4:	6863      	ldr	r3, [r4, #4]
 800b1c6:	42a2      	cmp	r2, r4
 800b1c8:	bf0c      	ite	eq
 800b1ca:	600b      	streq	r3, [r1, #0]
 800b1cc:	6053      	strne	r3, [r2, #4]
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f000 f834 	bl	800b23c <__malloc_unlock>
 800b1d4:	f104 000b 	add.w	r0, r4, #11
 800b1d8:	1d23      	adds	r3, r4, #4
 800b1da:	f020 0007 	bic.w	r0, r0, #7
 800b1de:	1ac2      	subs	r2, r0, r3
 800b1e0:	d0cc      	beq.n	800b17c <_malloc_r+0x20>
 800b1e2:	1a1b      	subs	r3, r3, r0
 800b1e4:	50a3      	str	r3, [r4, r2]
 800b1e6:	e7c9      	b.n	800b17c <_malloc_r+0x20>
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	6864      	ldr	r4, [r4, #4]
 800b1ec:	e7cc      	b.n	800b188 <_malloc_r+0x2c>
 800b1ee:	1cc4      	adds	r4, r0, #3
 800b1f0:	f024 0403 	bic.w	r4, r4, #3
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d0e3      	beq.n	800b1c0 <_malloc_r+0x64>
 800b1f8:	1a21      	subs	r1, r4, r0
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f000 f808 	bl	800b210 <_sbrk_r>
 800b200:	3001      	adds	r0, #1
 800b202:	d1dd      	bne.n	800b1c0 <_malloc_r+0x64>
 800b204:	e7cf      	b.n	800b1a6 <_malloc_r+0x4a>
 800b206:	bf00      	nop
 800b208:	2400c1c4 	.word	0x2400c1c4
 800b20c:	2400c1c8 	.word	0x2400c1c8

0800b210 <_sbrk_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d06      	ldr	r5, [pc, #24]	; (800b22c <_sbrk_r+0x1c>)
 800b214:	2300      	movs	r3, #0
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f6 fca0 	bl	8001b60 <_sbrk>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_sbrk_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_sbrk_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	2400c914 	.word	0x2400c914

0800b230 <__malloc_lock>:
 800b230:	4801      	ldr	r0, [pc, #4]	; (800b238 <__malloc_lock+0x8>)
 800b232:	f000 b809 	b.w	800b248 <__retarget_lock_acquire_recursive>
 800b236:	bf00      	nop
 800b238:	2400c91c 	.word	0x2400c91c

0800b23c <__malloc_unlock>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__malloc_unlock+0x8>)
 800b23e:	f000 b804 	b.w	800b24a <__retarget_lock_release_recursive>
 800b242:	bf00      	nop
 800b244:	2400c91c 	.word	0x2400c91c

0800b248 <__retarget_lock_acquire_recursive>:
 800b248:	4770      	bx	lr

0800b24a <__retarget_lock_release_recursive>:
 800b24a:	4770      	bx	lr

0800b24c <_init>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr

0800b258 <_fini>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr
